import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-_v-Us2VE.js";const e={},o=t(`<h2 id="文件" tabindex="-1"><a class="header-anchor" href="#文件" aria-hidden="true">#</a> 文件</h2><p>在文本文件的内部以字符的形式存储数据，字符是有编码的。例如：<code>GBK</code>（简体中文）、<code>UTF-8</code> 等。在二进制文件的内部以字节的形式存储数据，没有编码的概念，二进制文件较为常用。例如：Windows 中的 <code>exe</code>、图片（<code>jpg</code>、<code>png</code> 等）以及 <code>Word</code>、<code>Excel</code> 和 <code>PPT</code> 等文件。</p><div class="hint-container tip"><p class="hint-container-title">打开关闭文件</p><p>在 Python 中，内置了文件（File）对象，在使用文件对象时，首先需要通过内置的 <code>open()</code> 方法创建一个文件对象，然后通过该对象提供的方法进行一些基本文件操作</p></div><h3 id="创建和打开文件" tabindex="-1"><a class="header-anchor" href="#创建和打开文件" aria-hidden="true">#</a> 创建和打开文件</h3><p>可以使用 <code>open()</code> 函数创建或者打开指定文件并创建文件对象。</p><p><strong>语法格式</strong>：<code>file = open(filename[, mode[, buffering[, encoding[, errors[, newline[, closefd[, opener]]]]]]])</code></p><ul><li><strong>file</strong>：被创建的文件对象</li><li><strong>filename</strong>：要创建或打开的文件名称，需要用单引号或双引号括起来。可以使用相对路径也可以使用绝对路径</li><li><strong>mode</strong>：可选参数，指定文件的打开模式。默认的打开模式为只读（<code>r</code>）</li><li><strong>buffering</strong>：可选参数，指定读写文件的缓冲模式，值为 <code>0</code> 表示不缓存；值为 <code>1</code> 表示缓存；如果大于 <code>1</code>，则表示缓冲区的大小。默认为缓存模式</li><li><strong>encoding</strong>：指定文件编码。默认为 <code>None</code>。encoding 参数仅可在采用文本方式（即 mode 值为 <code>t</code>）读写数据的情况下有效，二进制方式下不可指定。常用的有 <code>utf-8</code>、<code>ascii</code>、<code>gbk</code> 等</li><li><strong>errors</strong>：指定在文本文件发生编码错误时如何处理。默认为 <code>None</code>。仅当 mode 参数采用文本方式时有效，二进制方式下不可指定。常用的可选值有 <code>strict</code>、<code>ignore</code>、<code>replace</code>、<code>surrogateescape</code>、<code>xmlcharrefreplace</code>、<code>backslashreplace</code>、<code>namereplace</code> 等。推荐参数为 <code>ignore</code> 表示在遇到编码错误时忽略该错误，程序继续执行</li><li><strong>newline</strong>：设置换行符。默认为 <code>None</code>。可选值包括 <code>None</code>、<code>\\r</code>、<code>\\n</code>、<code>\\r\\n</code>。</li><li><strong>closefd</strong>：控制传入的 file 参数类型。默认为 <code>True</code>，当为 <code>True</code> 时，file 参数可以是表示文件路径的字符串，也可以是文件描述符，当为 <code>False</code> 时，file 参数只能是文件描述符，传入字符串会报错</li></ul><p><strong>mode 参数列表如下：</strong></p><table><thead><tr><th style="text-align:center;">参数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>t</strong></td><td style="text-align:left;">文本模式（默认）</td></tr><tr><td style="text-align:center;"><strong>x</strong></td><td style="text-align:left;">写模式，新建一个文件，如果文件存在，则报错</td></tr><tr><td style="text-align:center;"><strong>b</strong></td><td style="text-align:left;">二进制模式</td></tr><tr><td style="text-align:center;"><strong>+</strong></td><td style="text-align:left;">打开一个文件进行更新（读写模式）</td></tr><tr><td style="text-align:center;"><strong>U</strong></td><td style="text-align:left;">通用换行模式（不推荐）</td></tr><tr><td style="text-align:center;"><strong>r</strong></td><td style="text-align:left;">只读模式打开文件，文件的指针将会放在文件的开头。文件必须存在</td></tr><tr><td style="text-align:center;"><strong>rb</strong></td><td style="text-align:left;">只读模式以二进制格式打开文件，文件的指针将会放在文件的开头，一般用于非文本文件。例如：图片、声音等。文件必须存在</td></tr><tr><td style="text-align:center;"><strong>r+</strong></td><td style="text-align:left;">读写模式打开文件，写入新的内容覆盖原有内容，文件的指针将会放在文件的开头。文件必须存在</td></tr><tr><td style="text-align:center;"><strong>rb+</strong></td><td style="text-align:left;">读写模式以二进制格式打开文件，文件的指针将会放在文件的开头，一般用于非文本文件。例如：图片、声音等。文件必须存在</td></tr><tr><td style="text-align:center;"><strong>w</strong></td><td style="text-align:left;">只写模式打开文件。文件如果存在，则将其覆盖，否则创建新文件</td></tr><tr><td style="text-align:center;"><strong>wb</strong></td><td style="text-align:left;">只写模式以二进制格式打开文件，一般用于非文本文件。例如：图片、声音等。文件如果存在，则将其覆盖，否则创建新文件</td></tr><tr><td style="text-align:center;"><strong>w+</strong></td><td style="text-align:left;">读写模式打开文件，先清空原有内容，再写入内容。文件如果存在，则将其覆盖，否则创建新文件</td></tr><tr><td style="text-align:center;"><strong>wb+</strong></td><td style="text-align:left;">读写模式以二进制格式打开文件，一般用于非文本文件。例如：图片、声音等。文件如果存在，则将其覆盖，否则创建新文件</td></tr><tr><td style="text-align:center;"><strong>a</strong></td><td style="text-align:left;">追加模式打开文件。如果该文件存在，文件指针将会放在文件的末尾，否则，创建新文件写入</td></tr><tr><td style="text-align:center;"><strong>ab</strong></td><td style="text-align:left;">追加模式以二进制格式打开文件。如果该文件存在，文件指针将会放在文件的末尾，否则，创建新文件写入</td></tr><tr><td style="text-align:center;"><strong>a+</strong></td><td style="text-align:left;">读写、追加模式打开文件。如果该文件存在，文件指针将会放在文件的末尾，否则，创建新文件写入</td></tr><tr><td style="text-align:center;"><strong>ab+</strong></td><td style="text-align:left;">读写、追加模式以二进制格式打开文件。如果该文件存在，文件指针将会放在文件的末尾，否则，创建新文件写入</td></tr></tbody></table><p>例如：打开一个不存在的文件。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;打开文件&quot;</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
打开文件 <span class="token operator">&lt;</span>_io<span class="token punctuation">.</span>TextIOWrapper name<span class="token operator">=</span><span class="token string">&#39;test.txt&#39;</span> mode<span class="token operator">=</span><span class="token string">&#39;w&#39;</span> encoding<span class="token operator">=</span><span class="token string">&#39;cp936&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：以二进制形式打开文件。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;picture.png&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;_io.BufferedReader name=&#39;picture.png&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：打开文件时指定编码方式。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token operator">&lt;</span>_io<span class="token punctuation">.</span>TextIOWrapper name<span class="token operator">=</span><span class="token string">&#39;test.txt&#39;</span> mode<span class="token operator">=</span><span class="token string">&#39;r&#39;</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关闭文件" tabindex="-1"><a class="header-anchor" href="#关闭文件" aria-hidden="true">#</a> 关闭文件</h3><p>可以使用 <code>close()</code> 方法对打开的文件进行关闭，以免对文件造成不必要的破坏。</p><p><strong>语法格式</strong>：<code>file.close()</code></p><ul><li><strong>file</strong>：为打开的文件对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>

<span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token operator">&lt;</span>_io<span class="token punctuation">.</span>TextIOWrapper name<span class="token operator">=</span><span class="token string">&#39;test.txt&#39;</span> mode<span class="token operator">=</span><span class="token string">&#39;r&#39;</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>close()</code> 方法先刷新缓冲区中还没有写入的信息，然后再关闭文件，这样可以将没有写入到文件的内容写入到文件中，在关闭文件后，便不能再进行写入操作了</p></div><h3 id="with-as-语句" tabindex="-1"><a class="header-anchor" href="#with-as-语句" aria-hidden="true">#</a> with as 语句</h3><p>如果在打开文件时抛出异常，那么将导致文件不能被及时关闭。使用 <code>with as</code> 语句在处理文件时，无论是否抛出异常，都能保证 <code>with</code> 语句执行完成后关闭已打开的文件。</p><p><strong>语法格式：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> expression <span class="token keyword">as</span> target<span class="token punctuation">:</span>
    <span class="token keyword">with</span><span class="token operator">-</span>body
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>expression</strong>：指定一个表达式，可以是打开文件的 <code>open()</code> 函数</li><li><strong>target</strong>：指定一个变量，并且将 <code>expression</code> 的结果保存到该变量中</li><li><strong>with-body</strong>：指定 <code>with</code> 语句体，可以是执行 <code>with</code> 语句后相关的一些操作语句</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;打开文件&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：打开文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="finally-语句" tabindex="-1"><a class="header-anchor" href="#finally-语句" aria-hidden="true">#</a> finally 语句</h3><p>对文件的操作往往会抛出异常，为了保证对文件的操作无论是正常结束还异常结束，都能够关闭文件，应该将对 <code>close()</code> 方法的调用放在异常处理的 <code>finally</code> 代码块中。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;打开文件&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;文件不存在，请先创建文件&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> OSError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;处理异常&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">file</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;关闭文件！&quot;</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
打开文件
关闭文件！
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="读写文本文件" tabindex="-1"><a class="header-anchor" href="#读写文本文件" aria-hidden="true">#</a> 读写文本文件</h2><ul><li><strong>read([size])</strong>：从文件中读取字符串，<code>size</code> 限制读取字符串的个数，默认为全部读取</li><li><strong>readline([size])</strong>：在读取到换行符或文件末尾时返回单行字符串。如果已经到文件末尾，则返回一个空字符串</li><li><strong>readlines([size])</strong>：读取文件数据到一个字符串列表中，每行数据都是列表的一个元素</li><li><strong>write(s)</strong>：将字符串 s 写入文件中，并返回写入的字符个数</li><li><strong>writelines(lines)</strong>：向文件中写入一个字符串列表，默认没有分隔符</li><li><strong>flush()</strong>：刷新写缓冲区，在文件没有关闭的情况下将数据写入文件中</li></ul><h3 id="写入文件内容" tabindex="-1"><a class="header-anchor" href="#写入文件内容" aria-hidden="true">#</a> 写入文件内容</h3><p>在 Python 中对文件对象提供了 <code>write()</code> 方法，可以向文件中写入内容。</p><p><strong>语法格式</strong>：<code>file.write(string)</code></p><ul><li><strong>file</strong>：指定要打开的文件对象</li><li><strong>string</strong>：指定要写入的内容</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在调用 <code>write()</code> 方法向文件中写入内容的前提是在打开文件时，指定打开模式为 <code>w</code>（可写）或 <code>a</code>（追加），否则会报错</p></div><p>使用 <code>w</code> 读写模式，写入内容。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;Hello, World!\\n&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;写入内容&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：写入内容</span>

<span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在写入文件后，一定要调用 <code>close()</code> 方法关闭文件，否则写入的内容不会保存到文件中。这是因为当写入文件内容时，操作系统不会立刻把数据写入到磁盘中，而是先缓存起来，只有调用 <code>close()</code> 方法时才会将数据写入到磁盘中</p></div><p>使用 <code>a</code> 追加模式写入内容。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;Hello, Python!&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;写入内容&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：写入内容</span>

<span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="读取文件" tabindex="-1"><a class="header-anchor" href="#读取文件" aria-hidden="true">#</a> 读取文件</h3><p>使用文件对象的 <code>read()</code> 方法读取指定个数的字符。</p><p><strong>语法格式</strong>：<code>file.read([size])</code></p><ul><li><strong>file</strong>：指定要读取的文件对象</li><li><strong>size</strong>：指定要读取字符的个数，如果省略，则读取所有内容</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在调用 <code>read()</code> 方法读取文件内容的前提时在打开文件时，指定打开模式为 <code>r</code>（只读）或 <code>r+</code>（读写），否则会报错</p></div><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    mystr <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
Hello<span class="token punctuation">,</span> World!
Hello<span class="token punctuation">,</span> Python!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用文件对象的 <code>seek()</code> 方法将文件的指针移动到只读位置，然后再应用 <code>read()</code> 方法读取，可以读取文件部分内容。</p><p><strong>语法格式</strong>：<code>file.seek(offset[, whence])</code></p><ul><li><strong>file</strong>：指定已经打开的文件对象</li><li><strong>offset</strong>：指定移动的字符个数，具体位置与 whence 参数有关</li><li><strong>whence</strong>：指定从什么位置开始计算。默认为 <code>0</code>，值为 <code>0</code> 表示从文件头开始计算，值为 <code>1</code> 表示从当前位置开始计算，值为 <code>2</code> 表示从文件末尾开始计算</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    <span class="token builtin">file</span><span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
    mystr <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
 World!
He
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>对于 whence 参数，如果在打开文件时，没有使用 <code>b</code> 模式（即 <code>rb</code>），那么只允许从文件头开始计算相对位置，从文件末尾计算时就会抛出异常</p><p>在使用 <code>seek()</code> 方法时，如果采用 <code>GBK</code> 编码，那么 <code>offset</code> 的值是按一个汉字（包括中文标点符号）占两个字符计算，采用 <code>UTF-8</code> 编码，则一个汉字占三个字符，不过无论采用何种编码英文和数字都是按一个字符计算</p></div><p>使用文件对象的 <code>readline()</code> 方法用于每次读取一行数据。</p><p><strong>语法格式</strong>：<code>file.readline()</code></p><ul><li><strong>file</strong>：指定已经打开的文件对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    num <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        num <span class="token operator">+=</span> <span class="token number">1</span>
        line <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> line <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> line<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token number">1</span> Hello<span class="token punctuation">,</span> World!

<span class="token number">2</span> Hello<span class="token punctuation">,</span> Python!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用文件对象的 <code>readlines()</code> 方法用于读取全部行，返回的是一个字符串列表，每行内容为一个元素。</p><p><strong>语法格式</strong>：<code>file.readlines()</code></p><ul><li><strong>file</strong>：指定要打开的文件对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    lines <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;Hello, World!\\n&#39;, &#39;Hello, Python!&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件的对象属性" tabindex="-1"><a class="header-anchor" href="#文件的对象属性" aria-hidden="true">#</a> 文件的对象属性</h3><p>有三个 <strong>常用的方法</strong> 可用于查看文件对象的属性：</p><ul><li><strong>closed</strong>：如果文件对象已关闭，返回 <code>True</code>，否则返回 <code>False</code></li><li><strong>mode</strong>：返回文件对象的访问模式</li><li><strong>name</strong>：返回文件的名称</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;a+&#39;</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>closed<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：test.txt</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>mode<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：a+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="目录操作" tabindex="-1"><a class="header-anchor" href="#目录操作" aria-hidden="true">#</a> 目录操作</h2><p>目录也称文件夹，用于分层保存文件。通过使用 <code>os</code> 内置模块和 <code>os.path</code> 子模块实现。</p><p>常用的目录操作主要有判断目录是否存在、创建目录、删除目录和遍历目录等。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>os 模块是 Python 内置模块与操作系统和文件系统相关，执行结果通常与操作系统有关</p></div><h3 id="os-模块和-os-path-子模块" tabindex="-1"><a class="header-anchor" href="#os-模块和-os-path-子模块" aria-hidden="true">#</a> os 模块和 os.path 子模块</h3><p><strong>常用的变量有以下几个：</strong></p><ul><li><strong>os.name</strong>：用于获取操作系统。例如：<code>nt</code></li><li><strong>os.linesep</strong>：用于获取当前操作系统上的换行符。例如：<code></code></li><li><strong>os.sep</strong>：用于获取当前操作系统所使用的路径分隔符。例如：<code>\\</code></li><li><strong>os.rename(原文件名，新的文件名)</strong>：文件重命名</li><li><strong>os.remove(文件名)</strong>：删除文件</li></ul><p><strong>os 模块提供的与目录相关的函数：</strong></p><table><thead><tr><th style="text-align:center;">函数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>getcwd()</strong></td><td style="text-align:left;">返回当前的工作目录</td></tr><tr><td style="text-align:center;"><strong>listdir(path)</strong></td><td style="text-align:left;">返回指定路径下的文件和目录信息</td></tr><tr><td style="text-align:center;"><strong>mkdir(path[, mode])</strong></td><td style="text-align:left;">创建目录</td></tr><tr><td style="text-align:center;"><strong>makedirs(path1/path2...[, mode])</strong></td><td style="text-align:left;">创建多级目录</td></tr><tr><td style="text-align:center;"><strong>rmdir(path)</strong></td><td style="text-align:left;">删除目录</td></tr><tr><td style="text-align:center;"><strong>removedirs(path1/path2...)</strong></td><td style="text-align:left;">删除多级目录</td></tr><tr><td style="text-align:center;"><strong>chdir(path)</strong></td><td style="text-align:left;">把 path 设置为当前工作目录</td></tr><tr><td style="text-align:center;"><strong>walk(top[, topdown[, onerror]])</strong></td><td style="text-align:left;">遍历目录树，该方法返回一个元组，包括所有路径名、所有目录列表和文件列表 3 个元素</td></tr></tbody></table><p><strong>os.path 子模块提供的与目录相关的函数：</strong></p><table><thead><tr><th style="text-align:center;">函数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>abspath(path)</strong></td><td style="text-align:left;">用于获取文件或目录的绝对路径</td></tr><tr><td style="text-align:center;"><strong>exists(path)</strong></td><td style="text-align:left;">用于判断目录或文件是否存在，如果存在则返回 True，否则返回 False</td></tr><tr><td style="text-align:center;"><strong>join(path, name)</strong></td><td style="text-align:left;">将目录与目录或文件名拼接起来</td></tr><tr><td style="text-align:center;"><strong>splitext()</strong></td><td style="text-align:left;">分离文件名和扩展名</td></tr><tr><td style="text-align:center;"><strong>basename(path)</strong></td><td style="text-align:left;">从一个目录中提前文件名</td></tr><tr><td style="text-align:center;"><strong>dirname(path)</strong></td><td style="text-align:left;">从一个路径中提前文件路径，不包括文件名</td></tr><tr><td style="text-align:center;"><strong>isdir(path)</strong></td><td style="text-align:left;">用于判断是否为有效路径</td></tr></tbody></table><h3 id="路径" tabindex="-1"><a class="header-anchor" href="#路径" aria-hidden="true">#</a> 路径</h3><p>用于定位一个文件或者目录的字符串被称为一个路径。一般分为两种路径：<strong>相对路径</strong> 和 <strong>绝对路径。</strong></p><ul><li><p><strong>相对路径</strong></p><p>当前工作目录是指当前文件所在的目录，通过 <code>getcwd()</code> 函数获取当前工作目录。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os

<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：E:\\SourceCode\\Python\\PythonProject</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相对路径就是依赖于当前工作目录。在当前目录下有一个子目录 demo，并且在该子目录下保存文件 demo.txt，打开 demo.txt。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">r&quot;demo\\demo.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：Hello, World!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>绝对路径</strong></p><p>绝对路径指在使用文件时指定文件的实际路径，从根目录开始。通过 <code>abspath(path)</code> 函数获取文件的绝对路径。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os

<span class="token comment"># r&quot;demo\\demo.txt&quot; 表示要获取文件的相对路径</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">r&quot;demo\\demo.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果 </span>
E<span class="token punctuation">:</span>\\SourceCode\\Python\\PythonProject\\demo\\demo<span class="token punctuation">.</span>txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="拼接路径" tabindex="-1"><a class="header-anchor" href="#拼接路径" aria-hidden="true">#</a> 拼接路径</h3><p>将两个路径或者多个路径拼接到一起组成一个新的路径，通过 <code>join()</code> 函数实现。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os

<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">&quot;E:\\SourceCode\\Python\\PythonProject&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;demo\\demo.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">&quot;E:\\SourceCode\\Python\\PythonProject&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;demo\\demo.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;E:\\\\test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;demo.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
E<span class="token punctuation">:</span>\\SourceCode\\Python\\PythonProject\\demo\\demo<span class="token punctuation">.</span>txt
E<span class="token punctuation">:</span>\\test\\demo<span class="token punctuation">.</span>txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在拼接路径时，并不会检测路径是否真实存在</p><p>如果要拼接的路径中，没有一个绝对路径，那么最后拼接出来的是一个相对路径</p><p>如果要拼接的路径中，存在多个绝对路径，那么以从左到右为序最后一次出现的绝对路径为准，该路径之前的参数都将被忽略</p></div><h3 id="判断目录或文件是否存在" tabindex="-1"><a class="header-anchor" href="#判断目录或文件是否存在" aria-hidden="true">#</a> 判断目录或文件是否存在</h3><p>通过使用 <code>exists()</code> 函数判断目录或文件是否存在。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os

<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">&quot;E:/SourceCode/Python&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">&quot;E:/SourceCode/Python&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">&quot;E:/SourceCode/Python&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;目录不存在，创建成功&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;目录存在&quot;</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token boolean">True</span>
目录存在
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建目录" tabindex="-1"><a class="header-anchor" href="#创建目录" aria-hidden="true">#</a> 创建目录</h3><p>通过使用 <code>mkdir()</code> 函数创建一级目录。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os

os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">&quot;demo&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过使用 <code>makedirs()</code> 函数创建多级目录。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os

os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">&quot;demo/test/aaa&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除目录" tabindex="-1"><a class="header-anchor" href="#删除目录" aria-hidden="true">#</a> 删除目录</h3><p>通过使用 <code>rmdir()</code> 函数删除目录，只有当要删除的目录为空时才起作用。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os

os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span><span class="token string">&quot;demo/test/aaa&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过使用 <code>rmtree()</code> 函数删除目录，可以删除不是空目录。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os

os<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span><span class="token string">&quot;demo/test&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="遍历目录" tabindex="-1"><a class="header-anchor" href="#遍历目录" aria-hidden="true">#</a> 遍历目录</h3><p>通过使用 <code>walk()</code> 函数遍历目录。</p><p><strong>语法格式</strong>：<code>os.walk(top[, topdown[, onerror[, followlinks]]])</code></p><ul><li><strong>top</strong>：指定要遍历的根目录</li><li><strong>topdown</strong>：指定遍历的顺序。默认为 <code>True</code>，如果值为 <code>True</code> 表示自上而下遍历；如果值为 <code>False</code> 表示自下而上遍历</li><li><strong>onerror</strong>：指定错误处理方式。默认忽略</li><li><strong>followlinks</strong>：默认为 <code>False</code>，如果值为 <code>True</code> 表示指定在支持的系统上访问由符号链接指向的目录；如果值为 <code>False</code> 表示指定不支持由符号链接指向的目录</li></ul><p><code>os.walk</code> 函数返回 3 个元素（<code>dirpath</code>、<code>dirnames</code>、<code>filenames</code>）的元组生成器对象：</p><ul><li><strong>dirpath</strong>：表示当前遍历的路径，是一个字符串</li><li><strong>dirnames</strong>：表示当前路径下包含的子目录，是一个列表</li><li><strong>filenames</strong>：表示当前路径下包含的文件，是一个列表</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os

mytuples <span class="token operator">=</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token string">&quot;E:/SourceCode/Python/PythonProject&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> mytuple <span class="token keyword">in</span> mytuples<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>mytuple<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token punctuation">(</span><span class="token string">&#39;E:/SourceCode/Python/PythonProject\\\\settings&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;__pycache__&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;size.py&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;__init__.py&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>


path <span class="token operator">=</span> <span class="token string">&quot;E:/SourceCode/Python/PythonProject&quot;</span>

<span class="token keyword">for</span> root<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>path<span class="token punctuation">,</span> topdown<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> name <span class="token keyword">in</span> dirs<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;dir：&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> name <span class="token keyword">in</span> files<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;file：&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token builtin">dir</span>：E<span class="token punctuation">:</span><span class="token operator">/</span>SourceCode<span class="token operator">/</span>Python<span class="token operator">/</span>PythonProject\\settings
<span class="token builtin">dir</span><span class="token punctuation">:</span> E<span class="token punctuation">:</span><span class="token operator">/</span>SourceCode<span class="token operator">/</span>Python<span class="token operator">/</span>PythonProject\\settings\\__pycache__
<span class="token builtin">file</span><span class="token punctuation">:</span> E<span class="token punctuation">:</span><span class="token operator">/</span>SourceCode<span class="token operator">/</span>Python<span class="token operator">/</span>PythonProject\\settings\\size<span class="token punctuation">.</span>py
<span class="token builtin">file</span><span class="token punctuation">:</span> E<span class="token punctuation">:</span><span class="token operator">/</span>SourceCode<span class="token operator">/</span>Python<span class="token operator">/</span>PythonProject\\settings\\__init__<span class="token punctuation">.</span>py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="高级文件操作" tabindex="-1"><a class="header-anchor" href="#高级文件操作" aria-hidden="true">#</a> 高级文件操作</h2><p>os 模块提供的与文件相关的函数：</p><table><thead><tr><th style="text-align:center;">函数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>access(path, accessmode)</strong></td><td style="text-align:left;">获取对文件是否有指定的访问权限（读取、写入、执行），<code>accessmode</code> 的值是 <code>R_OK</code>（读取）、<code>W_OK</code>（写入）、<code>X_OK</code>（执行）或 <code>F_OK</code>（存在），如果有指定权限则返回 <code>1</code>，否则返回 <code>0</code></td></tr><tr><td style="text-align:center;"><strong>chmod(path, mode)</strong></td><td style="text-align:left;">修改 path 指定文件的访问权限</td></tr><tr><td style="text-align:center;"><strong>remove(path)</strong></td><td style="text-align:left;">删除 path 指定的文件路径</td></tr><tr><td style="text-align:center;"><strong>rename(src, dst)</strong></td><td style="text-align:left;">将文件或目录 src 重命名为 dst</td></tr><tr><td style="text-align:center;"><strong>stat(path)</strong></td><td style="text-align:left;">返回 path 指定的文件信息</td></tr><tr><td style="text-align:center;"><strong>startfile(path[, operation])</strong></td><td style="text-align:left;">使用关联的应用程序打开 path 指定的文件</td></tr></tbody></table><h3 id="删除文件" tabindex="-1"><a class="header-anchor" href="#删除文件" aria-hidden="true">#</a> 删除文件</h3><p>通过使用 <code>remove()</code> 函数删除文件，如果要删除的文件不存在会报错。</p><p><strong>语法格式</strong>：<code>os.remove(path)</code></p><ul><li><strong>path</strong>：为要删除的文件路径，可以是相对路径，也可以是绝对路径</li></ul><p>例如：删除当前工作目录下的 <code>test.txt</code> 文件。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os

os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="重命名文件或目录" tabindex="-1"><a class="header-anchor" href="#重命名文件或目录" aria-hidden="true">#</a> 重命名文件或目录</h3><p>通过使用 <code>rename()</code> 函数重命名文件或目录。</p><p><strong>语法格式</strong>：<code>os.rename(src, dst)</code></p><ul><li><strong>src</strong>：指定要进行重命名的文件或目录</li><li><strong>dst</strong>：指定重命名后的文件或目录</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os

src <span class="token operator">=</span> <span class="token string">&quot;test.txt&quot;</span>
dst <span class="token operator">=</span> <span class="token string">&quot;test01.txt&quot;</span>

<span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">:</span>
    os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;文件重命名成功！&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;文件重命名失败！&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>使用 <code>rename()</code> 函数重命名目录时，只能修改最后一级的目录名称，否则会报错</p></div><h3 id="获取文件基本信息" tabindex="-1"><a class="header-anchor" href="#获取文件基本信息" aria-hidden="true">#</a> 获取文件基本信息</h3><p>通过使用 <code>stat()</code> 函数可以获取文件的基本信息（文件的最后一次访问时间、最后一次修改时间、文件大小等）。</p><p><strong>语法格式</strong>：<code>os.stat(path)</code></p><ul><li><strong>path</strong>：要获取文件基本信息的路径，可以是相对路径，也可以是绝对路径</li></ul><p><code>os.stat()</code> 函数的返回值是一个对象，通过访问这些对象属性获取文件基本信息，对象属性如下：</p><table><thead><tr><th style="text-align:center;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>st_mode</strong></td><td style="text-align:left;">保护模式</td></tr><tr><td style="text-align:center;"><strong>st_dev</strong></td><td style="text-align:left;">设备名</td></tr><tr><td style="text-align:center;"><strong>st_ino</strong></td><td style="text-align:left;">索引号</td></tr><tr><td style="text-align:center;"><strong>st_uid</strong></td><td style="text-align:left;">用户 ID</td></tr><tr><td style="text-align:center;"><strong>st_nlink</strong></td><td style="text-align:left;">硬链接号（被链接数目）</td></tr><tr><td style="text-align:center;"><strong>st_gid</strong></td><td style="text-align:left;">组 ID</td></tr><tr><td style="text-align:center;"><strong>st_size</strong></td><td style="text-align:left;">文件大小，单位为字节</td></tr><tr><td style="text-align:center;"><strong>st_atime</strong></td><td style="text-align:left;">最后一次访问时间</td></tr><tr><td style="text-align:center;"><strong>st_mtime</strong></td><td style="text-align:left;">最后一次修改时间</td></tr><tr><td style="text-align:center;"><strong>st_ctime</strong></td><td style="text-align:left;">最后一次状态变化的时间</td></tr></tbody></table><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os

fileinfo <span class="token operator">=</span> os<span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;文件完整路径：&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;索引号：&quot;</span><span class="token punctuation">,</span> fileinfo<span class="token punctuation">.</span>st_ino<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;设备名：&quot;</span><span class="token punctuation">,</span> fileinfo<span class="token punctuation">.</span>st_dev<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;文件大小：&quot;</span><span class="token punctuation">,</span> fileinfo<span class="token punctuation">.</span>st_size<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;最后一次访问时间：&quot;</span><span class="token punctuation">,</span> fileinfo<span class="token punctuation">.</span>st_atime<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;最后一次修改时间：&quot;</span><span class="token punctuation">,</span> fileinfo<span class="token punctuation">.</span>st_mtime<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;最后一次状态变化时间：&quot;</span><span class="token punctuation">,</span> fileinfo<span class="token punctuation">.</span>st_ctime<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
文件完整路径： E<span class="token punctuation">:</span>\\SourceCode\\Python\\PythonProject\\test<span class="token punctuation">.</span>txt
索引号： <span class="token number">8725724278072824</span>
设备名： <span class="token number">48482355</span>
文件大小： <span class="token number">29</span>
最后一次访问时间： <span class="token number">1685673633.471428</span>
最后一次修改时间： <span class="token number">1685673156.536702</span>
最后一次状态变化时间： <span class="token number">1668585771.569891</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了让上面的显示更加直观，需要对数值进行格式化。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os


<span class="token keyword">def</span> <span class="token function">formattime</span><span class="token punctuation">(</span>longtime<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    功能：格式化日期时间
    :param longtime: 要格式化的时间
    :return:
    &quot;&quot;&quot;</span>
    <span class="token keyword">import</span> time

    <span class="token keyword">return</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%Y-%m-%d %H:%M:%S&#39;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>longtime<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">formatbyte</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    功能：格式化文件大小
    :param number: 要格式化的字节数
    :return:
    &quot;&quot;&quot;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>scale<span class="token punctuation">,</span> label<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;GB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;GB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token string">&#39;GB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token comment"># 文件大小大于或等于 1 KB</span>
        <span class="token keyword">if</span> number <span class="token operator">&gt;=</span> scale<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&quot;%.2f %s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>number <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> scale<span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token punctuation">)</span>
        <span class="token comment"># 文件大小为 1 字节</span>
        <span class="token keyword">elif</span> number <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&quot;1 字节&quot;</span>
        <span class="token comment"># 文件大小小于 1 KB</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            byte <span class="token operator">=</span> <span class="token string">&quot;%.2f&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>number <span class="token keyword">or</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token comment"># 去掉结尾的 .00 并且加上单位 “字节”</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>byte<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">if</span> byte<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;.00&#39;</span><span class="token punctuation">)</span> <span class="token keyword">else</span> byte<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 字节&quot;</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    fileinfo <span class="token operator">=</span> os<span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;文件完整路径：&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;索引号：&quot;</span><span class="token punctuation">,</span> fileinfo<span class="token punctuation">.</span>st_ino<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;设备名：&quot;</span><span class="token punctuation">,</span> fileinfo<span class="token punctuation">.</span>st_dev<span class="token punctuation">)</span> 
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;文件大小：&quot;</span><span class="token punctuation">,</span> formatbyte<span class="token punctuation">(</span>fileinfo<span class="token punctuation">.</span>st_size<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;最后一次访问时间：&quot;</span><span class="token punctuation">,</span> formattime<span class="token punctuation">(</span>fileinfo<span class="token punctuation">.</span>st_atime<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;最后一次修改时间：&quot;</span><span class="token punctuation">,</span> formattime<span class="token punctuation">(</span>fileinfo<span class="token punctuation">.</span>st_mtime<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;最后一次状态变化时间：&quot;</span><span class="token punctuation">,</span> formattime<span class="token punctuation">(</span>fileinfo<span class="token punctuation">.</span>st_ctime<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
文件完整路径： E<span class="token punctuation">:</span>\\SourceCode\\Python\\PythonProject\\test<span class="token punctuation">.</span>txt
索引号： <span class="token number">8725724278072824</span>
设备名： <span class="token number">48482355</span>
文件大小： <span class="token number">29</span> 字节
最后一次访问时间： <span class="token number">2023</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">40</span><span class="token punctuation">:</span><span class="token number">33</span>
最后一次修改时间： <span class="token number">2023</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">:</span><span class="token number">36</span>
最后一次状态变化时间： <span class="token number">2022</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">16</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">51</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,137),p=[o];function i(l,c){return s(),a("div",null,p)}const u=n(e,[["render",i],["__file","file_directory.html.vue"]]);export{u as default};
