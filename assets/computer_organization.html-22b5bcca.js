import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as o,f as t}from"./app-7cf85c05.js";const r="/assets/main_memory-7ab0810e.png",i="/assets/model-2baa179f.png",e="/assets/hierarchical_structure-736590f8.png",l="/assets/executive_process-c50f18a8.png",g="/assets/source_process-ca4b3a41.png",d="/assets/fixed_point_decimal-b844dea5.png",p="/assets/fixed_point_integer-b6493659.png",c="/assets/original_decimal-777cf6eb.png",a="/assets/original_integer-21fdcd63.png",u="/assets/complement_decimal-8192a109.png",b="/assets/complement_integer-45105f1f.png",h={},x=t('<h2 id="计算机系统概述" tabindex="-1"><a class="header-anchor" href="#计算机系统概述" aria-hidden="true">#</a> 计算机系统概述</h2><h3 id="发展历程" tabindex="-1"><a class="header-anchor" href="#发展历程" aria-hidden="true">#</a> 发展历程</h3><h4 id="硬件的发展" tabindex="-1"><a class="header-anchor" href="#硬件的发展" aria-hidden="true">#</a> 硬件的发展</h4><ul><li><p><strong>计算机的四代变化</strong></p><ol><li><p><strong>第一代（1946-1975）——电子管时代</strong></p><p>逻辑元件采用 <strong>电子管</strong>；使用 <strong>机器语言</strong> 进行编程；主存用 <strong>延迟线或磁鼓</strong> 存储信息，容量极小；体积庞大，成本高；运算速度较低，一般只有 <strong>几千次到几万次</strong> 每秒。</p></li><li><p><strong>第二代（1958-1964）——晶体管时代</strong></p><p>逻辑元件采用 <strong>晶体管</strong>；运算速度提高到 <strong>几万次到几十万次</strong> 每秒；主存用 <strong>磁芯存储器</strong>；计算机软件得到发展，开始出现高级语言及其编译程序，<strong>操作系统</strong> 有了雏形。</p></li><li><p><strong>第三代（1965-1971）——中小规模集成电路时代</strong></p><p>逻辑元件采用 <strong>中小规模集成电路</strong>；主存用 <strong>半导体</strong> 取代磁芯存储器；<strong>高级语言</strong> 迅速发展，<strong>操作系统</strong> 也进一步发展，出现 <strong>分时操作系统。</strong></p></li><li><p><strong>第四代（1972-至今）——超大规模集成电路时代</strong></p><p>逻辑元件采用 <strong>超大规模集成电路</strong>，产生了 <strong>微处理器</strong>；如：<strong>并行</strong>、<strong>流水线</strong>、<strong>高速缓存</strong> 和 <strong>虚拟存储器</strong> 等概念用在计算机中。</p></li></ol></li><li><p><strong>计算机元件的更新</strong></p><ol><li><p><strong>摩尔定律</strong></p><p>当价格不变，集成电路上的晶体管数目，约每过 18 月会增加一倍。同样的价格 18 月后集成电路是 18 月前集成电路性能的一倍</p></li><li><p><strong>半导体存储器</strong></p><p>1970 年仙童半导体公司生产的单芯片：1KB、4KB、16KB、64KB、256KB、1MB、4MB、16MB、64MB、256MB、1GB</p></li><li><p><strong>微处理器</strong></p><p>1971 年 Intel 公司产生的微处理器：Intel 4004、Intel 8008（8 位）、Intel 8086（16 位）、Intel 80386（32 位）、Pentium（32 位）、Pentium III（64 位）、Pentium 4（64 位）、Core i7（64 位）等。<strong>32 位和 64 位是指计算机进行一次整数运算所能处理的二进制数据的位数。</strong></p></li></ol></li></ul><h4 id="软件的发展" tabindex="-1"><a class="header-anchor" href="#软件的发展" aria-hidden="true">#</a> 软件的发展</h4><p>计算机语言的发展经历了面向机器的 <strong>机器语言</strong> 和 <strong>汇编语言</strong>、面向问题的 <strong>高级语言</strong>。其中高级语言的发展真正促进了软件的发展，它经历了从科学计算和工程计算的 FORTRAN、结构化程序设计的 PASCAL 到面向对象的 C++ 和适应网络环境的 Java。</p><p>与此同时，直接影响计算机系统性能提升的各种 <strong>系统软件</strong> 也有了长足的发展，特别是 <strong>操作系统</strong>。如：Windows、UNIX、Linux 等。</p><h3 id="计算机系统层次结构" tabindex="-1"><a class="header-anchor" href="#计算机系统层次结构" aria-hidden="true">#</a> 计算机系统层次结构</h3><h4 id="系统的组成" tabindex="-1"><a class="header-anchor" href="#系统的组成" aria-hidden="true">#</a> 系统的组成</h4><p><strong>硬件系统</strong> 和 <strong>软件系统</strong> 共同构成了一个完整的计算机系统。</p><ul><li><strong>硬件</strong>：是指有形的 <strong>物理设备</strong>，是计算机系统中实际物理装置的总称</li><li><strong>软件</strong>：是指在硬件上 <strong>运行的程序</strong> 和 <strong>相关的数据及文档</strong></li></ul><h4 id="硬件" tabindex="-1"><a class="header-anchor" href="#硬件" aria-hidden="true">#</a> 硬件</h4><ol><li><p><strong>冯·诺依曼基本思想</strong></p><p>冯·诺依曼在研究 EDVAC（Electronic Discrete Variable Automatic Computer）离散变量自动电子计算机时提出了 <strong>存储程序</strong> 的概念，存储程序的思想奠定了现代计算机的基本结构，以此概念为基础的各类计算机通称为 <strong>冯·诺依曼机</strong>，其特点如下：</p><ul><li>采用 <strong>存储程序</strong> 的工作方式</li><li>计算机硬件系统由 <strong>运算器</strong>、<strong>存储器</strong>、<strong>控制器</strong>、<strong>输入设备</strong> 和 <strong>输出设备</strong> 五大部件组成</li><li><strong>指令</strong> 和 <strong>数据</strong> 以同等地位存储在存储器中，形式上没有区别，但计算机应能区分它们</li><li>指令和数据均用二进制代码表示。指令由 <strong>操作码</strong> 和 <strong>地址码</strong> 组成，操作码指出操作的类型，地址码指出操作数的地址</li></ul><p><strong>存储程序</strong> 的基本思想：将事先编制好的程序和原始数据送入主存后才能执行，一旦程序被启动执行，就无须操作人员的干预，计算机会自动逐条执行指令，直至程序执行结束。</p></li><li><p><strong>计算机的功能部件</strong></p><ul><li><p><strong>输入设备</strong>：主要功能是将程序和数据 <strong>以机器所能识别的信息形式</strong> 输入计算机。最基本的输入设备是键盘，此外还有鼠标、扫描仪、摄像机等</p></li><li><p><strong>输出设备</strong>：主要功能是将计算机处理的结果 <strong>以人们所能接受的形式或其他系统所要求的信息形式</strong> 输出。最基本的输出设备是显示器、打印机等</p></li><li><p><strong>存储器</strong>：存储器分为 <strong>主存储器（内存储器）</strong> 和 <strong>辅助存储器（外存储器）</strong>。CPU 能够直接访问的存储器是主存储器，辅助存储器用于帮助主存储器记忆更多的信息，辅助存储器中的信息必须调入主存后，才能为 CPU 访问</p><p>主存储器的工作方式是按存储单元的地址进行存取，这种存取方式称为 <strong>按地址存取方式。</strong></p><figure><img src="'+r+'" alt="主存储逻辑图" tabindex="0" loading="lazy"><figcaption>主存储逻辑图</figcaption></figure><p>上图为主存储器基本组成。信息如下：</p><ul><li><strong>存储体</strong>：存放二进制信息</li><li><strong>地址寄存器（MAR）</strong>：存放访存地址，经过地址译码后找到所选的存储单元</li><li><strong>数据寄存器（MDR）</strong>：用于暂存要从存储器中读或写的信息</li><li><strong>时序控制逻辑</strong>：用于产生存储器操作所需的各种时序信号</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>MAR 和 MDR 虽然是存储器的一部分，但在现代计算机中却是存在于 CPU 中</p></div></li><li><p><strong>运算器</strong>：是计算机的执行部件，用于进行 <strong>算术运算</strong> 和 <strong>逻辑运算</strong>。算术运算是按算术运算规则进行的运算，如：加、减、乘、除；逻辑运算包括与、或、非、异或、比较、移位等运算</p></li><li><p><strong>控制器</strong>：是计算机的指挥中心，由其 <strong>指挥各部件自动协调</strong> 地进行工作。控制器由程序计数器（PC）、指令寄存器（IR）和控制单元（CU）组成</p><ul><li><strong>程序计数器（PC）</strong>：用来 <strong>存放当前要执行指令的地址</strong>，具体自动加 <code>1</code> 的功能（这里的 <code>1</code> 指一条指令的长度），即可自动形成下一条指令的地址，它与主存的 <code>MAR</code> 之间有一条直接通路</li><li><strong>指令寄存器（IR）</strong>：用来 <strong>存放当前的指令</strong>，其内容来自主存的 <code>MDR</code>。指令中的操作码OP(IR) 送至 <strong>控制单元（CU）</strong>，用以分析指令并发出各种微操作命令序列；而地址码Ad(IR) 送往 <code>MAR</code>，用以取操作数</li></ul></li></ul><p>输入/输出设备（简称 <code>I/O</code> 设备）是计算机与外界联系的桥梁，是计算机中不可缺少的重要组成部分。</p><p>一般将运算器和控制器集成到同一个芯片上，称为 <strong>中央处理器（CPU）</strong>。CPU 和主存储器共同构成主机，而除主机外的其他硬件装置（外存、I/O设备等）统称为 <strong>外部设备</strong>，简称外设。</p><figure><img src="'+i+'" alt="冯·诺依曼结构的模型机" tabindex="0" loading="lazy"><figcaption>冯·诺依曼结构的模型机</figcaption></figure><p>上图所示为冯·诺依曼结构的模型机。CPU 包含：ALU、通用寄存器组 GPRs、标志寄存器、控制器、指令寄存器IR、程序计数器PC、存储器地址寄存器MAR 和存储器数据寄存器MDR。图中从控制器送出的虚线就是 <strong>控制信号</strong>，可以控制如何 <strong>修改程序计数器PC</strong> 以得到下一条指令的地址，可以控制 <strong>ALU</strong> 执行什么运算，可以控制 <strong>主存</strong> 是进行读操作还是写操作（读/写控制信号）。</p><p>CPU 和主存之间通过一组 <strong>总线</strong> 相连，总线中有 <strong>地址</strong>、<strong>控制</strong> 和 <strong>数据</strong> 三组信号线。<code>MAR</code> 中的 <strong>地址信息</strong> 会直接送到地址线上，用于指向读/写操作的主存存储单元；控制线中有 <strong>读/写信号线</strong>，指出数据是从 CPU 写入主存还是从主存读出到 CPU，根据是读操作还是写操作来控制将 <code>MDR</code> 中的 <strong>数据</strong> 是直接送到数据线上还是将数据线上的数据接收到 <code>MDR</code> 中。</p></li></ol><h4 id="软件" tabindex="-1"><a class="header-anchor" href="#软件" aria-hidden="true">#</a> 软件</h4><ol><li><p><strong>系统软件和应用软件</strong></p><p>软件按其功能分类，可分为 <strong>系统软件</strong> 和 <strong>应用软件。</strong></p><ul><li><p><strong>系统软件</strong>：是一组 <strong>保证计算机系统高效、正确运行的基础软</strong>件，通常作为系统资源提供给用户使用。主要有操作系统（OS）、数据库管理系统（DBMS）、语言处理程序、分布式软件系统、网络软件系统、标准库程序、服务性程序等</p></li><li><p><strong>应用软件</strong>：是指用户 <strong>为解决某个应用领域中的各类问题</strong> 而编制的程序。如：各种科学计算类程序、工程设计类程序、数据统计与处理程序等</p></li></ul></li><li><p><strong>三个级别的语言</strong></p><ul><li><strong>机器语言</strong>：又称 <strong>二进制代码语言</strong>，需要编程人员记忆每条指令的二进制编码。机器语言 <strong>是计算机唯一可以直接识别和执行的语言</strong></li><li><strong>汇编语言</strong>：汇编语言 <strong>用英文单词或其缩写代替二进制的指令代码</strong>，更容易为人们记忆和理解。使用汇编语言编辑的程序，必须经过一个称为汇编程序的系统软件的翻译，将其转换为机器语言程序后，才能在计算机的硬件系统上执行</li><li><strong>高级语言</strong>：如：C、C++、Java 等，是为 <strong>方便程序设计人员写出解决问题的处理方案和解题过程的程序</strong>。通常高级语言需要经过编译程序编译成汇编语言程序，然后经过汇编操作得到机器语言程序，或直接由高级语言程序翻译成机器语言程序</li></ul><p>由于计算机无法直接理解和执行高级语言程序，需要将高级语言程序转换为机器语言程序，通常把进行这种转换的软件系统称为翻译程序。<strong>翻译程序有以下三类：</strong></p><ul><li><strong>汇编程序（汇编器）</strong>：将汇编语言程序翻译成机器语言程序</li><li><strong>解释程序（解释器）</strong>：将源程序中的语句按执行顺序逐条翻译成机器指令并立即执行</li><li><strong>编译程序（编译器）</strong>：将高级语言程序翻译成汇编语言或机器语言程序</li></ul></li><li><p><strong>软件和硬件的逻辑功能等价性</strong></p><p>硬件实现的往往是最基本的算术和逻辑运算功能，而其他功能大多通过软件的扩充得以实现。对某一功能来说，既可以由硬件实现，又可以由软件实现，从用户的角度来看，它们在功能上是等价的。这一等价性被称为 <strong>软、硬件逻辑功能的等价性。</strong></p><p>例如：浮点数运算既可以用专门的浮点运算器硬件实现，又可以通过一段子程序实现，这两种方法在功能上完全等效，不同的只是执行时间的长短而已，显然硬件实现的性能要优于软件实现的性能。</p></li></ol><h4 id="层次结构" tabindex="-1"><a class="header-anchor" href="#层次结构" aria-hidden="true">#</a> 层次结构</h4><p>计算机是一个硬软件组成的综合体。由于面对的应用范围越来越广，必须有复杂的系统软件和硬件支持。</p><p>计算机系统的 <strong>多级层次结构的作用</strong>：根据使用者对计算机系统属性的要求不同，来分清彼此之间的界面，明确各自的功能，以便构成合理、高效的计算机系统。</p><figure><img src="'+e+'" alt="层次结构" tabindex="0" loading="lazy"><figcaption>层次结构</figcaption></figure><ul><li><strong>微程序机器M0（微指令系统）</strong>：是一个实在的硬件层，它由机器硬件直接执行微指令</li><li><strong>传统机器M1（机器语言机器）</strong>：是一个实在的硬件层，由微程序解释机器指令系统</li><li><strong>虚拟机器M2（操作系统机器）</strong>：由操作系统程序实现。操作系统程序是由 <strong>机器指令</strong> 和 <strong>广义指令</strong> 组成的，这些广义指令是为了扩展机器功能而设置的，是由操作系统定义和解释的软件指令</li><li><strong>虚拟机器M3（汇编语言机器）</strong>：为用户 <strong>提供一种符号化的语言</strong>，借此可编写汇编语言源程序。这一层由汇编程序支持和执行</li><li><strong>虚拟机器M4（高级语言机器）</strong>：是面向用户的，是为 <strong>方便用户编写应用程序</strong> 而设置的。该层由各种高级语言编译程序支持和执行</li><li><strong>虚拟机器M5（应用程序机器）</strong>：由 <strong>解决实际问题的处理程序</strong> 组成。如：文字处理软件、多媒体处理软件和办公自动软件等</li></ul><p><strong>M0-M1</strong> 没有配备软件的纯硬件系统称为裸机。<strong>M2-M5</strong> 称为虚拟机，简单来说就是软件实现的机器。每层只能通过该层的语言来了解和使用计算机，而不必关心下层是如何工作的。层次之间的关系紧密，下层是上层的基础，上层是下层的扩展。</p><p><strong>软件和硬件之间的交界面</strong>：就是指令集体系结构（ISA），ISA 定义了一台计算机可以执行的所有指令的集合，每条指令规定了计算机执行什么操作，以及所处理的操作数存放的地址空间和操作数类型。</p><h4 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h4><ol><li><p><strong>存储程序工作方式</strong></p><figure><img src="'+l+'" alt="程序执行过程" tabindex="0" loading="lazy"><figcaption>程序执行过程</figcaption></figure><p>一个程序的执行就是周而复始地执行一条一条指令的过程。每条指令的执行过程包括：<strong>从主存取指令、对指令进行译码、计算下条指令地址、取操作数并执行、将结果送回存储器。</strong></p><p><strong>存储程序”工作方式规定</strong>：程序执行前，先将程序第一条指令的地址存放到程序计数器（PC） 中，取指令时，将 PC 的内容作为地址访问主存。在每条指令执行过程中，都需要计算下条将执行指令的地址，并送至 PC。若当前指令为顺序型指令，则下条指令地址为 PC 的内容加上当前指令的长度；若当前指令为转跳型指令，则下条指令地址为指令中指定的目标地址。当前指令执行完后，根据 PC 的值到主存中取出的是下条将要执行的指令，因而计算机能周而复始地自动取出并执行一条一条的指令。</p></li><li><p><strong>从源程序到可执行文件</strong></p><p>在计算机中编写的 C 语言程序，都必须被转换为一系列的低级机器指令，这些指令按照一种称为可执行目标文件的格式打好包，并以二进制磁盘文件的形式存放起来。</p><figure><img src="'+g+`" alt="源程序转换为可执行文件过程" tabindex="0" loading="lazy"><figcaption>源程序转换为可执行文件过程</figcaption></figure><p>以 UNIX 系统中的 GCC 编译器程序为例，读取源程序文件 <code>hello.c</code>，并把它翻译成一个可执行目标文件 <code>hello</code>，整个翻译过程可分为 <strong>四个阶段</strong> 完成：</p><ul><li><strong>预处理阶段</strong>：预处理器（cpp）对源程序中以字符 <code>#</code> 开头的命令进行处理。例如：将 <code>#include</code> 命令后面的 <code>.h</code> 文件内容插入程序文件。输出结果是一个以 <code>.i</code> 为扩展名的源文件 <code>hello.i</code></li><li><strong>编译阶段</strong>：编译器（ccl）对预处理后的源程序进行编译，生成一个汇编语言源程序 <code>hello.s</code>。汇编语言源程序中的每条语句都以一种文本格式描述了一条低级机器语言指令</li><li><strong>汇编阶段</strong>：汇编器（as）将 <code>hello.s</code> 翻译成机器语言指令，把这些指令打包成一个称为可重定位目标文件的<code> hello.o</code>，它是一种二进制文件，因此用文本编辑器打开会显示乱码</li><li><strong>链接阶段</strong>：链接器（ld）将多个可重定位目标文件和标准库函数合并为一个可执行目标文件，或简称可执行文件。本例中，链接器将 <code>hello.o</code> 和标准库函数 <code>printf</code> 所在的可重定位目标模块 <code>printf.o</code> 合并，生成可执行文件 <code>hello</code>。最终生成的可执行文件被保存在磁盘上</li></ul></li><li><p><strong>程序执行过程描述</strong></p><p>在图形化界面的操作系统中，可以采用双击图标的方式来执行程序。在 UNIX 系统中，可以通过 shell 命令行解释器来执行程序。通过 shell 命令行解释器执行程序的过程如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>unix<span class="token operator">&gt;</span> ./hello
hello, world<span class="token operator">!</span>
unix<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<strong>unix&gt;</strong> 是命令提示符，<strong>./</strong> 表示当前目录，<strong>hello</strong> 是可执行文件的路径名。输入命令后需按下 <kbd>Enter</kbd> 键才会执行，第二行是执行结果。</p><ul><li>shell 程序将用户从键盘输入的每个字符逐一读入 <strong>CPU 寄存器</strong>，然后保存到 <strong>主存储器中（主存）</strong></li><li>在主存的 <strong>缓冲区形成字符串</strong> <code>./hello</code></li><li>接收到 <kbd>Enter</kbd> 键时，shell 调出操作系统的内核程序，由 <strong>内核来加载磁盘</strong> 上的可执行文件 <code>hello</code> 到主存中</li><li>内核加载完可执行文件中的代码和数据（这里是字符串 <code>hello, world!\\n</code>）后，将 <code>hello</code> 的第一条指令的地址送至 PC，CPU 随后开始执行 <code>hello</code> 程序，它将已加载到主存的字符串 <code>hello, world!\\n</code> 中的每个字符 <strong>从主存中送到 CPU 的寄存器中</strong></li><li>然后将 CPU 寄存器中的字符 <strong>送到显示器</strong></li></ul></li><li><p><strong>指令执行过程描述</strong></p><p>可执行文件代码段是由一条一条机器指令构成的，指令是用 <code>0</code> 和 <code>1</code> 表示的一串 <code>0/1</code> 序列，用来指示 CPU 完成一个特定的原子操作。</p><p>以取数指令（送至运算器的 ACC 中）为例，<strong>其信息流程如下：</strong></p><ul><li><p><strong>取指令：PC→MAR→M→MDR→IR</strong></p><p>将 PC 的内容送 MAR，MAR 中的内容直接送地址线，同时控制器将读信号送读/写信号线，主存根据地址线上的地址和读信号，从指定存储单元读出指令，送到数据线上，MDR 从数据线接收指令信息，并传送到 IR 中。</p></li><li><p><strong>分析指令：OP(IR)→CU</strong></p><p>指令译码并送出控制信号。控制器根据 IR 中指令的操作码，生成相应的控制信号，送到不同的执行部件。在本例中，IR 中是取数指令，因此读控制信号被送到总线的控制线上。</p></li><li><p><strong>执行指令：Ad(IR)→MAR→M→MDR→ACC</strong></p><p>取数操作。将 IR 中指令的地址码送 MAR，MAR 中的内容送地址线，同时控制器将读信号送读/写信号线，从主存中读出操作数，并通过数据线送至 MDR，再传送到 ACC 中。</p><p>每取完一条指令，还须为取下条指令做准备，计算下条指令的地址，即 <code>(PC)+1→PC</code>。</p></li></ul></li></ol><h3 id="性能指标" tabindex="-1"><a class="header-anchor" href="#性能指标" aria-hidden="true">#</a> 性能指标</h3><h4 id="主要性能指标" tabindex="-1"><a class="header-anchor" href="#主要性能指标" aria-hidden="true">#</a> 主要性能指标</h4><ol><li><p><strong>字长</strong></p><p>计算机进行一次整数运算（即定点整数运算）所能 <strong>处理的二进制数据的位数</strong>，通常与 CPU 的寄存器位数、加法器有关。</p></li><li><p><strong>数据通路带宽</strong></p><p>外部数据总线一次所能 <strong>并行传送信息的位数。</strong></p></li><li><p><strong>主存容量</strong></p><p>主存储器所能 <strong>存储信息的最大容量</strong>，通常以字节来衡量，也可用 <strong>字数 x 字长</strong>（如：512K x 16位）来表示存储容量。其中 MAR 的位数代表存储单元的个数；MDR 的位数代表存储单元的字长。</p></li><li><p><strong>运算速度</strong></p><ul><li><p><strong>吞吐量和响应时间</strong></p><ul><li><strong>吞吐量</strong>：指系统在单位时间内处理请求的数量</li><li><strong>响应时间</strong>：指从用户向计算机发送一个请求到系统对该请求做出响应并获得所需结果的等待时间</li></ul></li><li><p><strong>主频和 CPU 时钟周期</strong></p><ul><li><strong>主频</strong>：CPU 时钟频率。机器内部主时钟的频率是衡量机器速度的重要参数。主频通常以 Hz（赫兹）为单位，1Hz 表示每秒一次</li><li><strong>CPU 时钟周期</strong>：通常为节拍脉冲或 T 周期，即主频的倒数，是 CPU 中最小的时间单位，执行指令的每个动作至少需要一个时钟周期</li></ul></li><li><p><strong>CPI（Cycle Per Instruction）</strong>：执行一条指令所需的时钟周期数</p></li><li><p><strong>CPU 执行时间</strong>：执行一个程序所花费的时间。CPU 执行时间 = CPU 时钟周期数/主频 = （指令条数 x CPI）/主频</p></li><li><p><strong>MIPS（Million Instructions Per Second）</strong>：每秒执行多少百万条指令。MIPS = 指令条数/（执行时间 x 10<sup>6</sup>）= 主频/（CPU x 10<sup>6</sup>）</p></li><li><p><strong>MFLOPS、GFLOPS、TFLOPS、PFLOPS、EFLOPS 和 ZFLOPS</strong></p><ul><li><strong>MFLOPS（Million Floating-point Operations Per Second）</strong>：每秒执行多少百万次浮点运算。MFLOPS = 浮点操作次数/（执行时间 x 10<sup>6</sup>）</li><li><strong>GFLOPS（Giga Floating-point Operations Per Second）</strong>：每秒执行多少十亿次浮点运算。GFLOPS = 浮点操作次数/（执行时间 x 10<sup>9</sup>）</li><li><strong>TFLOPS（Tera Floating-point Operations Per Second）</strong>：每秒执行多少万亿次浮点运算。TFLOPS = 浮点操作次数/（执行时间 x 10<sup>12</sup>）</li><li><strong>PFLOPS</strong> = 浮点操作次数/（执行时间 x 10<sup>15</sup>）</li><li><strong>EFLOPS</strong> = 浮点操作次数/（执行时间 x 10<sup>18</sup>）</li><li><strong>ZFLOPS</strong> = 浮点操作次数/（执行时间 x 10<sup>21</sup>）</li></ul></li></ul></li><li><p><strong>基准程序</strong></p><p>用来 <strong>进行性能评价</strong> 的一组程序，能很好的反映机器在运行实际负载时的性能。</p></li></ol><h4 id="专业术语" tabindex="-1"><a class="header-anchor" href="#专业术语" aria-hidden="true">#</a> 专业术语</h4><ol><li><p><strong>系列机</strong></p><p>具有 <strong>基本相同的体系结构</strong>，使用相同基本指令系统的多个不同型号的计算机组成的一个产品系列。</p></li><li><p><strong>兼容</strong></p><p>指软件或硬件的通用性，即 <strong>运行在某个型号的计算机系统中的硬件/软件也能应用于另一个型号的计算机系统</strong> 时，称这两台计算机在硬件或软件上存在兼容性。</p></li><li><p><strong>软件可移植性</strong></p><p>指把使用在某个系列计算机中的软件直接或进行很少的修改就能运行在另一个系列计算机中的可能性。</p></li><li><p><strong>固件</strong></p><p>将 <strong>程序固化在 ROM 中组成的部件</strong> 称为固件。固件是一种具有软件特性的硬件，吸收了软/硬件各自的优点，其执行速度快于软件，灵活性优于硬件，是软/硬件结合的产物。例如：目前操作系统已实现了部分固化（把软件永恒地存储于 ROM 中）。</p></li></ol><h2 id="数据的表示和运算" tabindex="-1"><a class="header-anchor" href="#数据的表示和运算" aria-hidden="true">#</a> 数据的表示和运算</h2><h3 id="数制与编码" tabindex="-1"><a class="header-anchor" href="#数制与编码" aria-hidden="true">#</a> 数制与编码</h3><h4 id="进位计数制及其相互转换" tabindex="-1"><a class="header-anchor" href="#进位计数制及其相互转换" aria-hidden="true">#</a> 进位计数制及其相互转换</h4><p>在计算机系统内部，所有的信息都是用 <strong>二进制进行编码</strong> 的，这样做的原因有以下几点：</p><ul><li>二进制只有两种状态，使用有两个稳定状态的物理器件就可以表示二进制数的每一位，制造成本比较低，例如用高低电平或电荷的正负极性都可以很方便地表示 <code>0</code> 和 <code>1</code></li><li>二进制位 <code>1</code> 和 <code>0</code> 正好与逻辑值 “真” 和 “假” 对应，为计算机实现逻辑运算和程序中的逻辑判断提供了便利条件</li><li>二进制的编码和运算规则都简单，通过逻辑门电路能方便地实现算术运算</li></ul><ol><li><p><strong>进位计数法</strong></p><p>在进位计数法中，每个数位所用到的不同数码的个数称为 <strong>基数。</strong></p><p>每个数码所表示的数值等于该数码本身乘以一个与它所在数位有关的常数，这个常数称为 <strong>位权</strong>。位权最低位为 <code>0</code>。</p><ul><li><strong>二进制</strong>：基数为 <code>2</code>。只有 <code>0</code> 和 <code>1</code> 两种数字符号，计数 <strong>逢二进一</strong></li><li><strong>八进制</strong>：基数为 <code>8</code>。有 <code>0~7</code> 共八个不同的数字符号，计数 <strong>逢八进一</strong></li><li><strong>十进制</strong>：基数为 <code>10</code>。有 <code>0~9</code> 共十个不同的数字符号，计数 <strong>逢十进一</strong></li><li><strong>十六进制</strong>：基数为 <code>16</code>。有 <code>0~9、A、B、C、D、E、F</code> 共八个不同的数字符号，计数 <strong>逢十六进一</strong>。<code>A、B、C、D、E、F</code> 分别表示 <code>10~15</code></li></ul></li><li><p><strong>不同进制数之间相互转换</strong></p><ul><li><p><strong>二进制转八进制和十六进制</strong></p><p>二进制混合数（整数部分，小数部分），在转换时应以小数点为界。<strong>整数部分</strong>，从小数点开始往左数，将二进制数分为 <code>3</code> 位（八进制）或 <code>4</code> 位（十六进制）一组，最左边根据需要加 <code>0</code> 补齐；<strong>小数部分</strong>，从小数点开始往右数，将二进制数分为 <code>3</code> 位（八进制）或 <code>4</code> 位（十六进制）一组，最右边根据需要加 <code>0</code> 补齐。最终使总的位数为 <code>3</code> 或 <code>4</code> 的整数倍，分别用对应的八进制或十六进制取代。</p><p>例如：二进制数 <code>1111000010.01101</code> 分别转换为八进制和十六进制。</p><p>八进制：(1111000010.01101)<sub>2</sub> = (1702.32)<sub>8</sub></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>        001     111     000     010     .     011     010
       ╰┈┬┈╯                          ╰┈┬┈╯          ╰┈┬┈╯
（高位补 0，凑足 3 位）               （分界点） （低位补 0，凑足 3 位）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">每组二进制到八进制转换过程</p><ul><li>001 = 0x2<sup>2</sup> + 0x2<sup>1</sup> + 1x2<sup>0</sup> = 0 + 0 + 1 = 1</li><li>111 = 1x2<sup>2</sup> + 1x2<sup>1</sup> + 1x2<sup>0</sup> = 4 + 2 + 1 = 7</li><li>000 = 0x2<sup>2</sup> + 0x2<sup>1</sup> + 0x2<sup>0</sup> = 0 + 0 + 0 = 0</li><li>010 = 0x2<sup>2</sup> + 1x2<sup>1</sup> + 0x2<sup>0</sup> = 0 + 2 + 0 = 2</li><li>011 = 0x2<sup>2</sup> + 1x2<sup>1</sup> + 1x2<sup>0</sup> = 0 + 2 + 1 = 3</li><li>010 = 0x2<sup>2</sup> + 1x2<sup>1</sup> + 0x2<sup>0</sup> = 0 + 2 + 0 = 2</li></ul></div><p>十六进制：(1111000010.01101)<sub>2</sub> = (3C2.68)<sub>16</sub></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>        0011     1100     0010     .     0110      1000
       ╰┈┬┈╯                     ╰┈┬┈╯            ╰┈┬┈╯
（高位补 0，凑足 4 位）          （分界点）  （低位补 0，凑足 4 位）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">每组二进制到十六进制转换过程</p><ul><li>0011 = 0x2<sup>3</sup> + 0x2<sup>2</sup> + 1x2<sup>1</sup> + 1x2<sup>0</sup> = 0 + 0 + 2 + 1 = 3</li><li>1100 = 1x2<sup>3</sup> + 1x2<sup>2</sup> + 0x2<sup>1</sup> + 0x2<sup>0</sup> = 8 + 4 + 0 + 0 = 12 = C</li><li>0010 = 0x2<sup>3</sup> + 0x2<sup>2</sup> + 1x2<sup>1</sup> + 0x2<sup>0</sup> = 0 + 0 + 2 + 0 = 2</li><li>0110 = 0x2<sup>3</sup> + 1x2<sup>2</sup> + 1x2<sup>1</sup> + 0x2<sup>0</sup> = 0 + 4 + 2 + 0 = 6</li><li>1000 = 1x2<sup>3</sup> + 0x2<sup>2</sup> + 0x2<sup>1</sup> + 0x2<sup>0</sup> = 8 + 0 + 0 + 0 = 8</li></ul></div></li><li><p><strong>八进制和十六进制转二进制</strong></p><p>只需将每位改为 <code>3</code> 位或 <code>4</code> 位二进制数即可（必要时去掉整数最高位或小数最低位的 <code>0</code>）。</p></li><li><p><strong>八进制和十六进制之间转换</strong></p><p>八进制转十六进制（或十六进制转八进制）时，先将八进制（或十六进制）数转换为二进制，然后由二进制再转换为十六进制（或八进制）数。</p></li><li><p><strong>任意进制转十进制</strong></p><p>将任意进制数的各位数码与它们的权值相乘，再把乘积相加，结果就是十进制数。这种方法称为 <strong>按权展开相加法。</strong></p><p>例如：二进制数 <code>11011.1</code> 转换为十进制。</p><p>(11011.1)<sub>2</sub> = 1x2<sup>4</sup> + 1x2<sup>3</sup> + 0x2<sup>2</sup> + 1x2<sup>1</sup> + 1x2<sup>0</sup> + 1x2<sup>-1</sup> = 27.5</p></li><li><p><strong>十进制转任意进制</strong></p><p>十进制转任意进制，常采用 <strong>基数乘除法</strong>。这种转换方法对十进制整数部分用 <strong>除基取余法</strong>；对小数部分用 <strong>乘基取整法</strong>，最后将整数部分和小数部分的转换结果拼接起来。</p><ul><li><strong>除基取余法</strong>：整数部分除基取余，最先取得的余数为数的最低位，最后取得的余数为数的最高位（即除基取余，先余为低，后余为高），商为 <code>0</code> 时结束</li><li><strong>乘基取整法</strong>：小数部分乘基取整，最先取得的整数为数的最高位，最后取得的整数为数的最低位（即乘基取整，先整为高，后整为低），乘积为 <code>1.0</code>（或满足精度要求）时结束</li></ul><p>例如：十进制数 <code>123.6875</code> 转换成二进制。</p><p>整数部分：123 = (1111011)<sub>2</sub></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    除基      取余
2 │ 123        1    最低位
  └────
  2 │ 61       1
    └────
  2 │ 30       0
    └────
  2 │ 15       1
    └────
    2 │  7     1
      └────
    2 │  3     1
      └────
    2 │  1     1    最高位
      └────
         0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小数部分：0.6875 = (0.1011)<sub>2</sub></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>      乘基     取整
    0.6875
x        2
────────────
    1.3750      1    最高位
    0.3750
x        2
────────────
    0.7500      0
x        2
────────────
    1.5000      1
    0.5000
x        2
────────────
    1.0000      1    最低位
    ……
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此十进制数 123.6875 转换成二进制数为 (1111011.1011)<sub>2</sub></p></li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在计算机中，小数和整数不一样，整数可以连续表示，但小数是离散的，所以并不是每个十进制小数都可以准确地用二进制表示。例如：<code>0.3</code>，无论经过多少次乘二取整转换都无法得到精确的结果。但任意一个二进制小数都可以用十进制小数表示</p></div></li><li><p><strong>真值和机器数</strong></p><p>在日常生活中，通常用正号、负号来分别表示正数（正号可省略）和负数，如：<code>+15</code>、<code>-8</code> 等。这种带 <code>+</code> 或 <code>-</code> 符号的数称为 <strong>真值</strong>。真值是机器数所代表的实际值。</p><p>在计算机中，通常将数的符号和数值部分一起编码，将数据的符号数字化，通常用 <code>0</code> 表示 <strong>正</strong>，用 <code>1</code> 表示 <strong>负</strong>。这种把符号（+/-）“数字化” 的数称为 <strong>机器数</strong>。常用的有原码、补码、反码和移码表示法。如：<code>0,101</code>（这里的逗号 <code>,</code> 仅为区分符号位与数值位）表示 <code>+5</code>。</p></li></ol><h4 id="bcd-码" tabindex="-1"><a class="header-anchor" href="#bcd-码" aria-hidden="true">#</a> BCD 码</h4><p><strong>二进制编码的十进制数（Binary-Coded Decimal，BCD）</strong> 通常采用 <code>4</code> 位二进制数来表示一位十进制数中的 <code>0~9</code> 这 <code>10</code> 个数码。这种编码方法使二进制数和十进制数之间的转换得以快速进行。但 <code>4</code> 位二进制数可以组合出 <code>16</code> 种代码，因此必有 <code>6</code> 种状态为余状态。</p><p><strong>常用的 BCD 码：</strong> 8421 码、余 3 码、2421 码。</p><h4 id="定点数的编码表示" tabindex="-1"><a class="header-anchor" href="#定点数的编码表示" aria-hidden="true">#</a> 定点数的编码表示</h4><p>根据小数点的位置是否固定，在计算机中有两种数据格式：<strong>定点表示</strong> 和 <strong>浮点表示</strong>。在现代计算机中，通常用定点补码整数表示整数，用定点原码小数表示浮点数的尾数部分，用移码表示浮点数的阶码部分。</p><ol><li><p><strong>机器数的定点表示</strong></p><p>定点表示法用来表示 <strong>定点小数</strong> 和 <strong>定点整数。</strong></p><ul><li><p><strong>定点小数</strong>：是纯小数</p><figure><img src="`+d+'" alt="fixed_point_decimal" tabindex="0" loading="lazy"><figcaption>fixed_point_decimal</figcaption></figure><p>约定小数点位置在符号位之后、有效数值部分最高位之前。例如：<strong>x<sub>0</sub>.x<sub>1</sub>x<sub>2</sub>……x<sub>n</sub></strong>。其中 <strong>x<sub>0</sub></strong> 为符号位，<strong>x<sub>1</sub>~x<sub>n</sub></strong> 为数值的有效部分也称为 <strong>数尾</strong>，<strong>x<sub>1</sub></strong> 为最高有效位。</p></li><li><p><strong>定点整数</strong>：是纯整数</p><figure><img src="'+p+'" alt="fixed_point_integer" tabindex="0" loading="lazy"><figcaption>fixed_point_integer</figcaption></figure><p>约定小数点位置在有效数值部分最低位之后。例如：<strong>x<sub>0</sub>x<sub>1</sub>x<sub>2</sub>……x<sub>n</sub>.</strong>。其中 <strong>x<sub>0</sub></strong> 为符号位，<strong>x<sub>1</sub>~x<sub>n</sub></strong> 为 <strong>数尾</strong>，<strong>x<sub>n</sub></strong> 为最低有效位。</p></li></ul><p>定点数编码表示法主要有四种：原码、补码、反码和移码。</p></li><li><p><strong>定点表示法</strong></p><ul><li><p><strong>原码</strong>：用机器数的最高位表示数的符号，其余各位表示数的绝对值</p><p><strong>纯小数的原码定义：</strong></p><figure><img src="'+c+'" alt="original_decimal" tabindex="0" loading="lazy"><figcaption>original_decimal</figcaption></figure><p>例如：x<sub>1</sub> = +0.1101，x<sub>2</sub> = -0.1101，字长为 <code>8</code> 位。</p><p>原码表示为：</p><ul><li>[x<sub>1</sub>]<sub>原</sub> = 0.1101000</li><li>[x<sub>2</sub>]<sub>原</sub> = 1 - (-0.1101) = 1.0000000 + 0.1101000 = 1.1101000</li></ul><p>其中最高位为符号位。小数的 <strong>符号位</strong> 与 <strong>数值位</strong> 之间用 <strong>小数点</strong> 隔开。</p><p>若字长为 <code>n + 1</code>，则原码小数的表示范围为 -(1 - 2<sup>-n</sup>) ≤ x ≤ 1 - 2<sup>-n</sup>（关于原点对称）。</p><p><strong>纯整数的原码定义：</strong></p><figure><img src="'+a+'" alt="original_integer" tabindex="0" loading="lazy"><figcaption>original_integer</figcaption></figure><p>2<sup>n</sup> 中的 <code>n</code> 是整数位数，也就是数值有效部分的位数。</p><p>例如：x<sub>1</sub> = +1110，x<sub>2</sub> = -1110，字长为 <code>8</code> 位。</p><p>原码表示为：</p><ul><li>[x<sub>1</sub>]<sub>原</sub> = 0,0001110</li><li>[x<sub>2</sub>]<sub>原</sub> = 2<sup>7</sup> - (-1110) = 128 + 1110 = 10000000 + 00001110 = 1,0001110</li></ul><p>2<sup>7</sup> 中的 <code>7</code> 为 <strong>字长（8）- 符号位（1）</strong> 后所得的 <strong>整数位数（7）</strong></p><p>其中最高位为符号位。整数的 <strong>符号位</strong> 与 <strong>数值位</strong> 之间用 <strong>逗号</strong> 隔开。</p><p>若字长为 <code>n + 1</code>，则原码整数的表示范围为 -(2<sup>n</sup> - 1) ≤ x ≤ 2<sup>n</sup> - 1（关于原点对称）。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>真值零的原码表示有正零和负零两种：[+0]<sub>原</sub> = <strong>0</strong>0000；[-0]<sub>原</sub> = <strong>1</strong>0000</p></div></li><li><p><strong>补码</strong>：加减运算统一采用加法运算实现</p><details class="hint-container details"><summary>模（mod）的概念</summary><p><strong>模（mod）</strong> 是指一个计量系统的计数范围，例如：时钟。计算机也可以也可以看成一个计量机器，因为计算机的字长是定长的，即存储和处理的位数是有限的，因此它也有一个计量范围，即都存在一个模。如：时钟的计量范围是 0~11，<strong>模 = 12</strong>。表示 <code>n</code> 位的计算机计量范围是 0~2<sup>n</sup> -1，<strong>模 = 2<sup>n</sup></strong>。模实质上是计量器产生 “溢出” 的量，它的值在计量器上表示不出来，计量器上只能表示出 <strong>模的余数</strong>。任何有模的计量器，均可 <strong>化减法为加法运算（就是取反后加 1）</strong></p><p>假设当前时针指向 <code>8</code> 点，而准确时间是 <code>6</code> 点，调整时间可有以下两种拨法：</p><ol><li>倒拨 <code>2</code> 小时，即 <code>8 - 2 = 6</code></li><li>顺拨 10 小时，<code>8 + 10 = 12 + 6 = 6</code></li></ol><p>即 <code>8 - 2 = 8 + 10 = 8 + 12 - 2(mod 12)</code>。在 <code>12</code> 为模的系统里，加 10 和减 2 效果是一样的，因此凡是减 2 运算，都可以用加 10 来代替。若用一般公式可表示为：<code>a - b = a - b + mod = a + mod - b</code>。对模而言，<code>2</code> 和 <code>10</code> <strong>互为补数</strong>。实际上，以 <code>12</code> 为模的系统中，11 和 1、8 和 4、9 和 3、7 和 5、6 和 6 都有这个特性，共同的特点是 <strong>两者相加等于模</strong>。对于计算机，其概念和方法完全一样。<code>n</code> 位计算机，设 <code>n = 8</code>，所能表示的最大数是 <code>11111111</code>，若再加 1 成 <code>100000000</code>（9 位），但因只有 <code>8</code> 位，最高位 1 自然丢失（相当于丢失一个模）。又回到了 <code>00000000</code>，所以 <code>8</code> 位二进制系统的模为 <strong>2<sup>8</sup></strong>。在这样的系统中减法问题也可以化成加法问题，只需 <strong>把减数用相应的补数表示</strong> 就可以了。把补数用到计算机对数的处理上，就是补码</p></details><p><strong>纯小数的补码定义：</strong></p><figure><img src="'+u+`" alt="complement_decimal" tabindex="0" loading="lazy"><figcaption>complement_decimal</figcaption></figure><p>例如：x<sub>1</sub> = +0.1001，x<sub>2</sub> = -0.0110，字长为 <code>8</code> 位。</p><p>补码表示为：</p><ul><li>[x<sub>1</sub>]<sub>补</sub> = 0.1001000</li><li>[x<sub>2</sub>]<sub>补</sub> = 2 + (-0.0110) = 2 - 0.0110 = 1.0000000 + (1.0000000 - 0.0110000) = 1.0000000 + 0.1010000 = 1.1010000</li></ul><div class="hint-container info"><p class="hint-container-title">1.0000000 - 0.0110000 运算过程</p><p>由于十进制 <code>25 - 9 = 16</code> 在做减法运算时，首先 <code>个位（5）- 9</code> 不够减，就向前借一位（<strong>借 10</strong>）变成 <code>个位（10 + 5）- 9</code>，十位 <code>2</code> 就变成 <code>1</code>，最后得到的结果是 <code>16</code></p><p>因此二进制 <code>1.0000000 - 0.0110000</code> 在做减法运算时，不够减时，向前借一位（<strong>借 2</strong>）变成 <code>0.1120000 - 0.0110000</code>，最后得到的结果是 <code>0.1010000</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  1.0000000        0.1120000
- 0.0110000  -&gt;  - 0.0110000
= 0.1010000      = 0.1010000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>若字长为 <code>n + 1</code>，则补码小数的表示范围为 -1 ≤ x ≤ 1 - 2<sup>-n</sup>（比原码多表示 -1）。</p><p><strong>纯整数的补码定义：</strong></p><figure><img src="`+b+`" alt="complement_integer" tabindex="0" loading="lazy"><figcaption>complement_integer</figcaption></figure><p>例如：x<sub>1</sub> = +1010，x<sub>2</sub> = -1101，字长为 <code>8</code> 位。</p><p>补码表示为：</p><ul><li>[x<sub>1</sub>]<sub>补</sub> = 0,0001010</li><li>[x<sub>2</sub>]<sub>补</sub> = 2<sup>(7+1)</sup> + (-1101) = 2<sup>8</sup> - 1101 = 100000000 - 00001101 = 1,1110011</li></ul><div class="hint-container info"><p class="hint-container-title">100000000 - 00001101 运算过程</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  100000000        11111112
-  00001101  -&gt;  - 00001101
= 0.1010000      = 11110011
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>若字长为 <code>n + 1</code>，则补码整数的表示范围为 -2<sup>n</sup> ≤ x ≤ 2<sup>n</sup> - 1（比原码多表示 -2<sup>n</sup>）。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>零的补码表示是唯一的：[+0]<sub>补</sub> = [-0]<sub>补</sub> = 0.0000</p></div><p><strong>补码与真值之间的转换:</strong></p><p>对补码而言，正数和负数的转换不同。正数补码的转换方式与原码的相同。</p><ul><li><strong>真值转换为补码</strong>：对于正数，与原码的方式一样。对于负数，符号位取 1，其余各位由真值 <strong>各位取反，末位加 1</strong> 得到</li><li><strong>补码转换为真值</strong>：若符号位为 0，与原码的方式一样。若符号位为 1，真值的符号为负，数值部分各位由补码 <strong>各位取反，末位加 1</strong> 得到</li></ul></li><li><p><strong>反码表示法</strong></p><p>负数的补码可采用各位取反，末位加 1 的方法得到，如果 <strong>仅各位求反而末尾不加 1</strong>，那么就可得到负数的反码表示。因此负数反码的定义就是在相应的补码表示中末位减 1。正数反码的定义和相应的补码（或原码）表示相同。</p><p><strong>反码表示存在以下几个方面的不足：</strong></p><ul><li><code>0</code> 的表示不唯一（即存在正负 0）</li><li>表示范围比补码少一个最小负数</li></ul><p>反码在计算机中很少使用，通常用作数码变换的中间表示形式。</p></li></ul></li></ol>`,41),v=[x];function m(f,P){return n(),o("div",null,v)}const M=s(h,[["render",m],["__file","computer_organization.html.vue"]]);export{M as default};
