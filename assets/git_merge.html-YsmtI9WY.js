import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o,c,b as t,e,d as s,w as a,f as i}from"./app-qHKeSv6K.js";const r={},u=i('<h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述" aria-hidden="true">#</a> 描述</h2><p><code>git merge</code> 用于合并一个或多个分支的更改到当前分支。通常用于将一个分支（例如：<code>dev</code> 分支）的更改合并到另一个分支（如：<code>main</code> 分支）时使用。</p><p><code>git merge</code> 命令的工作基于 Git 的合并策略（默认为递归策略）。当执行 <code>git merge</code> 时，Git 会：</p><ol><li>找出两个分支最近的共同祖先提交（也称为合并基准）</li><li>比较这个共同祖先提交和您当前分支的 HEAD 提交之间的差异</li><li>比较这个共同祖先提交和您想要合并的分支的 HEAD 提交之间的差异</li><li>尝试将两个差异合并成一个新的提交，这个新的提交会包含两个分支的所有更改</li></ol><p>如果在合并过程中出现 <strong>冲突</strong>（即两个分支都修改了同一个文件同一部分的内容），Git 会暂停合并过程，提示合并冲突，需要手动解决冲突。找到冲突的文件并进行编辑解决冲突，然后再提交合并结果，以完成合并操作。</p><p>合并冲突可能会影响开发效率，因此尽量避免合并冲突是很重要的。以下是一些建议可以帮助您预防合并冲突：</p><ul><li><strong>及时同步主分支</strong>：在开发过程中，定期将主分支的更新同步到当前分支，以尽早发现并解决潜在的合并冲突</li><li><strong>遵循编码规范</strong>：团队成员应遵循统一的编码规范，以减少不必要的格式和风格差异</li><li><strong>划分模块</strong>：尽量将项目划分为独立的模块，让团队成员在不同的模块上进行开发，以减少合并冲突的可能性</li><li><strong>定期沟通</strong>：团队成员之间应保持良好的沟通，共享开发计划和进度，以避免重复工作和潜在的冲突</li><li><strong>使用分支策略</strong>：制定合适的分支策略，如：GitFlow、GitHub Flow 等，以规范团队成员在分支上的协作</li></ul>',7),p=t("code",null,"git merge",-1),g=i(`<p>合并操作会改变历史记录，所以在公共分支（如：<code>main</code> 分支）上执行合并时要特别小心，确保与其他团队成员协调好。</p><h2 id="选项" tabindex="-1"><a class="header-anchor" href="#选项" aria-hidden="true">#</a> 选项</h2><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>--ff</code></td><td style="text-align:left;">以快进方式解决合并问题（只更新分支指针以匹配合并后的分支；不创建合并提交）。当不可能时（当合并的历史不是当前历史的后代），创建一个合并提交</td></tr><tr><td style="text-align:center;"><code>--no-ff</code></td><td style="text-align:left;">在所有情况下都创建一个合并提交，即使该合并可以作为一个快进解决</td></tr><tr><td style="text-align:center;"><code>--ff-only</code></td><td style="text-align:left;">在可能的情况下，以快进的方式解决合并的问题。当不可能时，拒绝合并并以非零状态退出</td></tr><tr><td style="text-align:center;"><code>--squash</code></td><td style="text-align:left;">将另一个分支的更改压缩成一个新的提交，而不是创建一个合并提交</td></tr><tr><td style="text-align:center;"><code>--abort</code></td><td style="text-align:left;">中止当前的冲突解决过程，并尝试重建合并前的状态。工作区会自动应用自动存储条目</td></tr><tr><td style="text-align:center;"><code>--quit</code></td><td style="text-align:left;">忘记当前正在进行的合并。让索引和工作区保持原样</td></tr><tr><td style="text-align:center;"><code>--continue</code></td><td style="text-align:left;">在 <code>git merge</code> 因冲突而停止后，可以通过运行 <code>git merge --continue</code> 来结束当前合并</td></tr><tr><td style="text-align:center;"><code>-s &lt;策略&gt;, --strategy=&lt;策略&gt;</code></td><td style="text-align:left;">使用给定的合并策略，如：<code>ort</code>、<code>recursive</code>、<code>resolve</code>、<code>octopus</code>、<code>ours</code>、<code>subtree</code>；可以多次提供，以指定它们应该被尝试的顺序</td></tr><tr><td style="text-align:center;"><code>-q, --quiet</code></td><td style="text-align:left;">不显示输出内容</td></tr><tr><td style="text-align:center;"><code>-v, --verbose</code></td><td style="text-align:left;">显示详细输出</td></tr></tbody></table><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><h3 id="合并分支" tabindex="-1"><a class="header-anchor" href="#合并分支" aria-hidden="true">#</a> 合并分支</h3><p>例如：将本地 <code>dev</code> 分支合并到 <code>main</code> 分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout main
<span class="token function">git</span> merge dev

Auto-merging test01.txt
CONFLICT <span class="token punctuation">(</span>content<span class="token punctuation">)</span>: Merge conflict <span class="token keyword">in</span> test01.txt
Auto-merging test03.txt
CONFLICT <span class="token punctuation">(</span>add/add<span class="token punctuation">)</span>: Merge conflict <span class="token keyword">in</span> test03.txt
Automatic merge failed<span class="token punctuation">;</span> fix conflicts and <span class="token keyword">then</span> commit the result.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),m=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> status

On branch main
Your branch is up to <span class="token function">date</span> with <span class="token string">&#39;origin/main&#39;</span><span class="token builtin class-name">.</span>

You have unmerged paths.
  <span class="token punctuation">(</span>fix conflicts and run <span class="token string">&quot;git commit&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">(</span>use <span class="token string">&quot;git merge --abort&quot;</span> to abort the merge<span class="token punctuation">)</span>

Unmerged paths:
  <span class="token punctuation">(</span>use <span class="token string">&quot;git add &lt;file&gt;...&quot;</span> to mark resolution<span class="token punctuation">)</span>
        both modified:   test01.txt
        both added:      test03.txt

no changes added to commit <span class="token punctuation">(</span>use <span class="token string">&quot;git add&quot;</span> and/or <span class="token string">&quot;git commit -a&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，打开冲突文件 <code>test01.txt</code>，手动解决冲突。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> test01.txt

test01
<span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;</span> HEAD
test01
test01
test01
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
test01test01
test01test01
test01test01
test01
test01test01
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>test01.txt</code> 文件中 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code> 到 <code>=======</code> 之间是当前分支的更改；<code>=======</code> 到 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; dev</code> 之间是被合并分支的更改。</p><p>解决冲突后，将更改添加到暂存区，并进行提交，成了分支合并。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;解决合并冲突&quot;</span>
<span class="token function">git</span> push origin main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="合并远程分支" tabindex="-1"><a class="header-anchor" href="#合并远程分支" aria-hidden="true">#</a> 合并远程分支</h3><p>例如：合并远程 <code>main</code> 分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> merge origin/main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="合并指定提交" tabindex="-1"><a class="header-anchor" href="#合并指定提交" aria-hidden="true">#</a> 合并指定提交</h3><p>例如：合并指定 <code>commit id</code> 提交。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> merge a159da180cd0ea822a03e81c29492a45e9828c53
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="合并指定策略" tabindex="-1"><a class="header-anchor" href="#合并指定策略" aria-hidden="true">#</a> 合并指定策略</h3><p>例如：指定 <code>subtree</code> 策略，合并 <code>dev</code> 分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> merge <span class="token parameter variable">-s</span> subtree dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,15);function v(h,b){const n=l("RouterLink");return o(),c("div",null,[u,t("p",null,[e("在执行 "),p,e(" 之前，建议先运行 "),s(n,{to:"/commands/git/git_status.html"},{default:a(()=>[e("git status")]),_:1}),e(" 确保当前分支干净，并且已经拉取了最新的更改。")]),t("p",null,[e("如果不希望直接合并分支，而是想要保留分支的独立性但将更改整合到当前分支，可以考虑使用 "),s(n,{to:"/commands/git/git_rebase.html"},{default:a(()=>[e("git rebase")]),_:1}),e(" 命令。")]),g,t("p",null,[e("在合并过程中出现冲突，需要手动解决。首先，使用 "),s(n,{to:"/commands/git/git_status.html"},{default:a(()=>[e("git status")]),_:1}),e(" 命令查看冲突文件：")]),m])}const x=d(r,[["render",v],["__file","git_merge.html.vue"]]);export{x as default};
