import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o,c,b as t,e,d as s,w as a,f as i}from"./app-gMd8eGmR.js";const r={},u=i('<h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述" aria-hidden="true">#</a> 描述</h2><p><code>git pull</code> 用于从另一个存储库或本地分支获取（<code>fetch</code>）并集成（<code>merge</code> 或 <code>rebase</code>）更改到当前分支。通常用于同步您的本地分支与远程存储库中的最新更改。</p><p>将远程版本库的修改并入当前分支。如果当前分支落后于远程分支，默认情况下，它将快速合并当前分支以匹配远程分支。如果当前分支和远程分支有分歧，用户需要用 <code>--rebase</code> 或 <code>--no-rebase</code>（或 <code>pull.rebase</code> 中的相应配置选项）来指定如何调和分歧的分支。</p>',3),p=t("code",null,"git pull",-1),m=t("code",null,"git pull",-1),g=t("p",null,"如果合并过程中发生冲突，您需要手动解决这些冲突，然后提交合并结果。",-1),h=t("p",null,[e("如果您想避免合并过程中的冲突，可以考虑使用 "),t("code",null,"git pull --rebase"),e("，这将会尝试通过变基（而不是合并）来集成更改。")],-1),v=t("code",null,"git pull",-1),b=t("code",null,"git pull",-1),f=t("code",null,"git pull --rebase",-1),k=i(`<h2 id="选项" tabindex="-1"><a class="header-anchor" href="#选项" aria-hidden="true">#</a> 选项</h2><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>--all</code></td><td style="text-align:left;">获取所有远程控制</td></tr><tr><td style="text-align:center;"><code>-q, --quiet</code></td><td style="text-align:left;">不显示输出内容</td></tr><tr><td style="text-align:center;"><code>-v, --verbose</code></td><td style="text-align:left;">显示详细输出</td></tr><tr><td style="text-align:center;"><code>-r, --rebase</code></td><td style="text-align:left;">在获取最新远程分支后，将当前分支变基到远程分支之上</td></tr></tbody></table><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><h3 id="更新远程分支" tabindex="-1"><a class="header-anchor" href="#更新远程分支" aria-hidden="true">#</a> 更新远程分支</h3><p>使用 <code>git pull</code> 不添加任何参数，这等于 <code>git pull origin</code>。而当配置 <code>branch.&lt;分支名&gt;.remote</code> 在 <code>&lt;分支名&gt;</code> 上出现时，该值会被用来代替 <code>origin</code>。</p><p>例如：更新远程分支到本地。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull

Auto-merging test01.txt
CONFLICT <span class="token punctuation">(</span>content<span class="token punctuation">)</span>: Merge conflict <span class="token keyword">in</span> test01.txt
Automatic merge failed<span class="token punctuation">;</span> fix conflicts and <span class="token keyword">then</span> commit the result.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),_=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> status

On branch main
Your branch and <span class="token string">&#39;origin/main&#39;</span> have diverged,
and have <span class="token number">1</span> and <span class="token number">4</span> different commits each, respectively.
  <span class="token punctuation">(</span>use <span class="token string">&quot;git pull&quot;</span> to merge the remote branch into yours<span class="token punctuation">)</span>

You have unmerged paths.
  <span class="token punctuation">(</span>fix conflicts and run <span class="token string">&quot;git commit&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">(</span>use <span class="token string">&quot;git merge --abort&quot;</span> to abort the merge<span class="token punctuation">)</span>

Unmerged paths:
  <span class="token punctuation">(</span>use <span class="token string">&quot;git add &lt;file&gt;...&quot;</span> to mark resolution<span class="token punctuation">)</span>

        both modified:   test01.txt

no changes added to commit <span class="token punctuation">(</span>use <span class="token string">&quot;git add&quot;</span> and/or <span class="token string">&quot;git commit -a&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，打开冲突文件 <code>test01.txt</code>，手动解决冲突。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> test01.txt

test01
test01
<span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;</span> HEAD
test01
test01test01
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> 0d01fc15e2e250c67ef151bea3adbb90ae5471cf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>test01.txt</code> 文件中 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code> 到 <code>=======</code> 之间是当前分支的更改；<code>=======</code> 到 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 0d01fc1</code> 之间是远程最新 HEAD 的更改。</p><p>解决冲突后，将更改添加到暂存区，并进行提交，成了分支合并。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;解决合并冲突&quot;</span>
<span class="token function">git</span> pull
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更新指定远程分支" tabindex="-1"><a class="header-anchor" href="#更新指定远程分支" aria-hidden="true">#</a> 更新指定远程分支</h3><p>例如：将远程 <code>dev</code> 分支的最新提交并 <code>merge</code> 到本地 <code>main</code> 分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout main
<span class="token function">git</span> pull origin dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：将远程 <code>dev</code> 分支的最新提交并 <code>merge</code> 到本地 <code>test</code> 分支。如果本地没有 <code>test</code> 分支，先创建 <code>test</code> 分支后再获取远程 <code>dev</code> 分支的最新提交并 <code>merge</code> 到本地 <code>test</code> 分支中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull origin dev:test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="更新指定远程提交" tabindex="-1"><a class="header-anchor" href="#更新指定远程提交" aria-hidden="true">#</a> 更新指定远程提交</h3><p>例如：将远程 <code>commit id</code> 的提交并 <code>merge</code> 到本地 <code>main</code> 分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout main
<span class="token function">git</span> pull origin <span class="token operator">&lt;</span>commit id<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function x(q,y){const n=l("RouterLink");return o(),c("div",null,[u,t("p",null,[e("更确切地说，"),p,e(" 运行 "),s(n,{to:"/commands/git/git_fetch.html"},{default:a(()=>[e("git fetch")]),_:1}),e(" 并给出参数，然后根据配置选项或命令行标志，调用 "),s(n,{to:"/commands/git/git_rebase.html"},{default:a(()=>[e("git rebase")]),_:1}),e(" 或 "),s(n,{to:"/commands/git/git_merge.html"},{default:a(()=>[e("git merge")]),_:1}),e(" 来协调不同的分支。")]),t("p",null,[e("在执行 "),m,e(" 之前，通常建议先运行 "),s(n,{to:"/commands/git/git_status.html"},{default:a(()=>[e("git status")]),_:1}),e(" 来检查当前分支的状态，确保您处于正确的分支上，并且工作目录是干净的（没有未提交的更改）。")]),g,h,t("p",null,[v,e(" 默认会使用您最后一次使用的远程和分支，因此如果您经常从同一个远程分支拉取，您甚至可以直接使用 "),s(n,{to:"/commands/git/git_pull.html"},{default:a(()=>[e("git pull")]),_:1}),e(" 而不需要指定远程和分支。")]),t("p",null,[e("如果任何远程修改与本地未提交的修改重叠，合并将被自动取消，工作目录树不会被改动。一般来说，最好是在拉取之前把任何本地的修改弄到工作状态，或者用 "),s(n,{to:"/commands/git/git_stash.html"},{default:a(()=>[e("git stash")]),_:1}),e(" 把它们贮藏起来。")]),t("ul",null,[t("li",null,[b,e(" 命令，就是先执行 "),s(n,{to:"/commands/git/git_fetch.html"},{default:a(()=>[e("git fetch")]),_:1}),e(" 再执行 "),s(n,{to:"/commands/git/git_merge.html"},{default:a(()=>[e("git merge")]),_:1}),e(" 命令")]),t("li",null,[f,e(" 命令，就是先执行 "),s(n,{to:"/commands/git/git_fetch.html"},{default:a(()=>[e("git fetch")]),_:1}),e(" 再执行 "),s(n,{to:"/commands/git/git_rebase.html"},{default:a(()=>[e("git rebase")]),_:1}),e(" 命令")])]),k,t("p",null,[e("在更新过程中出现冲突，需要手动解决。首先，使用 "),s(n,{to:"/commands/git/git_status.html"},{default:a(()=>[e("git status")]),_:1}),e(" 命令查看冲突文件：")]),_])}const w=d(r,[["render",x],["__file","git_pull.html.vue"]]);export{w as default};
