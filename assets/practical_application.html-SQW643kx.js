import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as e}from"./app-Av4NYxZe.js";const t="/assets/user_info-IhcLtHW_.png",p="/assets/user_info_1-Xr2fa2Eb.png",o="/assets/user_info_2-Fa7WLb5V.png",c="/assets/user_info_3-9uzrbGrd.png",i="/assets/user_info_4-UbQuvKvh.png",l="/assets/user_info_5-Ux0k4qPt.png",u="/assets/user_info_6-VfYM5YJW.png",d="/assets/a_search-i7d9lhZr.png",r="/assets/a_search_1-OkDFxE3u.png",k="/assets/a_search_2-6R6wqQ0a.png",v="/assets/a_search_3-pXC5Yv5t.png",m="/assets/a_search_4-KAKqZk7d.png",b="/assets/a_search_5-VmROCsOa.png",g="/assets/a_search_6-TipVcmPc.png",_="/assets/a_search_7-N1hGQ8sV.png",y="/assets/a_search_8-VCZu6HsE.png",f="/assets/a_search_9-E4Wqawvn.png",h={},x=e(`<h2 id="bitmap-的巧用" tabindex="-1"><a class="header-anchor" href="#bitmap-的巧用" aria-hidden="true">#</a> Bitmap 的巧用</h2><h3 id="关于用户标签的需求" tabindex="-1"><a class="header-anchor" href="#关于用户标签的需求" aria-hidden="true">#</a> 关于用户标签的需求</h3><p>实现用户信息的标签化。用户标签包括用户的社会属性、生活习惯、消费行为等信息。通过用户标签，可以对多样的用户群体进行统计。例如：统计用户的男女比例、统计喜欢旅游的用户数量等。</p><p>为了满足用户标签的统计需求，利用关系数据库设计了如下的表结构，每一个维度的标签对应着数据库表中的一列：</p><table><thead><tr><th style="text-align:center;">Name</th><th style="text-align:center;">Sex</th><th style="text-align:center;">Age</th><th style="text-align:center;">Occupation</th><th style="text-align:center;">Phone</th></tr></thead><tbody><tr><td style="text-align:center;">张三</td><td style="text-align:center;">男</td><td style="text-align:center;">90后</td><td style="text-align:center;">程序员</td><td style="text-align:center;">苹果</td></tr><tr><td style="text-align:center;">李四</td><td style="text-align:center;">男</td><td style="text-align:center;">90后</td><td style="text-align:center;">程序员</td><td style="text-align:center;">三星</td></tr><tr><td style="text-align:center;">王五</td><td style="text-align:center;">女</td><td style="text-align:center;">00后</td><td style="text-align:center;">学生</td><td style="text-align:center;">小米</td></tr></tbody></table><p>要想统计所有 “90后” 的程序员，用一条求交集的 SQL 语句即可。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Select</span> <span class="token function">count</span> <span class="token punctuation">(</span><span class="token keyword">distinct</span> Name<span class="token punctuation">)</span> <span class="token keyword">as</span> 用户数 <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> Age<span class="token operator">=</span><span class="token string">&quot;90后&quot;</span> <span class="token operator">and</span> Occupation<span class="token operator">=</span><span class="token string">&quot;程序员&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要想统计所有使用苹果手机或 “00后” 的用户总和，用一条求并集的 SQL 语句即可。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">Select</span> <span class="token function">count</span> <span class="token punctuation">(</span><span class="token keyword">distinct</span> Name<span class="token punctuation">)</span> <span class="token keyword">as</span> 用户数 <span class="token keyword">from</span> <span class="token keyword">table</span> <span class="token keyword">where</span> Phone<span class="token operator">=</span><span class="token string">&quot;苹果&quot;</span> <span class="token operator">or</span> Age<span class="token operator">=</span><span class="token string">&quot;00后&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>之后标签越来越多，筛选的标签条件过多的时候，拼出来的 <code>SQL</code> 语句像面条一样长……不仅如此，当对多个用户群体求 <strong>并集</strong> 时，需要用 <code>distinct</code> 来去掉重复数据，性能实在太差了……</p><h3 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法" aria-hidden="true">#</a> 解决方法</h3><p><strong>Bitmap 算法</strong>，中文里叫作 <strong>位图算法</strong>。是内存中连续的二进制位（bit）所组成的数据结构，该算法主要用于对大量整数做去重和查询操作。</p><p>假设给出一块长度为 <code>10bit</code> 的内存空间，也就是 <code>Bitmap</code>，想要依次插入整数 <code>4</code>、<code>2</code>、<code>1</code>、<code>3</code>，具体步骤如下：</p><p>第一步，给出一块长度为 <code>10</code> 的 <code>Bitmap</code>，其中的每一个 <code>bit</code> 位分别对应着从 <code>0</code> 到 <code>9</code> 的整型数。此时，<code>Bitmap</code> 的所有位都是 <code>0</code>。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>num:     0 0 0 0 0 0 0 0 0 0
Bitmap:  9 8 7 6 5 4 3 2 1 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步，把整型数 <code>4</code> 存入 <code>Bitmap</code>，对应存储的位置就是下标为 <code>4</code> 的位置，将此 <code>bit</code>设置为 <code>1</code>。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>num:     0 0 0 0 0 1 0 0 0 0
Bitmap:  9 8 7 6 5 4 3 2 1 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第三步，把整型数 <code>2</code> 存入 <code>Bitmap</code>，对应存储的位置就是下标为 <code>2</code> 的位置，将此 <code>bit</code>设置为 <code>1</code>。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>num:     0 0 0 0 0 1 0 1 0 0
Bitmap:  9 8 7 6 5 4 3 2 1 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第四步，把整型数 <code>1</code> 存入 <code>Bitmap</code>，对应存储的位置就是下标为 <code>1</code> 的位置，将此 <code>bit</code>设置为 <code>1</code>。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>num:     0 0 0 0 0 1 0 1 1 0
Bitmap:  9 8 7 6 5 4 3 2 1 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第五步，把整型数 <code>3</code> 存入 <code>Bitmap</code>，对应存储的位置就是下标为 <code>3</code> 的位置，将此 <code>bit</code>设置为 <code>1</code>。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>num:     0 0 0 0 0 1 1 1 1 0
Bitmap:  9 8 7 6 5 4 3 2 1 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Bitmap</code> 不仅方便查询，还可以去掉重复的整数。让每一个标签存储包含此标签的所有用户 ID。</p><table><thead><tr><th style="text-align:center;">Name</th><th style="text-align:center;">Sex</th><th style="text-align:center;">Age</th><th style="text-align:center;">Occupation</th><th style="text-align:center;">Phone</th></tr></thead><tbody><tr><td style="text-align:center;">张三</td><td style="text-align:center;">男</td><td style="text-align:center;">90后</td><td style="text-align:center;">程序员</td><td style="text-align:center;">苹果</td></tr><tr><td style="text-align:center;">李四</td><td style="text-align:center;">男</td><td style="text-align:center;">90后</td><td style="text-align:center;">程序员</td><td style="text-align:center;">三星</td></tr><tr><td style="text-align:center;">王五</td><td style="text-align:center;">女</td><td style="text-align:center;">00后</td><td style="text-align:center;">学生</td><td style="text-align:center;">小米</td></tr></tbody></table><p>第一步，建立用户名和用户ID 的映射。</p><table><thead><tr><th style="text-align:center;">ID</th><th style="text-align:center;">Name</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">张三</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">李四</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">王五</td></tr></tbody></table><p>第二步，让每一个标签存储包含此标签的所有用户 ID，每一个标签都是一个独立的 <code>Bitmap</code>。</p><table><thead><tr><th style="text-align:center;">Sex</th><th style="text-align:center;">Bitmap</th></tr></thead><tbody><tr><td style="text-align:center;">男</td><td style="text-align:center;">1, 2</td></tr><tr><td style="text-align:center;">女</td><td style="text-align:center;">3</td></tr></tbody></table><table><thead><tr><th style="text-align:center;">Age</th><th style="text-align:center;">Bitmap</th></tr></thead><tbody><tr><td style="text-align:center;">90后</td><td style="text-align:center;">1, 2</td></tr><tr><td style="text-align:center;">00后</td><td style="text-align:center;">3</td></tr></tbody></table><table><thead><tr><th style="text-align:center;">Occupaton</th><th style="text-align:center;">Bitmap</th></tr></thead><tbody><tr><td style="text-align:center;">程序员</td><td style="text-align:center;">1, 2</td></tr><tr><td style="text-align:center;">学生</td><td style="text-align:center;">3</td></tr></tbody></table><table><thead><tr><th style="text-align:center;">Phone</th><th style="text-align:center;">Bitmap</th></tr></thead><tbody><tr><td style="text-align:center;">苹果</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">三星</td><td style="text-align:center;">2</td></tr><tr><td style="text-align:center;">小米</td><td style="text-align:center;">3</td></tr></tbody></table><div class="hint-container note"><p class="hint-container-title">哈希表和 Bitmap 对比</p><p>使用哈希表也同样能实现用户的去重和统计操作。</p><p>但如果使用哈希表的话，每一个用户ID 都要用整型数据存储，少则占用 <code>4</code> 字节（32bit），多则占用 <code>8</code> 字节（64bit）。而一个用户ID 在 <code>Bitmap</code> 中只占 <code>1bit</code>，内存是使用哈希表所占用内存的 <code>1/32</code>，甚至更少！</p></div><p><code>Bitmap</code> 在对用户群做 <strong>交集</strong> 和 <strong>并集</strong> 运算时也有极大的便利。例如：</p><ol><li><p>查找使用苹果手机的程序员用户</p><p>程序员用户（<code>0000000110B</code>）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>num:     0 0 0 0 0 0 0 1 1 0
Bitmap:  9 8 7 6 5 4 3 2 1 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用苹果手机的用户（<code>0000000010B</code>）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>num:     0 0 0 0 0 0 0 0 1 0
Bitmap:  9 8 7 6 5 4 3 2 1 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用苹果手机的程序员用户（<code>0000000110B &amp; 0000000010B = 0000000010B</code>）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>num:     0 0 0 0 0 0 0 0 1 0
Bitmap:  9 8 7 6 5 4 3 2 1 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查找所有男性用户或 “00后” 用户</p><p>男性用户（<code>0000000110B</code>）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>num:     0 0 0 0 0 0 0 1 1 0
Bitmap:  9 8 7 6 5 4 3 2 1 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>“00后” 用户（<code>0000001000B</code>）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>num:     0 0 0 0 0 0 1 0 0 0
Bitmap:  9 8 7 6 5 4 3 2 1 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>男性用户或 “00后” 用户（<code>0000000110B | 0000001000B = 0000001110B</code>）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>num:     0 0 0 0 0 0 1 1 1 0
Bitmap:  9 8 7 6 5 4 3 2 1 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>这就是 <code>Bitmap</code> 算法的另一个优势—— <strong>高性能的位运算。</strong></p><p>如何利用 <code>Bitmap</code> 实现反向匹配。例如：想查找非 “90后” 的用户。</p><p>如果简单地做 <strong>取反运算</strong> 操作，会出现如下问题：</p><p>“90后” 用户：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>num:     0 0 0 0 0 0 0 1 1 0
Bitmap:  9 8 7 6 5 4 3 2 1 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>直接进行 <strong>非运算</strong>，得到的非 “90后” 用户：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>num:     1 1 1 1 1 1 1 0 0 1
Bitmap:  9 8 7 6 5 4 3 2 1 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>显然，非 “90后” 用户实际上只有 <code>1</code> 个，而不是上面所得到的 <code>8</code> 个结果，所以不能直接进行非运算。这时可以借助一个 <strong>全量的 Bitmap。</strong></p><p>给出 “90后” 用户的 <code>Bitmap</code>，再给出一个全量用户的 <code>Bitmap</code>。最终要求出的是存在于全量用户，但又不存在于 “90后” 用户的部分。</p><p>“90后” 用户（<code>0000000110B</code>）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>num:     0 0 0 0 0 0 0 1 1 0
Bitmap:  9 8 7 6 5 4 3 2 1 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>全局用户（<code>0000001110B</code>）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>num:     0 0 0 0 0 0 1 1 1 0
Bitmap:  9 8 7 6 5 4 3 2 1 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <strong>异或运算</strong> 进行操作，即相同位为 <code>0</code>，不同位为 <code>1</code> 得到非 “90后” 用户（<code>0000000110B XOR 0000001110B = 0000001000B</code>）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>num:     0 0 0 0 0 0 1 0 0 0
Bitmap:  9 8 7 6 5 4 3 2 1 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>Bitmap 代码</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyBitmap</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_word_index<span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>size <span class="token operator">=</span> size
    
    <span class="token keyword">def</span> <span class="token function">get_bit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> bit_index<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bit_index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>bit_index <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&#39;超过 Bitmap 有效范围！&#39;</span><span class="token punctuation">)</span>
        
        word_index <span class="token operator">=</span> self<span class="token punctuation">.</span>get_word_index<span class="token punctuation">(</span>bit_index<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>words<span class="token punctuation">[</span>word_index<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bit_index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span>
    
    <span class="token keyword">def</span> <span class="token function">set_bit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> bit_index<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bit_index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>bit_index <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&#39;超过 Bitmap 有效范围！&#39;</span><span class="token punctuation">)</span>
        
        word_index <span class="token operator">=</span> self<span class="token punctuation">.</span>get_word_index<span class="token punctuation">(</span>bit_index<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>words<span class="token punctuation">[</span>word_index<span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> bit_index<span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">get_word_index</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> bit_index<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 右移 6 位，相当于除以 64</span>
        <span class="token keyword">return</span> bit_index <span class="token operator">&gt;&gt;</span> <span class="token number">6</span>


bitMap <span class="token operator">=</span> MyBitmap<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>
bitMap<span class="token punctuation">.</span>set_bit<span class="token punctuation">(</span><span class="token number">126</span><span class="token punctuation">)</span>
bitMap<span class="token punctuation">.</span>set_bit<span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>bitMap<span class="token punctuation">.</span>get_bit<span class="token punctuation">(</span><span class="token number">126</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>bitMap<span class="token punctuation">.</span>get_bit<span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>在上述代码中，使用一个命名为 <code>words</code> 的 <code>int</code> 类型数组来存储所有的二进制位。每一个 <code>int</code> 元素控制其中的 <code>64</code> 位。（在 Python3 中，<code>int</code> 既可以表示整型，也可以表示长整型。）</p><p>如果要把 <code>Bitmap</code> 的某一位设为 <code>1</code>，需要经过两步：</p><ol><li><p>定位到 <code>words</code> 中的对应的 <code>int</code> 元素。</p></li><li><p>通过与运算修改 <code>int</code> 元素的值。</p></li></ol><p>如果要查看 <code>Bitmap</code> 的某一位是否为 <code>1</code>，也需要经过两步：</p><ol><li><p>定位到 <code>words</code> 中的对应的 <code>int</code> 元素。</p></li><li><p>判断 <code>int</code> 元素的对应的二进制位是否为 <code>1</code>。</p></li></ol><h2 id="lru-算法的应用" tabindex="-1"><a class="header-anchor" href="#lru-算法的应用" aria-hidden="true">#</a> LRU 算法的应用</h2><h3 id="关于用户信息的需求" tabindex="-1"><a class="header-anchor" href="#关于用户信息的需求" aria-hidden="true">#</a> 关于用户信息的需求</h3><p>需要抽出一个用户系统，向各个业务系统提供用户的基本信息。各个业务对用户信息的查询频率很高，一定要注意性能问题。</p><figure><img src="`+t+'" alt="user_info" tabindex="0" loading="lazy"><figcaption>user_info</figcaption></figure><p>用户信息当然是存放在数据库里，但是由于对用户系统的性能要求比较高，显然不能在每一次请求时都去查询数据库。所以，在内存中创建了一个哈希表作为缓存，每当查找一个用户时会先在哈希表中进行查询，以此来提高访问的性能。</p><figure><img src="'+p+'" alt="user_info_1" tabindex="0" loading="lazy"><figcaption>user_info_1</figcaption></figure><p>之后用户数量越来越多，当初设计的哈希表把内存给撑爆了，导致内存溢出。</p><h3 id="解决方法-1" tabindex="-1"><a class="header-anchor" href="#解决方法-1" aria-hidden="true">#</a> 解决方法</h3><p><strong>LRU（Least Recently Used）</strong> 算法，也就是最近最少使用的意思，是一种内存管理算法，该算法最早应用于 Linux 操作系统。这个算法基于一种假设：<strong>长期不被使用的数据，在未来被用到的概率也不大。因此，当数据所占内存达到一定阈值时，要移除最近最少被使用的数据</strong>。</p><p>在 LRU 算法中，使用了一种有趣的数据结构，这种数据结构叫作 <strong>哈希链表。</strong></p><p><strong>哈希表</strong> 是由若干个 <code>Key-Value</code> 组成的。在 “逻辑” 上，这些 <code>Key-Value</code> 是无所谓排列顺序的，谁先谁后都一样。但在 <strong>哈希链表</strong> 中，这些 <code>Key-Value</code> 不再是彼此无关的了，而是被一个链条串了起来。每一个 <code>Key-Value</code> 都具有它的 <strong>前驱 Key-Value</strong>、<strong>后继 Key-Value</strong>，就像双向链表中的节点一样。</p><p>这样，原本无序的哈希表就拥有了固定的排列顺序。依靠哈希链表的 <strong>有序性</strong>，可以把 <code>Key-Value</code> 按照最后的使用时间进行排序。<strong>LRU 算法的基本思路</strong> 例如：</p><ol><li><p>假设使用哈希链表来缓存用户信息，目前缓存了 <code>4</code> 个用户，这 <code>4</code> 个用户是按照被访问的时间顺序依次从链表右端插入的。</p><figure><img src="'+o+'" alt="user_info_2" tabindex="0" loading="lazy"><figcaption>user_info_2</figcaption></figure></li><li><p>如果这时业务方访问用户5，由于哈希链表中没有用户5 的数据，需要从数据库中读取出来，插入缓存中。此时，链表最右端是最新被访问的用户5，最左端是最近最少被访问的用户1。</p><figure><img src="'+c+'" alt="user_info_3" tabindex="0" loading="lazy"><figcaption>user_info_3</figcaption></figure></li><li><p>接下来，如果业务方访问用户2，哈希链表中已经存在用户2 的数据，这时把用户2 从它的前驱节点和后继节点之间移除，重新插入链表的最右端。此时，链表的最右端变成了最新被访问的用户2，最左端仍然是最近最少被访问的用户1。</p><figure><img src="'+i+'" alt="user_info_4" tabindex="0" loading="lazy"><figcaption>user_info_4</figcaption></figure></li><li><p>接下来，如果业务方请求修改用户4 的信息。同样的道理，会把用户4 从原来的位置移动到链表的最右侧，并把用户信息的值更新。这时，链表的最右端是最新被访问的用户4，最左端仍然是最近最少被访问的用户1。</p><figure><img src="'+l+'" alt="user_info_5" tabindex="0" loading="lazy"><figcaption>user_info_5</figcaption></figure></li><li><p>后来业务方又要访问用户6，用户6 在缓存里没有，需要插入哈希链表中。假设这时缓存容量已经达到上限，必须先删除最近最少被访问的数据，那么位于哈希链表最左端的用户1 就会被删除，然后再把用户6 插入最右端的位置。</p><figure><img src="'+u+`" alt="user_info_6" tabindex="0" loading="lazy"><figcaption>user_info_6</figcaption></figure></li></ol><p>以上，就是 LRU 算法的基本思路。</p><details class="hint-container details"><summary>LRU 算法代码</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">LRUCache</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>limit <span class="token operator">=</span> limit
        self<span class="token punctuation">.</span><span class="token builtin">hash</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        self<span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token boolean">None</span>
        self<span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token boolean">None</span>
    
    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>
        node <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token builtin">hash</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>
        
        <span class="token keyword">if</span> node <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        
        self<span class="token punctuation">.</span>refresh_node<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
        <span class="token keyword">return</span> node<span class="token punctuation">.</span>value
    
    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        node <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token builtin">hash</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>
        
        <span class="token keyword">if</span> node <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token comment"># 如果 key 不存在，插入 key-value</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">hash</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>limit<span class="token punctuation">:</span>
                old_key <span class="token operator">=</span> self<span class="token punctuation">.</span>remove_node<span class="token punctuation">(</span>self<span class="token punctuation">.</span>head<span class="token punctuation">)</span>
                self<span class="token punctuation">.</span><span class="token builtin">hash</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span>old_key<span class="token punctuation">)</span>
            
            node <span class="token operator">=</span> Node<span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>add_node<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span><span class="token builtin">hash</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> node
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token comment"># 如果 key 存在，刷新 key-value</span>
            node<span class="token punctuation">.</span>value <span class="token operator">=</span> value
            self<span class="token punctuation">.</span>refresh_node<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>
        node <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token builtin">hash</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>remove_node<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span><span class="token builtin">hash</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">refresh_node</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 如果访问的是尾节点，无序移动节点</span>
        <span class="token keyword">if</span> node <span class="token operator">==</span> self<span class="token punctuation">.</span>end<span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        
        <span class="token comment"># 移除节点</span>
        self<span class="token punctuation">.</span>remove_node<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
        <span class="token comment"># 重新插入节点</span>
        self<span class="token punctuation">.</span>add_node<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">remove_node</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> self<span class="token punctuation">.</span>head<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> self<span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># 移除唯一的节点</span>
            self<span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token boolean">None</span>
            self<span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">elif</span> node <span class="token operator">==</span> self<span class="token punctuation">.</span>end<span class="token punctuation">:</span>
            <span class="token comment"># 移除节点</span>
            self<span class="token punctuation">.</span>end <span class="token operator">=</span> self<span class="token punctuation">.</span>end<span class="token punctuation">.</span>pre
            self<span class="token punctuation">.</span>end<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">elif</span> node <span class="token operator">==</span> self<span class="token punctuation">.</span>head<span class="token punctuation">:</span>
            <span class="token comment"># 移除头节点</span>
            self<span class="token punctuation">.</span>head <span class="token operator">=</span> self<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span>
            self<span class="token punctuation">.</span>head<span class="token punctuation">.</span>pre <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token comment"># 移除中间节点</span>
            node<span class="token punctuation">.</span>pre<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>pre
            node<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>pre <span class="token operator">=</span> node<span class="token punctuation">.</span>pre
        
        <span class="token keyword">return</span> node<span class="token punctuation">.</span>key
    
    <span class="token keyword">def</span> <span class="token function">add_node</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>end <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>end<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node
            node<span class="token punctuation">.</span>pre <span class="token operator">=</span> self<span class="token punctuation">.</span>end
            node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>
        
        self<span class="token punctuation">.</span>end <span class="token operator">=</span> node
        
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>head <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>head <span class="token operator">=</span> node


<span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>key <span class="token operator">=</span> key
        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value
        self<span class="token punctuation">.</span>pre <span class="token operator">=</span> <span class="token boolean">None</span>
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>


lruCache <span class="token operator">=</span> LRUCache<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
lruCache<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">&#39;001&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;用户1 信息&#39;</span><span class="token punctuation">)</span>
lruCache<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">&#39;002&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;用户2 信息&#39;</span><span class="token punctuation">)</span>
lruCache<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">&#39;003&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;用户3 信息&#39;</span><span class="token punctuation">)</span>
lruCache<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">&#39;004&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;用户4 信息&#39;</span><span class="token punctuation">)</span>
lruCache<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">&#39;005&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;用户5 信息&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>lruCache<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;002&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
lruCache<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">&#39;004&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;用户4 信息更新&#39;</span><span class="token punctuation">)</span>
lruCache<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">&#39;006&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;用户6 信息&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>lruCache<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;001&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>lruCache<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;006&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="a-星寻路算法" tabindex="-1"><a class="header-anchor" href="#a-星寻路算法" aria-hidden="true">#</a> A 星寻路算法</h2><h3 id="关于迷宫寻路的需求" tabindex="-1"><a class="header-anchor" href="#关于迷宫寻路的需求" aria-hidden="true">#</a> 关于迷宫寻路的需求</h3><p>在一个迷宫游戏中，有一些小怪物要攻击主角，现在希望给这些小怪物加上聪明的 <code>AI</code>（Artificial Intelligence，人工智能），让它们可以自动绕过迷宫中的障碍物，寻找到主角的所在。</p><h3 id="解决方法-2" tabindex="-1"><a class="header-anchor" href="#解决方法-2" aria-hidden="true">#</a> 解决方法</h3><p><strong>A 星寻路算法（A*search algorithm）</strong>，是一种用于寻找有效路径的算法。工作过程如下：</p><figure><img src="`+d+'" alt="a_search" tabindex="0" loading="lazy"><figcaption>a_search</figcaption></figure><p>迷宫游戏的场景通常都是由小方格组成的。假设有一个 <code>7 × 5</code> 大小的迷宫，上图中绿色的格子是 <strong>起点</strong>，红色的格子是 <strong>终点</strong>，中间的三个蓝色格子是 <strong>一堵墙。</strong></p><p>AI 角色从起点开始，每一步只能向上、下、左、右移动 <code>1</code> 格，且不能穿越墙壁。最终让 AI 角色用最少的步数到达终点。</p><p>在解决这个问题之前，先引入 <code>2</code> 个集合和 <code>1</code> 个公式。</p><ul><li><p><strong>两个集合如下：</strong></p><ul><li><strong>open_list</strong>：可到达的格子</li><li><strong>close_list</strong>：已到达的格子</li></ul></li><li><p><strong>一个公式如下：</strong></p><ul><li><strong>F = G + H</strong></li></ul></li></ul><p>每一个格子都具有 <code>F</code>、<code>G</code>、<code>H</code> 这三个属性，就像下图这样。</p><figure><img src="'+r+'" alt="a_search_1" tabindex="0" loading="lazy"><figcaption>a_search_1</figcaption></figure><ul><li><strong>G</strong>：从起点走到当前格子的成本也就是已经花费了多少步</li><li><strong>H</strong>：在不考虑障碍的情况下，从当前格子走到目标格子的距离，也就是离目标还有多远</li><li><strong>F</strong>：<code>G</code> 和 <code>H</code> 的综合评估，也就是从起点到达当前格子，再从当前格子到达目标格子的总步数，</li></ul><p>例如：迷宫游戏让 AI 角色从起点开始，且不能穿越墙壁。最终让 AI 角色用最少的步数到达终点。</p><p><strong>A 星寻路算法第一轮：</strong></p><p>第一步，把起点放入 <code>open_list</code>，也就是刚才所说的 <strong>可到达格子</strong> 的集合。</p><figure><img src="'+k+'" alt="a_search_2" tabindex="0" loading="lazy"><figcaption>a_search_2</figcaption></figure><p>第二步，找出 <code>open_list</code> 中 <code>F</code> 值最小的方格作为当前方格。虽然没有直接计算起点方格的 <code>F</code> 值，但此时 <code>open_list</code> 中只有唯一的方格 <code>grid(1, 2)</code>，把当前格子移出 <code>open_list</code> 放入 <code>close_list</code>。代表这个格子 <strong>已到达并检查过了。</strong></p><figure><img src="'+v+'" alt="a_search_3" tabindex="0" loading="lazy"><figcaption>a_search_3</figcaption></figure><p>第三步，找出当前方格（刚刚检查过的格子）上、下、左、右所有可到达的格子，看它们是否在 <code>open_list</code> 或 <code>close_list</code> 当中。如果不在，则将它们加入 <code>open_list</code>，计算出相应的 <code>G</code>、<code>H</code>、<code>F</code> 值，并把当前格子作为它们的 <strong>父节点。</strong></p><figure><img src="'+m+'" alt="a_search_4" tabindex="0" loading="lazy"><figcaption>a_search_4</figcaption></figure><p>在上图中，每个格子的左下方数字是 <code>G</code>，右下方是 <code>H</code>，左上方是 <code>F</code>。一个格子的 “父节点” 代表它的来路，在输出最终路线时会用到。刚才经历的几个步骤是一次 <strong>局部寻路</strong> 的步骤。需要一次又一次重复刚才的第二步和第三步，直到找到终点为止。</p><p><strong>A 星寻路算法第二轮：</strong></p><p>第一步，找出 <code>open_list</code> 中 <code>F</code> 值最小的方格，即方格 <code>grid(2, 2)</code>，将它作为当前方格，并把当前方格移出 <code>open_list</code>，放入 <code>close_list</code>。代表这个格子已到达并检查过了。</p><figure><img src="'+b+'" alt="a_search_5" tabindex="0" loading="lazy"><figcaption>a_search_5</figcaption></figure><p>第二步，找出当前方格上、下、左、右所有可到达的格子，看它们是否在 <code>open_list</code> 或 <code>close_list</code> 当中。如果不在，则将它们加入 <code>open_list</code>，计算出相应的 <code>G</code>、<code>H</code>、<code>F</code> 值，并把当前格子作为它们的 “父节点”。</p><figure><img src="'+g+'" alt="a_search_6" tabindex="0" loading="lazy"><figcaption>a_search_6</figcaption></figure><p>这一次 <code>open_list</code> 只增加了 <code>2</code> 个新格子。因为 <code>grid(3, 2)</code> 是墙壁，不用考虑，而 <code>grid(1, 2)</code> 在 <code>close_list</code> 中，说明已经检查过了，也不用考虑。</p><p><strong>A 星寻路算法第三轮：</strong></p><p>第一步，找出 <code>open_list</code> 中 <code>F</code> 值最小的方格。由于此时有多个方格的 <code>F</code> 值相等，任意选择一个即可，如将 <code>grid(2, 3)</code> 作为当前方格，并把当前方格移出 <code>open_list</code>，放入 <code>close_list</code>。代表这个格子已到达并检查过了。</p><figure><img src="'+_+'" alt="a_search_7" tabindex="0" loading="lazy"><figcaption>a_search_7</figcaption></figure><p>第二步，找出当前方格上、下、左、右所有可到达的格子，看它们是否在 <code>open_list</code> 或 <code>close_list</code> 当中。如果不在，则将它们加入 <code>open_list</code>，计算出相应的 <code>G</code>、<code>H</code>、<code>F</code> 值，并把当前格子作为它们的 “父节点”。</p><figure><img src="'+y+'" alt="a_search_8" tabindex="0" loading="lazy"><figcaption>a_search_8</figcaption></figure><p>剩下的操作就是以前面的方式继续迭代，直到 <code>open_list</code> 中出现终点方格为止。以下操作仅用图片描述，方格中的数字表示 <code>F</code> 值：</p><figure><img src="'+f+`" alt="a_search_9" tabindex="0" loading="lazy"><figcaption>a_search_9</figcaption></figure><p>像这样一步一步来，当终点出现在 <code>open_list</code> 中时，寻路之旅就结束了。只要顺着终点方格找到它的 “父节点”，再找到 “父节点” 的 “父节点”……如此依次回溯，就能找到一条最佳路径了。</p><p>这就是 <strong>A 星寻路算法</strong> 的基本思想。像这样以估值高低来决定搜索优先次序的方法，被称为 <strong>启发式搜索。</strong></p><details class="hint-container details"><summary>A 星寻路算法代码</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">a_star_search</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 待访问的格子</span>
    open_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment"># 已访问的格子</span>
    close_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment"># 把起点加入 open_list</span>
    open_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>start<span class="token punctuation">)</span>

    <span class="token comment"># 主循环，每一轮检查一个当前方格节点</span>
    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>open_list<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token comment"># 在 open_list 中查找 F 值最小的节点作为当前方格节点</span>
        current_grid <span class="token operator">=</span> find_min_gird<span class="token punctuation">(</span>open_list<span class="token punctuation">)</span>
        <span class="token comment"># 将当前方格节点从 open_list 中移除</span>
        open_list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>current_grid<span class="token punctuation">)</span>
        <span class="token comment"># 将当前方格节点进入 close_list</span>
        close_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current_grid<span class="token punctuation">)</span>
        <span class="token comment"># 找到所有邻近节点</span>
        neighbors <span class="token operator">=</span> find_neighbors<span class="token punctuation">(</span>current_grid<span class="token punctuation">,</span> open_list<span class="token punctuation">,</span> close_list<span class="token punctuation">)</span>

        <span class="token keyword">for</span> grid <span class="token keyword">in</span> neighbors<span class="token punctuation">:</span>
            <span class="token keyword">if</span> grid <span class="token keyword">not</span> <span class="token keyword">in</span> open_list<span class="token punctuation">:</span>
                <span class="token comment"># 邻近节点不在 open_list 中，标记父节点 G、H、F，并放入 open_list</span>
                grid<span class="token punctuation">.</span>init_grid<span class="token punctuation">(</span>current_grid<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
                open_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>grid<span class="token punctuation">)</span>
        
        <span class="token comment"># 如果终点在 open_list 中，直接返回终点格子</span>
        <span class="token keyword">for</span> grid <span class="token keyword">in</span> open_list<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">.</span>x <span class="token operator">==</span> end<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>grid<span class="token punctuation">.</span>y <span class="token operator">==</span> end<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> grid
    
    <span class="token comment"># open_list 用尽，仍然找不到终点，说明终点不可到达，返回空</span>
    <span class="token keyword">return</span> <span class="token boolean">None</span>


<span class="token keyword">def</span> <span class="token function">find_min_gird</span><span class="token punctuation">(</span>open_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    temp_grid <span class="token operator">=</span> open_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> grid <span class="token keyword">in</span> open_list<span class="token punctuation">:</span>
        <span class="token keyword">if</span> grid<span class="token punctuation">.</span>f <span class="token operator">&lt;</span> temp_grid<span class="token punctuation">.</span>f<span class="token punctuation">:</span>
            temp_grid <span class="token operator">=</span> grid
    
    <span class="token keyword">return</span> temp_grid


<span class="token keyword">def</span> <span class="token function">find_neighbors</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> open_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> close_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    grid_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">if</span> is_valid_grid<span class="token punctuation">(</span>grid<span class="token punctuation">.</span>x<span class="token punctuation">,</span> grid<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> open_list<span class="token punctuation">,</span> close_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
        grid_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Grid<span class="token punctuation">(</span>grid<span class="token punctuation">.</span>x<span class="token punctuation">,</span> grid<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">if</span> is_valid_grid<span class="token punctuation">(</span>grid<span class="token punctuation">.</span>x<span class="token punctuation">,</span> grid<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> open_list<span class="token punctuation">,</span> close_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
        grid_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Grid<span class="token punctuation">(</span>grid<span class="token punctuation">.</span>x<span class="token punctuation">,</span> grid<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">if</span> is_valid_grid<span class="token punctuation">(</span>grid<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">.</span>y<span class="token punctuation">,</span> open_list<span class="token punctuation">,</span> close_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
        grid_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Grid<span class="token punctuation">(</span>grid<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">if</span> is_valid_grid<span class="token punctuation">(</span>grid<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">.</span>y<span class="token punctuation">,</span> open_list<span class="token punctuation">,</span> close_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
        grid_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Grid<span class="token punctuation">(</span>grid<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> grid_list


<span class="token keyword">def</span> <span class="token function">is_valid_grid</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> open_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> close_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 是否超过边界</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>MAZE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>MAZE<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    
    <span class="token comment"># 是否有障碍物</span>
    <span class="token keyword">if</span> MAZE<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    
    <span class="token comment"># 是否已经在 open_list 中</span>
    <span class="token keyword">if</span> contain_grid<span class="token punctuation">(</span>open_list<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    
    <span class="token comment"># 是否已经在 close_list 中</span>
    <span class="token keyword">if</span> contain_grid<span class="token punctuation">(</span>close_list<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    
    <span class="token keyword">return</span> <span class="token boolean">True</span>


<span class="token keyword">def</span> <span class="token function">contain_grid</span><span class="token punctuation">(</span>grids<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> grid <span class="token keyword">in</span> grids<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">.</span>x <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>grid<span class="token punctuation">.</span>y <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
    
    <span class="token keyword">return</span> <span class="token boolean">False</span>


<span class="token keyword">class</span> <span class="token class-name">Grid</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y
        self<span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>g <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>h <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token boolean">None</span>
    
    <span class="token keyword">def</span> <span class="token function">init_grid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>parent <span class="token operator">=</span> parent

        <span class="token keyword">if</span> parent <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>g <span class="token operator">=</span> parent<span class="token punctuation">.</span>g <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>g <span class="token operator">=</span> <span class="token number">1</span>
        
        self<span class="token punctuation">.</span>h <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>x <span class="token operator">-</span> end<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>y <span class="token operator">-</span> end<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>f <span class="token operator">=</span> self<span class="token punctuation">.</span>g <span class="token operator">+</span> self<span class="token punctuation">.</span>h


<span class="token comment"># 迷宫地图</span>
MAZE <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token comment"># 设置起点和终点</span>
start_grid <span class="token operator">=</span> Grid<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
end_grid <span class="token operator">=</span> Grid<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>

<span class="token comment"># 搜索迷宫终点</span>
result_grid <span class="token operator">=</span> a_star_search<span class="token punctuation">(</span>start_grid<span class="token punctuation">,</span> end_grid<span class="token punctuation">)</span>

<span class="token comment"># 回溯迷宫路径</span>
path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">while</span> result_grid <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Grid<span class="token punctuation">(</span>result_grid<span class="token punctuation">.</span>x<span class="token punctuation">,</span> result_grid<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
    result_grid <span class="token operator">=</span> result_grid<span class="token punctuation">.</span>parent

<span class="token comment"># 输出迷宫和路径，路径用星号表示</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>MAZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>MAZE<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> contain_grid<span class="token punctuation">(</span>path<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;*, &#39;</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>MAZE<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;, &#39;</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="实现红包算法" tabindex="-1"><a class="header-anchor" href="#实现红包算法" aria-hidden="true">#</a> 实现红包算法</h2><h3 id="关于钱的需求" tabindex="-1"><a class="header-anchor" href="#关于钱的需求" aria-hidden="true">#</a> 关于钱的需求</h3><p>这个功能类似于微信群发红包的功能。例如，：一个人在群里发了 <code>1</code> 个 <code>100</code> 元的红包，群里有 <code>10</code> 个人一起来抢红包，每人抢到的金额随机分配。</p><p><strong>红包功能需要满足以下规则：</strong></p><ul><li>所有人抢到的金额之和要等于红包金额，不能多也不能少</li><li>每个人至少抢到 <code>1</code> 分钱</li><li>要保证红包拆分的金额尽可能分布均衡，不要出现两极分化太严重的情况</li></ul><h3 id="解决方法-3" tabindex="-1"><a class="header-anchor" href="#解决方法-3" aria-hidden="true">#</a> 解决方法</h3><p><strong>方法1：</strong></p><p>为了避免出现高并发引起的一些问题，每个人领取红包的金额不能在领的时候才计算，必须先计算好每个红包拆出的金额，并把它们放在一个队列里，领取红包的用户要在队列中找到属于自己的那一份。</p><p><strong>每次拆分的金额 = 随机区间 [1分, 剩余金额 - 1分]</strong></p><p>例如：如果分发的红包是 <code>100</code> 元，有 <code>5</code> 个人抢，那么队列第一个位置的金额在 <code>0.01</code> 到 <code>99.99</code> 元之间取随机数。</p><ul><li>假设第一个位置随机得到 <code>20</code> 元，队列第二个位置的金额要在 <code>0.01</code> 到 <code>79.99</code> 元之间取随机数</li><li>假设第二个位置随机得到 <code>30</code> 元，队列第三个位置的金额要在 <code>0.01</code> 到 <code>49.99</code> 元之间取随机数</li><li>假设第三个位置随机得到 <code>15</code> 元，队列第四个位置的金额要在 <code>0.01</code> 到 <code>34.99</code> 元之间取随机数</li><li>假设第四个位置随机得到 <code>22</code> 元，那么第五个位置自然是 <code>35 - 22 = 13</code> 元</li></ul><p>以这样的方式来拆分红包的话，前面拆分的金额会很大，后面的金额会越来越小！</p><p><strong>方法2：</strong></p><p><strong>二倍均值法</strong>。假设剩余红包金额为 <code>m</code> 元，剩余人数为 <code>n</code>，那么有如下公式：</p><p><strong>每次抢到的金额 = 随机区间 [0.01, m / n × 2 - 0.01] 元</strong></p><p>这个公式，保证了每次随机金额的平均值是相等的，不会因为抢红包的先后顺序而造成不公平。</p><p>例如：假设有 <code>5</code> 个人，红包总额为 <code>100</code> 元。</p><p><code>100 ÷ 5 × 2 = 40</code>，所以第 <code>1</code> 个人抢到的金额的随机范围是 <code>[0.01，39.99]</code> 元，在正常情况下，平均可以抢到 <code>20</code> 元。</p><p>假设第 <code>1</code> 个人随机抢到了 <code>20</code> 元，那么剩余金额是 <code>80</code> 元。</p><p><code>80 ÷ 4 × 2 = 40</code>，所以第 <code>2</code> 个人抢到的金额的随机范围同样是 <code>[0.01，39.99]</code> 元，在正常的情况下，还是平均可以抢到 <code>20</code> 元。</p><p>假设第 <code>2</code> 个人随机抢到了 <code>20</code> 元，那么剩余金额是 <code>60</code> 元。</p><p><code>60 ÷ 3 × 2 = 40</code>，所以第 <code>3</code> 个人抢到的金额的随机范围同样是 <code>[0.01，39.99]</code> 元，平均可以抢到 <code>20</code> 元。</p><p>以此类推，每一次抢到金额的随机范围的均值都是相等的。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>第 <code>1</code> 次随机的金额有一半概率超过 <code>20</code> 元，使得后面的随机金额上限不足 <code>39.99</code> 元；但相应地，第 <code>1</code> 次随机的金额同样也有一半的概率小于 <code>20</code> 元，使得后面的随机金额上限超过 <code>39.99</code> 元。因此从整体来看，第 <code>2</code> 次随机的金额平均范围仍然是 <code>[0.01，39.99]</code> 元。</p><p>这个方法虽然公平，但也存在局限性，即除最后一次外，其他每次抢到的金额都要小于剩余人均金额的 <code>2</code> 倍，并不是完全自由地随机抢红包。</p></div><details class="hint-container details"><summary>二倍均值法代码</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random

<span class="token keyword">def</span> <span class="token function">divide_red_package</span><span class="token punctuation">(</span>total_amount<span class="token punctuation">,</span> total_people_num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    amount_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    rest_amount <span class="token operator">=</span> total_amount
    rest_people_num <span class="token operator">=</span> total_people_num

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> total_people_num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 随机范围：[1, 剩余人均金额的两倍)，左闭右开</span>
        amount <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>rest_amount <span class="token operator">/</span> rest_people_num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        rest_amount <span class="token operator">-=</span> amount
        rest_people_num <span class="token operator">-=</span> <span class="token number">1</span>
        amount_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>amount<span class="token punctuation">)</span>
    
    amount_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rest_amount<span class="token punctuation">)</span>
    <span class="token keyword">return</span> amount_list


my_amount_list <span class="token operator">=</span> divide_red_package<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> my_amount <span class="token keyword">in</span> my_amount_list<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;抢到金额：%.2f&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>my_amount <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p><strong>方法3：</strong></p><p><strong>线段切割法</strong>。可以把红包总金额想象成一条很长的线段，而每个人抢到的金额，是这条主线段所拆分出的若干子线段。</p><p>每一条子线段的长度，由 “切割点” 来决定。当 <code>n</code> 个人一起抢红包时，就需要确定 <code>n - 1</code> 个切割点。</p><p>因此，当 <code>n</code> 个人一起抢总金额为 <code>m</code> 元的红包时，需要做 <code>n - 1</code> 次随机运算，以此确定 <code>n - 1</code> 个切割点。随机的范围区间是 <code>[0.01, m - 0.01]</code>。</p><p>当所有切割点确定以后，子线段的长度也随之确定。此时红包的拆分金额，就等同于每个子线段的长度。</p><p>这就是线段切割法的思路，在这里需要注意以下两点：</p><ol><li><p>注意随机切割点出现重复</p></li><li><p>尽可能降低时间复杂度和空间复杂度</p></li></ol>`,141),w=[x];function B(A,N){return s(),a("div",null,w)}const q=n(h,[["render",B],["__file","practical_application.html.vue"]]);export{q as default};
