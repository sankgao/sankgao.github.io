import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as l,f as a}from"./app-fea48366.js";const d={},r=a('<p>HTML <code>&lt;canvas&gt;</code> 标签用于通过脚本（通常是 JavaScript）动态绘制图形。</p><h2 id="颜色、样式和阴影" tabindex="-1"><a class="header-anchor" href="#颜色、样式和阴影" aria-hidden="true">#</a> 颜色、样式和阴影</h2><table><thead><tr><th style="text-align:center;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">fillStyle</td><td style="text-align:left;">设置或返回用于填充绘画的颜色、渐变或模式</td></tr><tr><td style="text-align:center;">strokeStyle</td><td style="text-align:left;">设置或返回用于笔触的颜色、渐变或模式</td></tr><tr><td style="text-align:center;">shadowColor</td><td style="text-align:left;">设置或返回用于阴影的颜色</td></tr><tr><td style="text-align:center;">shadowBlur</td><td style="text-align:left;">设置或返回用于阴影的模糊级别</td></tr><tr><td style="text-align:center;">shadowOffsetX</td><td style="text-align:left;">设置或返回阴影距形状的水平距离</td></tr><tr><td style="text-align:center;">shadowOffsetY</td><td style="text-align:left;">设置或返回阴影距形状的垂直距离</td></tr></tbody></table><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">createLinearGradient()</td><td style="text-align:left;">创建线性渐变（用在画布内容上）</td></tr><tr><td style="text-align:center;">createPattern()</td><td style="text-align:left;">在指定的方向上重复指定的元素</td></tr><tr><td style="text-align:center;">createRadialGradient()</td><td style="text-align:left;">创建放射状或环形的渐变（用在画布内容上）</td></tr><tr><td style="text-align:center;">addColorStop()</td><td style="text-align:left;">规定渐变对象中的颜色和停止位置</td></tr></tbody></table><h2 id="线条样式" tabindex="-1"><a class="header-anchor" href="#线条样式" aria-hidden="true">#</a> 线条样式</h2><table><thead><tr><th style="text-align:center;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">lineCap</td><td style="text-align:left;">设置或返回线条的结束端点样式</td></tr><tr><td style="text-align:center;">lineJoin</td><td style="text-align:left;">设置或返回两条线相交时，所创建的拐角类型</td></tr><tr><td style="text-align:center;">lineWidth</td><td style="text-align:left;">设置或返回当前的线条宽度</td></tr><tr><td style="text-align:center;">miterLimit</td><td style="text-align:left;">设置或返回最大斜接长度</td></tr></tbody></table><h2 id="矩形" tabindex="-1"><a class="header-anchor" href="#矩形" aria-hidden="true">#</a> 矩形</h2><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">rect()</td><td style="text-align:left;">创建矩形</td></tr><tr><td style="text-align:center;">fillRect()</td><td style="text-align:left;">绘制 “被填充” 的矩形</td></tr><tr><td style="text-align:center;">strokeRect()</td><td style="text-align:left;">绘制矩形（无填充）</td></tr><tr><td style="text-align:center;">clearRect()</td><td style="text-align:left;">在给定的矩形内清除指定的像素</td></tr></tbody></table><h2 id="路径" tabindex="-1"><a class="header-anchor" href="#路径" aria-hidden="true">#</a> 路径</h2><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">fill()</td><td style="text-align:left;">填充当前绘图（路径）</td></tr><tr><td style="text-align:center;">stroke()</td><td style="text-align:left;">绘制已定义的路径</td></tr><tr><td style="text-align:center;">beginPath()</td><td style="text-align:left;">起始一条路径，或重置当前路径</td></tr><tr><td style="text-align:center;">moveTo()</td><td style="text-align:left;">把路径移动到画布中的指定点，不创建线条</td></tr><tr><td style="text-align:center;">closePath()</td><td style="text-align:left;">创建从当前点回到起始点的路径</td></tr><tr><td style="text-align:center;">lineTo()</td><td style="text-align:left;">添加一个新点，然后在画布中创建从该点到最后指定点的线条</td></tr><tr><td style="text-align:center;">clip()</td><td style="text-align:left;">从原始画布剪切任意形状和尺寸的区域</td></tr><tr><td style="text-align:center;">quadraticCurveTo()</td><td style="text-align:left;">创建二次贝塞尔曲线</td></tr><tr><td style="text-align:center;">bezierCurveTo()</td><td style="text-align:left;">创建三次方贝塞尔曲线</td></tr><tr><td style="text-align:center;">arc()</td><td style="text-align:left;">创建弧或曲线（用于创建圆形或部分圆）</td></tr><tr><td style="text-align:center;">arcTo()</td><td style="text-align:left;">创建两切线之间的弧或曲线</td></tr><tr><td style="text-align:center;">isPointInPath()</td><td style="text-align:left;">如果指定的点位于当前路径中，则返回 true，否则返回 false</td></tr></tbody></table><h2 id="转换" tabindex="-1"><a class="header-anchor" href="#转换" aria-hidden="true">#</a> 转换</h2><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">scale()</td><td style="text-align:left;">缩放当前绘图至更大或更小</td></tr><tr><td style="text-align:center;">rotate()</td><td style="text-align:left;">旋转当前绘图</td></tr><tr><td style="text-align:center;">translate()</td><td style="text-align:left;">重新映射画布上的（<code>0,0</code>）位置</td></tr><tr><td style="text-align:center;">transform()</td><td style="text-align:left;">替换绘图的当前转换矩阵</td></tr><tr><td style="text-align:center;">setTransform()</td><td style="text-align:left;">将当前转换重置为单位矩阵。然后运行 transform()</td></tr></tbody></table><h2 id="文本" tabindex="-1"><a class="header-anchor" href="#文本" aria-hidden="true">#</a> 文本</h2><table><thead><tr><th style="text-align:center;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">font</td><td style="text-align:left;">设置或返回文本内容的当前字体属性</td></tr><tr><td style="text-align:center;">textAlign</td><td style="text-align:left;">设置或返回文本内容的当前对齐方式</td></tr><tr><td style="text-align:center;">textBaseline</td><td style="text-align:left;">设置或返回在绘制文本时使用的当前文本基线</td></tr></tbody></table><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">fillText()</td><td style="text-align:left;">在画布上绘制 “被填充的” 文本</td></tr><tr><td style="text-align:center;">strokeText()</td><td style="text-align:left;">在画布上绘制文本（无填充）</td></tr><tr><td style="text-align:center;">measureText()</td><td style="text-align:left;">返回包含指定文本宽度的对象</td></tr></tbody></table><h2 id="图像绘制" tabindex="-1"><a class="header-anchor" href="#图像绘制" aria-hidden="true">#</a> 图像绘制</h2><table><thead><tr><th style="text-align:center;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">drawImage()</td><td style="text-align:left;">向画布上绘制图像、画布或视频</td></tr></tbody></table><h2 id="像素操作" tabindex="-1"><a class="header-anchor" href="#像素操作" aria-hidden="true">#</a> 像素操作</h2><table><thead><tr><th style="text-align:center;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">width</td><td style="text-align:left;">返回 ImageData 对象的宽度</td></tr><tr><td style="text-align:center;">height</td><td style="text-align:left;">返回 ImageData 对象的高度</td></tr><tr><td style="text-align:center;">data</td><td style="text-align:left;">返回一个对象，其包含指定的 ImageData 对象的图像数据</td></tr></tbody></table><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">createImageData()</td><td style="text-align:left;">创建新的、空白的 ImageData 对象</td></tr><tr><td style="text-align:center;">getImageData()</td><td style="text-align:left;">返回 ImageData 对象，该对象为画布上指定的矩形复制像素数据</td></tr><tr><td style="text-align:center;">putImageData()</td><td style="text-align:left;">把图像数据（从指定的 ImageData 对象）放回画布上</td></tr></tbody></table><h2 id="合成" tabindex="-1"><a class="header-anchor" href="#合成" aria-hidden="true">#</a> 合成</h2><table><thead><tr><th style="text-align:center;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">globalAlpha</td><td style="text-align:left;">设置或返回绘图的当前 alpha 或透明值</td></tr><tr><td style="text-align:center;">globalCompositeOperation</td><td style="text-align:left;">设置或返回新图像如何绘制到已有的图像上</td></tr></tbody></table><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">save()</td><td style="text-align:left;">保存当前环境的状态</td></tr><tr><td style="text-align:center;">restore()</td><td style="text-align:left;">返回之前保存过的路径状态和属性</td></tr><tr><td style="text-align:center;">createEvent()</td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">getContext()</td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">toDataURL()</td><td style="text-align:left;"></td></tr></tbody></table>',24),n=[r];function i(s,y){return e(),l("div",null,n)}const g=t(d,[["render",i],["__file","canvas.html.vue"]]);export{g as default};
