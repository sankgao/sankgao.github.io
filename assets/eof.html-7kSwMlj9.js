import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as a,f as l}from"./app-_83A8qgi.js";const s={},n=l(`<p><code>cat &gt; test.txt &lt;&lt;&quot;EOF&quot;</code>、<code>cat &lt;&lt;EOF &gt; test.txt</code>、<code>cat &gt; test.txt &lt;&lt;-EOF</code> 区别。</p><h2 id="核心概念-here-document" tabindex="-1"><a class="header-anchor" href="#核心概念-here-document" aria-hidden="true">#</a> 核心概念 Here Document</h2><p>这三个命令都使用了 Here Document（此处文档）语法，它允许在脚本中直接嵌入一段文本，并将其作为标准输入传递给一个命令。<code>EOF</code>（End Of File，或任何你指定的词）是这段文本的开始和结束标记。</p><p><code>&lt;&lt;</code> 是 Here Document 的关键操作符。</p><h2 id="cat-test-txt-eof" tabindex="-1"><a class="header-anchor" href="#cat-test-txt-eof" aria-hidden="true">#</a> cat &gt; test.txt &lt;&lt; &quot;EOF&quot;</h2><p>分解：</p><ul><li><code>cat &gt; test.txt</code>：将 cat 命令的输出重定向到 test.txt 文件（覆盖写入）</li><li><code>&lt;&lt; &quot;EOF&quot;</code>：使用带引号的 Here Document</li></ul><p>关键特性：</p><ul><li>引号的作用：禁用文本内容中的变量替换和命令替换</li><li>文本中的所有 <code>$变量</code>、<code>$(命令)</code> 等都会被当作普通文字处理</li></ul><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;World&quot;</span>
<span class="token function">cat</span> <span class="token operator">&gt;</span> test.txt <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;EOF&quot;
Hello, $name!
Today is $(date).
User is $USER
EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>test.txt 内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Hello, $name!
Today is $(date).
User is $USER
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有特殊字符都原样保留，没有被替换。</p><h2 id="cat-eof-test-txt" tabindex="-1"><a class="header-anchor" href="#cat-eof-test-txt" aria-hidden="true">#</a> cat &lt;&lt; EOF &gt; test.txt</h2><p>分解：</p><ul><li><code>cat &lt;&lt; EOF</code>：使用不带引号的 Here Document</li><li><code>&gt; test.txt</code>：将输出重定向到 test.txt 文件</li></ul><p>关键特性：</p><ul><li>启用变量和命令替换</li><li>文本中的 <code>$变量</code>、<code>$(命令)</code> 会被 Shell 解析和替换</li></ul><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;World&quot;</span>
<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;</span> test.txt</span>
Hello, <span class="token variable">$name</span>!
Today is <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span><span class="token variable">)</span></span>.
User is <span class="token environment constant">$USER</span>
EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>test.txt 内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Hello, World!
Today is Wed Aug 27 10:30:45 CST 2025.
User is root
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有变量和命令都被替换为实际值。</p><h2 id="cat-test-txt-eof-1" tabindex="-1"><a class="header-anchor" href="#cat-test-txt-eof-1" aria-hidden="true">#</a> cat &gt; test.txt &lt;&lt;- EOF</h2><p>分解：</p><ul><li><code>cat &gt; test.txt</code>：输出重定向到文件</li><li><code>&lt;&lt;- EOF</code>：使用带短横线的 Here Document</li></ul><p>关键特性：</p><ul><li><code>&lt;&lt;-</code> 的作用：忽略 Here Document 内容中每行开头的制表符（Tab）</li><li>变量替换仍然启用（因为标记没有加引号）</li><li>允许在脚本中为了代码美观而缩进，但不会将缩进字符写入文件</li><li>标记 <code>EOF</code> 本身前面的制表符也会被 <code>&lt;&lt;-</code> 忽略</li></ul><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;World&quot;</span>
<span class="token function">cat</span> <span class="token operator">&gt;</span> test.txt <span class="token operator">&lt;&lt;-</span> <span class="token string">EOF
	Hello, <span class="token variable">$name</span>!
	Today is <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span><span class="token variable">)</span></span>.
	User is <span class="token environment constant">$USER</span>
EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>test.txt 内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Hello, World!
Today is Wed Aug 27 10:30:45 CST 2025.
User is root
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>行首的制表符被移除，但变量仍然被替换。</p><h2 id="对比总结" tabindex="-1"><a class="header-anchor" href="#对比总结" aria-hidden="true">#</a> 对比总结</h2><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;"><code>cat &gt; test.txt &lt;&lt; &quot;EOF&quot;</code></th><th style="text-align:left;"><code>cat &lt;&lt; EOF &gt; test.txt</code></th><th style="text-align:left;"><code>cat &gt; test.txt &lt;&lt;- EOF</code></th></tr></thead><tbody><tr><td style="text-align:left;">变量替换</td><td style="text-align:left;">❌ 禁用（原样输出）</td><td style="text-align:left;">✅ 启用（动态替换）</td><td style="text-align:left;">✅ 启用（动态替换）</td></tr><tr><td style="text-align:left;">忽略制表符</td><td style="text-align:left;">❌ 不忽略</td><td style="text-align:left;">❌ 不忽略</td><td style="text-align:left;">✅ 忽略行首制表符</td></tr><tr><td style="text-align:left;">语法顺序</td><td style="text-align:left;">先指定输出文件</td><td style="text-align:left;">后指定输出文件</td><td style="text-align:left;">先指定输出文件</td></tr><tr><td style="text-align:left;">主要用途</td><td style="text-align:left;">写入模板、保留特殊字符</td><td style="text-align:left;">生成动态配置文件</td><td style="text-align:left;">美化脚本缩进+动态内容</td></tr></tbody></table><h2 id="重要注意事项" tabindex="-1"><a class="header-anchor" href="#重要注意事项" aria-hidden="true">#</a> 重要注意事项</h2><ol><li><code>&lt;&lt;-</code> 只忽略制表符（Tab），不忽略空格。</li><li>标记 <code>EOF</code> 本身前面的制表符也会被 <code>&lt;&lt;-</code> 忽略。</li><li>功能上，<code>cat &gt; file &lt;&lt; EOF</code> 和 <code>cat &lt;&lt; EOF &gt; file</code> 完全等价，只是个人编码风格偏好。</li><li>选择哪种方式取决于你的需求： <ul><li>需要原样保留文本？用 <code>&lt;&lt;&quot;EOF&quot;</code></li><li>需要变量替换？用 <code>&lt;&lt;EOF</code> 或 <code>&lt;&lt;-EOF</code></li><li>需要美化脚本缩进？用 <code>&lt;&lt;-EOF</code></li></ul></li></ol><h2 id="eof-和-eof" tabindex="-1"><a class="header-anchor" href="#eof-和-eof" aria-hidden="true">#</a> &lt;&lt;-EOF 和 &lt;&lt;- EOF</h2><ul><li><code>&lt;&lt;-EOF</code> 和 <code>&lt;&lt;- EOF</code> 在功能上完全没有区别，两者是等价的</li><li><code>&lt;&lt;-</code> 是一个整体的操作符，后面的空格被视为分隔符，而不是操作符的一部分</li></ul>`,40),d=[n];function i(o,c){return e(),a("div",null,d)}const u=t(s,[["render",i],["__file","eof.html.vue"]]);export{u as default};
