import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o,c,b as n,e as s,d as l,f as a}from"./app-WDM5Kxho.js";const i={},u=a(`<p>函数不属于任何类，可以直接调用。例如：<code>list(iter)</code></p><h2 id="print" tabindex="-1"><a class="header-anchor" href="#print" aria-hidden="true">#</a> print()</h2><p><code>print()</code> 内置函数，用于输出指定内容，默认 <code>print()</code> 输出内容后换行，如果要在一行显示，需在 <code>print()</code> 中用 <code>,</code> 号分割。</p><p><strong>语法格式</strong>：<code>print(objects, sep=&#39; &#39;, end=&#39;\\n&#39;, file=sys.stdout)</code></p><ul><li><strong>objects</strong>：表示输出的对象</li><li><strong>sep</strong>：用来间隔多个对象。默认是空格</li><li><strong>end</strong>：用来设定以什么结尾。默认值是换行符 <code>\\n</code></li><li><strong>file</strong>：要写入的文件对象</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>print()</code> 默认输出后，会进行换行 <code>\\n</code>，如果想更改，可以使用 <code>end=&quot;&quot;</code> 进行更改</p><p><code>print()</code> 括号内打印字符时需要用单引号（<code>&#39;</code>）或双引号（<code>&quot;</code>）引用，引号必须是英文下的引号，中文会报语法错误</p></div><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">10</span>
y <span class="token operator">=</span> <span class="token number">20</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&quot;; &quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
Hello<span class="token punctuation">,</span> World!
<span class="token number">10</span> <span class="token number">20</span>
<span class="token number">10</span><span class="token punctuation">;</span> <span class="token number">20</span>
<span class="token number">10.</span><span class="token punctuation">.</span><span class="token number">.20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="input" tabindex="-1"><a class="header-anchor" href="#input" aria-hidden="true">#</a> input()</h2><p><code>input()</code> 内置函数，用于输入指定内容，输出为字符串类型。</p><p><strong>语法格式</strong>：<code>input(&quot;object&quot;)</code></p><ul><li><strong>object</strong>：表示用于输入提示的内容</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入密码： &quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 将输入的内容赋值给 a</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果。输入任意字符，如：123</span>
请输入密码： <span class="token number">123</span>
<span class="token number">123</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;str&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="len" tabindex="-1"><a class="header-anchor" href="#len" aria-hidden="true">#</a> len()</h2><p><code>len()</code> 内置函数，用于返回字符串、列表、字典、元组等的长度。</p><p><strong>语法格式</strong>：<code>len(object)</code></p><ul><li><strong>object</strong>：要计算的字符串、列表、字典、元组等的变量名</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>标点符号和空格也算一个长度</p></div><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：13</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="range" tabindex="-1"><a class="header-anchor" href="#range" aria-hidden="true">#</a> range()</h2><p><code>range()</code> 内置函数，用于遍历数字序列。</p><p><strong>语法格式</strong>：<code>range(start, stop, step)</code></p><ul><li><strong>start</strong>：值的是开始下标。<code>range</code> 序列里面的所有元素都有下标，第一个元素的下标是 <code>0</code>，所以，默认是从 <code>0</code> 开始</li><li><strong>stop</strong>：是结束位置。结束的位置下标为（元素个数 <code>-1</code>）。例如：<code>range</code> 里面有 <code>4</code> 个元素，那么结束下标最大为 <code>3</code>，大于 <code>3</code> 则跳出 <code>range</code></li><li><strong>step</strong>：是步长，如果 <code>step</code> 是 <code>2</code>，那么每次会隔开 <code>1</code> 个元素，默认步长为 <code>1</code>，即每个元素都会取到</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token number">0</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> type()</h2><p><code>type()</code> 内置函数，如果您只有第一个参数则返回对象的类型，三个参数返回新的类型对象。</p><p><strong>语法格式</strong>：<code>class type(name, bases, dict)</code></p><ul><li><strong>name</strong>：类的名称</li><li><strong>bases</strong>：基类的元组</li><li><strong>dict</strong>：字典，类内定义的命名空间变量</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token number">20</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;class &#39;int&#39;&gt;</span>


<span class="token keyword">class</span> <span class="token class-name">X</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> <span class="token number">1</span>


X <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">&#39;X&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;class &#39;__main__.X&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="isinstance" tabindex="-1"><a class="header-anchor" href="#isinstance" aria-hidden="true">#</a> isinstance()</h2><p><code>isinstance()</code> 内置函数，用来判断数据类型是否是相对应的类型，它返回的是布尔值（<code>True</code> 或 <code>False</code>）。</p><p><strong>语法格式</strong>：<code>isinstance(object, type)</code></p><ul><li><strong>object</strong>：表示输入的对象</li><li><strong>type</strong>：判断的类型</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token number">20</span>
n <span class="token operator">=</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="id" tabindex="-1"><a class="header-anchor" href="#id" aria-hidden="true">#</a> id()</h2><p><code>id()</code> 内置函数，用于返回变量所指的内存地址。</p><p><strong>语法格式</strong>：<code>id(object)</code></p><ul><li><strong>object</strong>：表示输入的对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> num01 <span class="token operator">=</span> <span class="token number">20</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2689225392976</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>num01<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2689225392976</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> list()</h2><p><code>list()</code> 内置函数，用于将序列转换为列表。</p><p><strong>语法格式</strong>：<code>list(object)</code></p><ul><li><strong>object</strong>：待转换为列表的数据类型</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span>
b <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;class &#39;set&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[10, 20, 30]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;class &#39;list&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tuple" tabindex="-1"><a class="header-anchor" href="#tuple" aria-hidden="true">#</a> tuple()</h2><p><code>tuple()</code> 内置函数，用于将序列转换为元组。</p><p><strong>语法格式</strong>：<code>tuple(object)</code></p><ul><li><strong>object</strong>：待转换为元组的数据类型</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>
b <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;class &#39;list&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：(10, 20, 30)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;class &#39;tuple&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="str" tabindex="-1"><a class="header-anchor" href="#str" aria-hidden="true">#</a> str()</h2><p><code>str()</code> 内置函数，用于将序列转换为字符串。</p><p><strong>语法格式</strong>：<code>str(object)</code></p><ul><li><strong>object</strong>：待转换为字符串的数据类型</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">2135</span>
b <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;class &#39;int&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2135</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;class &#39;str&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bool" tabindex="-1"><a class="header-anchor" href="#bool" aria-hidden="true">#</a> bool()</h2><p><code>bool()</code> 内置函数，用于评估任何值，并返回 <code>True</code> 和 <code>False</code>。</p><p><strong>语法格式</strong>：<code>bool(object)</code></p><ul><li><strong>object</strong>：待转换为布尔值的数据类型</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>任何字符串都是 <code>True</code>，空字符串除外。任何数字都是 <code>True</code>，除了 <code>0</code>。任何列表、元组、集合和字典都是 <code>True</code>，空的除外。</li><li><code>False</code> 除了空值（例如：<code>()</code>、<code>[]</code>、<code>{}</code>、<code>&quot;&quot;</code>、 数字 <code>0</code>）之外，计算为 <code>None</code> 的值。当然，结果为 <code>False</code>。</li></ul></div><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="max" tabindex="-1"><a class="header-anchor" href="#max" aria-hidden="true">#</a> max()</h2><p><code>max()</code> 内置函数，用于返回元素中最大值，字符类型取字母表排序的靠后字母。</p><p><strong>语法格式</strong>：<code>max(object)</code></p><ul><li><strong>object</strong>：传入可迭代对象</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>字母表中大写在前，小写在后</p></div><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span>
b <span class="token operator">=</span> <span class="token string">&#39;6546186638948&#39;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：r</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="min" tabindex="-1"><a class="header-anchor" href="#min" aria-hidden="true">#</a> min()</h2><p><code>min()</code> 内置函数，用于返回元素中最小值，字符类型取字母表排序的靠后字母。</p><p><strong>语法格式</strong>：<code>min(object)</code></p><ul><li><strong>object</strong>：传入可迭代对象</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>空格比字母值还要小</p></div><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span>
b <span class="token operator">=</span> <span class="token string">&#39;6546186638948&#39;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：空格</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="enumerate" tabindex="-1"><a class="header-anchor" href="#enumerate" aria-hidden="true">#</a> enumerate()</h2><p><code>enumerate()</code> 内置函数，用于将序列组合为一个索引序列，多用于在 for 循环中，可以同时输出索引值和元素内容。</p><p><strong>语法格式</strong>：<code>enumerate(object, start)</code></p><ul><li><strong>object</strong>：传入可迭代对象</li><li><strong>start</strong>：指定索引的起始值</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> index<span class="token punctuation">,</span> i <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> i<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token number">0</span> <span class="token number">10</span>
<span class="token number">1</span> <span class="token number">20</span>
<span class="token number">2</span> <span class="token number">30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lambda" tabindex="-1"><a class="header-anchor" href="#lambda" aria-hidden="true">#</a> lambda</h2><p><code>lambda</code> 内置函数，用于创建 <code>lambda</code> 函数。</p><p><strong>语法格式</strong>：<code>result = lambda [arg01[, arg02[,... [, argn]]]]: expression</code></p><ul><li><strong>result</strong>：用于调用 lambda 表达式</li><li><strong>[arg01[, arg02[,... [, argn]]]]</strong>：可选参数，指定要传递的参数列表，多个参数间使用逗号 <code>,</code> 分隔</li><li><strong>expression</strong>：指定一个实现具体功能的表达式。如果有参数，那么在该表达式中将应用这些参数</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>通常情况下，这样的函数只使用一次，使用 <code>lambda</code> 表达式时，需要定义一个变量，用于调用该 lambda 表达式</p></div><p>例如：将 lambda 函数赋值给一个变量，通过这个变量间接调用该 lambda 函数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y

<span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sum" tabindex="-1"><a class="header-anchor" href="#sum" aria-hidden="true">#</a> sum()</h2><p><code>sum()</code> 内置函数，用于计算可迭代对象之和。</p><p><strong>语法格式</strong>：<code>sum(iterable[, start])</code></p><ul><li><strong>iterable</strong>：表示可迭代对象</li><li><strong>start</strong>：表示指定相加的参数，如果没有设置这个值，默认为 <code>0</code></li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：60</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>mylist<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：110</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sorted" tabindex="-1"><a class="header-anchor" href="#sorted" aria-hidden="true">#</a> sorted()</h2><p><code>sorted()</code> 内置函数，用于按字母排序，不改变原有列表。</p><p><strong>语法格式</strong>：<code>sorted(iterable, [key[, reverse]])</code></p><ul><li><strong>iterable</strong>：指定可迭代对象</li><li><strong>key</strong>：指定带有一个参数的函数，用于从每个列表元素中提取比较键，或对指定的 key 值进行比较。</li><li><strong>reverse</strong>：为一个布尔值。如果设为 <code>True</code>，实现降序排序；如果设为 <code>False</code>，实现升序排序，默认为 <code>False</code></li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;zero&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Orange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Kiwi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span><span class="token punctuation">]</span>
x <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>mylists<span class="token punctuation">)</span>
y <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>mylists<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> mylist<span class="token punctuation">:</span> mylist<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
z <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>mylists<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;Kiwi&#39;, &#39;Orange&#39;, &#39;banana&#39;, &#39;cherry&#39;, &#39;zero&#39;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;Orange&#39;, &#39;cherry&#39;, &#39;banana&#39;, &#39;zero&#39;, &#39;Kiwi&#39;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;zero&#39;, &#39;cherry&#39;, &#39;banana&#39;, &#39;Orange&#39;, &#39;Kiwi&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="zip" tabindex="-1"><a class="header-anchor" href="#zip" aria-hidden="true">#</a> zip()</h2><p><code>zip()</code> 内置函数，用于接收一系列可迭代对象作为参数，将对象中对应的元素打包成一个个 <strong>元组</strong>（<code>tuple</code>），然后返回列表（<code>list</code>）。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>若传入参数的长度不等，则返回列表的长度和参数中长度最短的对象相同</p><p>如果提前不对 <code>zip()</code> 函数进行数据类型转换，则只能进行遍历一次，第二次就是空值</p><p>利用 <code>*</code> 号操作符，可以将 <code>list</code> unzip（解压）</p></div><p><strong>语法格式</strong>：<code>zip([iterable, iterable, ...])</code></p><ul><li><strong>iterable</strong>：传入可迭代对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wangwu&#39;</span><span class="token punctuation">]</span>
age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;24&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;25&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;26&#39;</span><span class="token punctuation">]</span>
mydict <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span>mydict<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{&#39;zhangsan&#39;: &#39;20&#39;, &#39;lisi&#39;: &#39;24&#39;, &#39;wangwu&#39;: &#39;25&#39;}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span>mydict<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{}</span>


a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
c <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[(1, 4), (2, 5), (3, 6)]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[(1, 4), (2, 5), (3, 6)]</span>


aa<span class="token punctuation">,</span> bb <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>c<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>aa<span class="token punctuation">,</span> bb<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：(1, 2, 3) (4, 5, 6)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> set()</h2><p><code>set()</code> 内置函数，用于将一系列可迭代对象转换成集合。</p><p><strong>语法格式</strong>：<code>set([iterable, iterable, ...])</code></p><ul><li><strong>iterable</strong>：传入可迭代对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>myset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&quot;abcde&quot;</span><span class="token punctuation">)</span>
myset01 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;30&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
myset02 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>myset<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{&#39;b&#39;, &#39;e&#39;, &#39;a&#39;, &#39;c&#39;, &#39;d&#39;}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myset01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{&#39;10&#39;, &#39;30&#39;, &#39;20&#39;}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myset02<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{&#39;10&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="round" tabindex="-1"><a class="header-anchor" href="#round" aria-hidden="true">#</a> round()</h2><p><code>round()</code> 内置函数，返回 <code>number</code> 舍入到小数点后 <code>ndigits</code> 位精度的值。如果 <code>ndigits</code> 被省略或为 <code>None</code>，则返回最接近输入值的整数。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>结果值会舍入至最接近的 <code>10</code> 的负 <code>ndigits</code> 次幂的倍数；如果与两个倍数同样接近，则选用偶数。因此，<code>round(0.5)</code> 和 <code>round(-0.5)</code> 均得出 <code>0</code> 而 <code>round(1.5)</code> 则为 <code>2</code></p><p>大多数的十进制小数都不能精确地表示为二进制小数</p><p><code>ndigits</code> 可为任意整数值（正数、零或负数）。如果省略了 <code>ndigits</code> 或为 <code>None</code>，则返回值将为最接近 <code>number</code> 的整数。否则返回值与 <code>number</code> 的类型相同</p></div><p><strong>语法格式</strong>：<code>round(number[, ndigits=None])</code></p><ul><li><strong>number</strong>：表示输入的浮点类型字符</li><li><strong>ndigits=None</strong>：表示要保留的小数位</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token number">3.4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：4</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token number">3.1445</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：3.14</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token number">3.1464</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：3.15</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token number">3.145</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：3.15</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token number">3.155</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：3.15</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token number">3.165</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：3.17</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token number">3.1450</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：3.15</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token number">3.1554</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：3.16</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token number">3.1655</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：3.17</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="filter" tabindex="-1"><a class="header-anchor" href="#filter" aria-hidden="true">#</a> filter()</h2><p><code>filter()</code> 内置函数，用于过滤序列，过滤掉不符合条件的元素，返回符合条件的元素组成新列表。</p><p><strong>语法格式</strong>：<code>filter(function, iterable)</code></p><ul><li><strong>function</strong>：指定判断函数，是一个提供过滤条件的函数，返回布尔值</li><li><strong>iterable</strong>：可迭代对象数据</li></ul><p>在调用 <code>filter()</code> 函数时，<code>iterable</code> 会被遍历，它的元素会被逐一传入 <code>function</code> 函数中，<code>function</code> 函数若返回 <code>True</code>，则元素被保留；若返回 <code>False</code>，则元素被过滤。最后遍历完成，已保留的元素被放到一个新的容器数据中。</p><p>例如：过滤出大于 50 的数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">num</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">&gt;</span> <span class="token number">50</span>


num01 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">]</span>
num02 <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> num01<span class="token punctuation">)</span>
num03 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> num01<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>num02<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;filter object at 0x000001405661B310&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>num03<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[66, 91, 92, 80, 99]</span>


num01 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">]</span>  <span class="token comment"># 用 lambda 函数替代</span>
num02 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num01<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>num02<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[66, 91, 92, 80, 99]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注</p><p><code>filter()</code> 函数默认输出的是生成器对象，需要用 <code>list()</code> 函数转换为列表</p></div><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map()</h2><p><code>map()</code> 内置函数，用于对容器中的元素进行映射（或变换）。</p><p><strong>语法格式</strong>：<code>map(function, iterable)</code></p><ul><li><strong>function</strong>：指定变换规则的函数，返回变换之后的元素</li><li><strong>iterable</strong>：可迭代对象数据</li></ul><p>在调用 <code>map()</code> 函数时，<code>iterable</code> 会被遍历，它的元素被逐一传入 <code>function</code> 函数中，在 <code>function</code> 函数中对元素进行变换。</p><p>例如：将列表中的数字乘以二</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">num</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">2</span>


num01 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
num02 <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> num01<span class="token punctuation">)</span>
num03 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> num01<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>num02<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;map object at 0x0000026078ADB490&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>num03<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[2, 4, 6, 8, 10]</span>


num01 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>  <span class="token comment"># 用 lambda 函数替代</span>
num02 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num01<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>num02<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[2, 4, 6, 8, 10]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注</p><p><code>map()</code> 函数默认输出的是生成器对象，需要用 <code>list()</code> 函数转换为列表</p></div><h2 id="super" tabindex="-1"><a class="header-anchor" href="#super" aria-hidden="true">#</a> super()</h2><p><code>super()</code> 内置函数，用于调用父类（超类）的一种方法，在子类中可以通过 <code>super()</code> 方法来调用父类方法，解决多继承带来的重复调用（菱形继承）、查找顺序（MRO）问题。</p><p><strong>语法格式</strong>：<code>super(type[, object-or-type])</code></p><ul><li><strong>type</strong>：类</li><li><strong>object-or-type</strong>：类，一般是 <code>self</code></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Python3 用 <strong>super().xxx</strong> 代替 Python2 的 <strong>super(Class, self).xxx</strong></p></div><p><strong>MRO——方法搜索顺序</strong>：MRO 是 method resolution order，主要用于在对继承是判断方法、属性的调用路径顺序，其实也就是继承父类方法时的顺序表，<code>super()</code> 函数严格按照 <strong>MRO</strong> 顺序执行。Python 中针对类提供了一个内置属性 <code>__mro__</code> 可以查看方法的搜索顺序。</p><p>在搜索方法时，是按照 <code>__mro__</code> 的输出结果从左到右的顺序查找的。</p><ul><li>如果当前类中找到方法，就直接执行，不再搜索</li><li>如果没有找到，就查找下一个类中是否有对应的方法，如果找到，就直接执行，不再搜索</li><li>如果找到最后一个类，还是没有找到方法，程序报错</li></ul><h3 id="单继承" tabindex="-1"><a class="header-anchor" href="#单继承" aria-hidden="true">#</a> 单继承：</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">2</span>

    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;self is {0} @A.add&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>n <span class="token operator">+=</span> m


<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">3</span>

    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;self is {0} @B.add&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>m<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>n <span class="token operator">+=</span> <span class="token number">3</span>


b <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token punctuation">)</span>
b<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>n<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span>__mro__<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
self <span class="token keyword">is</span> <span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>B <span class="token builtin">object</span> at <span class="token number">0x106c49b38</span><span class="token operator">&gt;</span> @B<span class="token punctuation">.</span>add
self <span class="token keyword">is</span> <span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>B <span class="token builtin">object</span> at <span class="token number">0x106c49b38</span><span class="token operator">&gt;</span> @A<span class="token punctuation">.</span>add
<span class="token number">8</span>
<span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;__main__.B&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;__main__.A&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;object&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>整体流程：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token number">1.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span>  self<span class="token punctuation">.</span>n <span class="token operator">+=</span> m
        self<span class="token punctuation">.</span>n <span class="token operator">+=</span> <span class="token number">3</span>   <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">2.</span>   <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">|</span>
        <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>                 <span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>super().add(m)</code> 调用父类方法 <code>def add(self, m)</code> 时, 此时父类中 <code>self</code> 并不是父类的实例而是子类的实例, 所以 <code>b.add(2)</code> 之后的结果是 <code>5</code>（n=3，m=2，3+2） 而不是 <code>4</code>（n=2，m=2，2+2）</p></div><h3 id="多继承" tabindex="-1"><a class="header-anchor" href="#多继承" aria-hidden="true">#</a> 多继承：</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">2</span>

    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;self is {0} @A.add&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>n <span class="token operator">+=</span> m


<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">3</span>

    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;self is {0} @B.add&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>m<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>n <span class="token operator">+=</span> <span class="token number">3</span>


<span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">4</span>

    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;self is {0} @C.add&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>m<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>n <span class="token operator">+=</span> <span class="token number">4</span>


<span class="token keyword">class</span> <span class="token class-name">D</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">5</span>

    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;self is {0} @D.add&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>m<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>n <span class="token operator">+=</span> <span class="token number">5</span>


d <span class="token operator">=</span> D<span class="token punctuation">(</span><span class="token punctuation">)</span>
d<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>n<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>D<span class="token punctuation">.</span>__mro__<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
self <span class="token keyword">is</span> <span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>D <span class="token builtin">object</span> at <span class="token number">0x10ce10e48</span><span class="token operator">&gt;</span> @D<span class="token punctuation">.</span>add
self <span class="token keyword">is</span> <span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>D <span class="token builtin">object</span> at <span class="token number">0x10ce10e48</span><span class="token operator">&gt;</span> @B<span class="token punctuation">.</span>add
self <span class="token keyword">is</span> <span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>D <span class="token builtin">object</span> at <span class="token number">0x10ce10e48</span><span class="token operator">&gt;</span> @C<span class="token punctuation">.</span>add
self <span class="token keyword">is</span> <span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>D <span class="token builtin">object</span> at <span class="token number">0x10ce10e48</span><span class="token operator">&gt;</span> @A<span class="token punctuation">.</span>add
<span class="token number">19</span>
<span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;__main__.D&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;__main__.B&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;__main__.C&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;__main__.A&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;object&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>整体流程：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">D</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token number">1.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token number">2.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>m<span class="token punctuation">)</span>  <span class="token number">3.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span>  self<span class="token punctuation">.</span>n <span class="token operator">+=</span> m
        self<span class="token punctuation">.</span>n <span class="token operator">+=</span> <span class="token number">5</span>   <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">6.</span> self<span class="token punctuation">.</span>n <span class="token operator">+=</span> <span class="token number">3</span>    <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">5.</span> self<span class="token punctuation">.</span>n <span class="token operator">+=</span> <span class="token number">4</span>     <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">4.</span> <span class="token operator">&lt;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">|</span>
        <span class="token punctuation">(</span><span class="token number">14</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">)</span>               <span class="token punctuation">(</span><span class="token number">11</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>              <span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">)</span>                <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dir" tabindex="-1"><a class="header-anchor" href="#dir" aria-hidden="true">#</a> dir()</h2><p><code>dir()</code> 内置函数，如果没有实参，则返回当前本地作用域中的名称列表。如果有实参，它会尝试返回该对象的有效属性列表。</p><p><strong>语法格式</strong>：<code>dir([parameter])</code></p><ul><li><strong>parameter</strong>：可选参数，可以是 <code>&quot;&quot;</code>（表示字符串）、<code>[]</code>（表示列表）、<code>()</code>（表示元组）等，也可以是函数、类、方法等</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 输出结果：[&#39;__annotations__&#39;, &#39;__builtins__&#39;, &#39;__cached__&#39;, &#39;__doc__&#39;, &#39;__file__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;bmi&#39;]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 输出结果：[&#39;__add__&#39;, &#39;__class__&#39;, &#39;__class_getitem__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;count&#39;, &#39;index&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="chr" tabindex="-1"><a class="header-anchor" href="#chr" aria-hidden="true">#</a> chr()</h2><p><code>chr()</code> 内置函数，函数返回值类型为 <code>String</code>，其数值表达式值取值范围为 <code>0~255</code>。</p><p><strong>语法格式</strong>：<code>chr(i)</code></p><ul><li><strong>i</strong>：指定数值表达式，可以是十进制也可以是十六进制的数字</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>

<span class="token triple-quoted-string string">&quot;&quot;&quot;输出结果：&quot;&quot;&quot;</span>

	
\x1B !&quot;<span class="token comment">#$%&amp;&#39;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\`abcdefghijklmnopqrstuvwxyz{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ</span>


<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0123456789</span>


<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：ABCDEFGHIJKLMNOPQRSTUVWXYZ</span>


<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：abcdefghijklmnopqrstuvwxyz</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ord" tabindex="-1"><a class="header-anchor" href="#ord" aria-hidden="true">#</a> ord()</h2><p><code>ord()</code> 内置函数，函数返回值类型为 <code>int</code> 类型。</p><p><strong>语法格式</strong>：<code>ord(c)</code></p><ul><li><strong>c</strong>：指定字符串，可以是 <code>ASCII</code> 和 <code>Unicode</code> 字符串</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：48</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：97</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：65</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="open" tabindex="-1"><a class="header-anchor" href="#open" aria-hidden="true">#</a> open()</h2><p><code>open()</code> 内置函数，用于创建或者打开指定文件并创建文件对象。</p><p><strong>语法格式</strong>：<code>file = open(filename[, mode[, buffering[, encoding[, errors[, newline[, closefd[, opener]]]]]]])</code></p><ul><li><strong>file</strong>：被创建的文件对象</li><li><strong>filename</strong>：要创建或打开的文件名称，需要用单引号或双引号括起来。可以使用相对路径也可以使用绝对路径</li><li><strong>mode</strong>：可选参数，指定文件的打开模式。默认的打开模式为只读（<code>r</code>）</li><li><strong>buffering</strong>：可选参数，指定读写文件的缓冲模式，值为 <code>0</code> 表示不缓存；值为 <code>1</code> 表示缓存；如果大于 <code>1</code>，则表示缓冲区的大小。默认为缓存模式</li><li><strong>encoding</strong>：指定文件编码。默认为 <code>None</code>。<code>encoding</code> 参数仅可在采用文本方式（即 <code>mode</code> 值带 <code>t</code>）读写数据的情况下有效，二进制方式下不可指定。常用的有 <code>utf-8</code>、<code>ascii</code>、<code>gbk</code> 等</li><li><strong>errors</strong>：指定在文本文件发生编码错误时如何处理。默认为 <code>None</code>。仅当 <code>mode</code> 参数采用文本方式时有效，二进制方式下不可指定。常用的可选值有 <code>strict</code>、<code>ignore</code>、<code>replace</code>、<code>surrogateescape</code>、<code>xmlcharrefreplace</code>、<code>backslashreplace</code>、<code>namereplace</code> 等。推荐参数为 <code>ignore</code> 表示在遇到编码错误时忽略该错误，程序继续执行</li><li><strong>newline</strong>：设置换行符。默认为 <code>None</code>。可选值包括 <code>None</code>、<code>&quot;\\r&quot;</code>、<code>&quot;\\n&quot;</code>、<code>&quot;\\r\\n&quot;</code></li><li><strong>closefd</strong>：控制传入的 <code>file</code> 参数类型。默认为 <code>True</code>，当为 <code>True</code> 时，<code>file</code> 参数可以是表示文件路径的字符串，也可以是文件描述符，当为 <code>False</code> 时，<code>file</code> 参数只能是文件描述符，传入字符串会报错</li></ul><p><strong>mode 参数列表如下：</strong></p><table><thead><tr><th style="text-align:center;">参数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>t</strong></td><td style="text-align:left;">文本模式（默认）</td></tr><tr><td style="text-align:center;"><strong>x</strong></td><td style="text-align:left;">写模式，新建一个文件，如果文件存在，则报错</td></tr><tr><td style="text-align:center;"><strong>b</strong></td><td style="text-align:left;">二进制模式</td></tr><tr><td style="text-align:center;"><strong>+</strong></td><td style="text-align:left;">打开一个文件进行更新（读写模式）</td></tr><tr><td style="text-align:center;"><strong>U</strong></td><td style="text-align:left;">通用换行模式（不推荐）</td></tr><tr><td style="text-align:center;"><strong>r</strong></td><td style="text-align:left;">只读模式打开文件，文件的指针将会放在文件的开头。文件必须存在</td></tr><tr><td style="text-align:center;"><strong>rb</strong></td><td style="text-align:left;">只读模式以二进制格式打开文件，文件的指针将会放在文件的开头，一般用于非文本文件。例如：图片、声音等。文件必须存在</td></tr><tr><td style="text-align:center;"><strong>r+</strong></td><td style="text-align:left;">读写模式打开文件，写入新的内容覆盖原有内容，文件的指针将会放在文件的开头。文件必须存在</td></tr><tr><td style="text-align:center;"><strong>rb+</strong></td><td style="text-align:left;">读写模式以二进制格式打开文件，文件的指针将会放在文件的开头，一般用于非文本文件。例如：图片、声音等。文件必须存在</td></tr><tr><td style="text-align:center;"><strong>w</strong></td><td style="text-align:left;">只写模式打开文件。文件如果存在，则将其覆盖，否则创建新文件</td></tr><tr><td style="text-align:center;"><strong>wb</strong></td><td style="text-align:left;">只写模式以二进制格式打开文件，一般用于非文本文件。例如：图片、声音等。文件如果存在，则将其覆盖，否则创建新文件</td></tr><tr><td style="text-align:center;"><strong>w+</strong></td><td style="text-align:left;">读写模式打开文件，先清空原有内容，再写入内容。文件如果存在，则将其覆盖，否则创建新文件</td></tr><tr><td style="text-align:center;"><strong>wb+</strong></td><td style="text-align:left;">读写模式以二进制格式打开文件，一般用于非文本文件。例如：图片、声音等。文件如果存在，则将其覆盖，否则创建新文件</td></tr><tr><td style="text-align:center;"><strong>a</strong></td><td style="text-align:left;">追加模式打开文件。如果该文件存在，文件指针将会放在文件的末尾，否则，创建新文件写入</td></tr><tr><td style="text-align:center;"><strong>ab</strong></td><td style="text-align:left;">追加模式以二进制格式打开文件。如果该文件存在，文件指针将会放在文件的末尾，否则，创建新文件写入</td></tr><tr><td style="text-align:center;"><strong>a+</strong></td><td style="text-align:left;">读写、追加模式打开文件。如果该文件存在，文件指针将会放在文件的末尾，否则，创建新文件写入</td></tr><tr><td style="text-align:center;"><strong>ab+</strong></td><td style="text-align:left;">读写、追加模式以二进制格式打开文件。如果该文件存在，文件指针将会放在文件的末尾，否则，创建新文件写入</td></tr></tbody></table><p>打开一个不存在的文件。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;打开文件&quot;</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span>

<span class="token comment"># 输出结果：打开文件 &lt;_io.TextIOWrapper name=&#39;test.txt&#39; mode=&#39;w&#39; encoding=&#39;cp936&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以二进制形式打开文件。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;picture.png&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;_io.BufferedReader name=&#39;picture.png&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>打开文件时指定编码方式。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;_io.TextIOWrapper name=&#39;test.txt&#39; mode=&#39;r&#39; encoding=&#39;utf-8&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iter" tabindex="-1"><a class="header-anchor" href="#iter" aria-hidden="true">#</a> iter()</h2><p><code>iter()</code> 内置函数，用于返回一个迭代器，与 <code>__iter__()</code> 方法作用一样。</p><p><strong>语法格式</strong>：<code>iter(object, [sentinel])</code></p>`,195),r=n("li",null,[n("strong",null,"object"),s("：可迭代的对象")],-1),d=n("strong",null,"sentinel",-1),k=n("code",null,"__next__()",-1),m=n("code",null,"sentinel",-1),b={href:"https://docs.python.org/zh-cn/3/library/exceptions.html#StopIteration",target:"_blank",rel:"noopener noreferrer"},v=a(`<p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
ite <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>  <span class="token comment"># 接收一下 __iter__() 干了什么</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>ite<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;list_iterator object at 0x0000025FC9F78670&gt;</span>


<span class="token comment"># 随机产生 1~10 之间的数，遇到 5 就停止</span>
<span class="token keyword">from</span> random <span class="token keyword">import</span> randint


<span class="token keyword">def</span> <span class="token function">d10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>


<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>d10<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="next" tabindex="-1"><a class="header-anchor" href="#next" aria-hidden="true">#</a> next()</h2><p><code>next()</code> 内置函数，用于获取迭代器中的每一个元素，与 <code>__next__()</code> 方法作用一样。</p><p><strong>语法格式</strong>：<code>next(name)</code></p><ul><li><strong>name</strong>：指定迭代器</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
ite <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>  <span class="token comment"># 接收一下 __iter__() 干了什么</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>ite<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;list_iterator object at 0x0000025FC9F78670&gt;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>ite<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>ite<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>ite<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>ite<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="repr" tabindex="-1"><a class="header-anchor" href="#repr" aria-hidden="true">#</a> repr()</h2><p><code>repr()</code> 内置函数，用于将对象转化为供解释器读取的形式，返回包含对象的可打印表示形式的字符串。</p><p><strong>语法格式</strong>：<code>repr(object)</code></p><ul><li><strong>object</strong>：可迭代的对象</li></ul><div class="hint-container note"><p class="hint-container-title">注</p><p><code>repr</code> 其实就是 return properties（返回属性）的缩写，比起 <code>str()</code> 函数更适合调试</p></div><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&#39;runoob&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&#39;runoob&#39;</span>

d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;baidu&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;baidu.com&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;youtube&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;youtube.com&#39;</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{&#39;baidu&#39;: &#39;baidu.com&#39;, &#39;youtube&#39;: &#39;youtube.com&#39;}</span>


<span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;这个类的名字是: %s&#39;</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name


a <span class="token operator">=</span> Test<span class="token punctuation">(</span><span class="token string">&#39;科学&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：这个类的名字是: 科学</span>


<span class="token keyword">import</span> datetime

n <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2023-01-06 18:52:11.763043</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：datetime.datetime(2023, 1, 6, 18, 52, 11, 763043)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="yield" tabindex="-1"><a class="header-anchor" href="#yield" aria-hidden="true">#</a> yield</h2><p><code>yield</code> 函数作用和 <code>return</code> 类似，执行到 <code>yield</code> 语句时下面的语句不会执行。只是 <code>return</code> 函数返回的是值，而 <code>yield</code> 函数返回的是生成器，用 <code>next()</code> 函数读取。</p><p><strong>语法格式</strong>：<code>yield value</code></p><ul><li><strong>value</strong>：指定要返回的值</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>yield</code> 函数返回的生成器，每次只读取一次，节省内存空间</p></div><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;starting...&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token number">4</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;res:&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>


g <span class="token operator">=</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 输出结果</span>
<span class="token operator">&lt;</span>generator <span class="token builtin">object</span> foo at <span class="token number">0x0000019D1541B610</span><span class="token operator">&gt;</span>
starting<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">4</span>
<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>
res<span class="token punctuation">:</span> <span class="token boolean">None</span>
<span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hasattr" tabindex="-1"><a class="header-anchor" href="#hasattr" aria-hidden="true">#</a> hasattr()</h2><p><code>hasattr()</code> 内置函数，用于判断对象是否包含对应的属性，如果对象有该属性返回 <code>True</code>，否则返回 <code>False</code>。</p><p><strong>语法格式</strong>：<code>hasattr(object, name)</code></p><ul><li><strong>object</strong>：对象</li><li><strong>name</strong>：字符串，属性名</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Coordinate</span><span class="token punctuation">:</span>
    x <span class="token operator">=</span> <span class="token number">10</span>
    y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span>
    z <span class="token operator">=</span> <span class="token number">0</span>
 
point1 <span class="token operator">=</span> Coordinate<span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hasattr</span><span class="token punctuation">(</span>point1<span class="token punctuation">,</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hasattr</span><span class="token punctuation">(</span>point1<span class="token punctuation">,</span> <span class="token string">&#39;y&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hasattr</span><span class="token punctuation">(</span>point1<span class="token punctuation">,</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hasattr</span><span class="token punctuation">(</span>point1<span class="token punctuation">,</span> <span class="token string">&#39;no&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：False。没有该属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="callable" tabindex="-1"><a class="header-anchor" href="#callable" aria-hidden="true">#</a> callable()</h2><p><code>callable()</code> 内置函数，用于检查一个对象是否是可调用的。如果返回 <code>True</code>，object 仍然可能调用失败；但如果返回 <code>False</code>，调用对象 object 绝对不会成功。对于函数、方法、lambda 函式、类以及实现了 <code>__call__</code> 方法的类实例, 它都返回 True。</p><p><strong>语法格式</strong>：<code>callable(object)</code></p><ul><li><strong>object</strong>：对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">callable</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">callable</span><span class="token punctuation">(</span><span class="token string">&quot;runoob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：False</span>


<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b


<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">callable</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True</span>


<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">method</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>


<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">callable</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True</span>
a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">callable</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：False。没有实现 __call__</span>


<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>


<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">callable</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True</span>
b <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">callable</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True。实现 __call__</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="getattr" tabindex="-1"><a class="header-anchor" href="#getattr" aria-hidden="true">#</a> getattr()</h2><p><code>getattr()</code> 内置函数，用于返回一个对象属性值。</p><p><strong>语法格式</strong>：<code>getattr(object, name[, default])</code></p><ul><li><strong>object</strong>：对象</li><li><strong>name</strong>：字符串，对象属性</li><li><strong>default</strong>：默认返回值，如果不提供该参数，在没有对应属性时，将触发 <code>AttributeError</code></li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    bar <span class="token operator">=</span> <span class="token number">1</span>


a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">getattr</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：1。获取属性 bar 值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">getattr</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">&#39;bar2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：AttributeError: &#39;A&#39; object has no attribute &#39;bar2&#39;. Did you mean: &#39;bar&#39;?。属性 bar2 不存在，触发异常</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">getattr</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">&#39;bar2&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：3。属性 bar2 不存在，但设置了默认值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40);function g(y,h){const t=p("ExternalLinkIcon");return o(),c("div",null,[u,n("ul",null,[r,n("li",null,[d,s("：哨兵，标记符。每次迭代都会调用 "),k,s(" 方法，直到值为 "),m,s(" 时触发 "),n("a",b,[s("StopIteration"),l(t)]),s(" 停止")])]),v])}const w=e(i,[["render",g],["__file","functions.html.vue"]]);export{w as default};
