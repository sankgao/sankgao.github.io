import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as c,c as p,b as s,e as a,d as i,f as n}from"./app-FKbiDJQH.js";const r="/assets/entire_gitlab_instance-EhlzBlw5.jpg",d="/assets/user_gitlab_instance-CyBuEm74.jpg",g="/assets/change_root_passwd-7XN6tqfN.jpg",u="/assets/time_zone-00Xv2ts7.jpg",b="/assets/sign_up_restrictions-PvPOC6AD.jpg",m="/assets/clear_sign_up_enabled-4k7hYgOB.jpg",h="/assets/ssh_key-Brzks0aT.jpg",v="/assets/ssh_key_add-3vfHJqVt.jpg",k="/assets/create_new_user01-3nHhwyUk.jpg",_="/assets/create_new_user02-DwgC82Rx.jpg",f="/assets/create_new_user03-h88kfchX.jpg",x="/assets/create_new_user04-x9ahz0Yj.jpg",G="/assets/create_new_user05-c6NA5_ko.jpg",L="/assets/create_new_group01-1tu5ai6I.jpg",S="/assets/create_new_group02-PSHtRuZs.jpg",y="/assets/create_new_group03-OL_6HuGA.jpg",j="/assets/create_new_group04-_EfUYGsp.jpg",z="/assets/create_new_group05-fKwHti7X.jpg",q="/assets/create_new_project01-JcqEnp95.jpg",T="/assets/create_new_project02-R9HuKz20.jpg",w="/assets/create_new_project03-EH2NedG7.jpg",M="/assets/create_new_project04-jA7qsUYm.jpg",E="/assets/project_add_user01-SgVRzuUj.jpg",A="/assets/project_add_user02-b9mGoNQI.jpg",t="/assets/upload_code-6p04ZEAR.jpg",P="/assets/branch01-hUJU_oen.jpg",H="/assets/merge_request01-3y3ccL6i.jpg",C="/assets/merge_request02-niG0zTuN.jpg",D="/assets/merge_request03-Hwuk9vpK.jpg",N="/assets/branch02-eTNhnw9D.jpg",R="/assets/create_new_tag01-CMKjVTsv.jpg",B="/assets/create_new_tag02-47MCt0Zj.jpg",I={},U=n('<h2 id="基础配置" tabindex="-1"><a class="header-anchor" href="#基础配置" aria-hidden="true">#</a> 基础配置</h2><h3 id="修改语言" tabindex="-1"><a class="header-anchor" href="#修改语言" aria-hidden="true">#</a> 修改语言</h3><ul><li><p>修改整个 极狐GitLab 实例的默认语言</p><p>在 极狐GitLab 实例页面左侧边栏的底部，选择 <em>Admin Area -&gt; Settings -&gt; Preferences -&gt; Localization</em>，然后选择您所需的默认语言，点击 <em>Save changes</em> 保存。</p><figure><img src="'+r+'" alt="全局修改" tabindex="0" loading="lazy"><figcaption>全局修改</figcaption></figure></li><li><p>修改个人账户 极狐GitLab 实例的默认语言</p><p>在 极狐GitLab 实例页面左侧边栏的右上角，选择 <em>头像 -&gt; Preferences -&gt; Localization</em>，然后选择您所需的默认语言，点击 <em>Save changes</em> 保存。</p><p>修改后需要刷新页面才能查看更新后的语言。</p><figure><img src="'+d+'" alt="局部修改" tabindex="0" loading="lazy"><figcaption>局部修改</figcaption></figure></li></ul><h3 id="修改管理员密码" tabindex="-1"><a class="header-anchor" href="#修改管理员密码" aria-hidden="true">#</a> 修改管理员密码</h3><p>在安装 极狐GitLab 实例时，没有配置初始密码的情况下，默认初始管理员密码是随机的一串字符不好记忆，需要修改密码。</p><p>密码更新成功后，您将被重定向到登录页面，您可以使用新密码重新登录。</p><figure><img src="'+g+'" alt="修改管理员密码" tabindex="0" loading="lazy"><figcaption>修改管理员密码</figcaption></figure><h3 id="修改时区" tabindex="-1"><a class="header-anchor" href="#修改时区" aria-hidden="true">#</a> 修改时区</h3><p>极狐GitLab 实例默认时区是 <code>UTC</code>。</p><ul><li><p>全局时区</p><p>全局时区有以下两种配置方法：</p><ol><li>在安装 极狐GitLab 实例时配置时区参数。例如：<code>gitlab_rails[&#39;time_zone&#39;] = &#39;Asia/Shanghai&#39;</code></li><li>修改 <code>/etc/gitlab/gitlab.rb</code> 文件中 <code>gitlab_rails[&#39;time_zone&#39;]</code> 参数值并重启 GitLab。例如：<code>gitlab_rails[&#39;time_zone&#39;] = &#39;Asia/Shanghai&#39;</code></li></ol></li><li><p>个人时区</p><p>在 极狐GitLab 实例页面左侧边栏的右上角，选择 <em>头像 -&gt; 编辑个人资料 -&gt; 用户资料 -&gt; 时间设置</em>，然后选择您所需的时区，点击 <em>更新个人资料设置</em> 保存。</p><figure><img src="'+u+'" alt="个人时区" tabindex="0" loading="lazy"><figcaption>个人时区</figcaption></figure></li></ul><h3 id="注册限制" tabindex="-1"><a class="header-anchor" href="#注册限制" aria-hidden="true">#</a> 注册限制</h3><p>刚安装的 极狐GitLab 实例默认允许任何人注册账户，应该限制注册。</p><figure><img src="'+b+'" alt="注册限制" tabindex="0" loading="lazy"><figcaption>注册限制</figcaption></figure><p>点击 <em>停用</em>，跳转到 <em>注册限制</em> 页面；或在 极狐GitLab 实例页面左侧边栏的底部，选择 <em>管理中心 -&gt; 设置 -&gt; 通用 -&gt; 注册限制</em>。</p><p>清除 <em>已启用注册功能</em> 复选框，然后在下面选择 <em>保存更改</em>。</p><figure><img src="'+m+'" alt="清除注册功能" tabindex="0" loading="lazy"><figcaption>清除注册功能</figcaption></figure><h2 id="配置-smtp" tabindex="-1"><a class="header-anchor" href="#配置-smtp" aria-hidden="true">#</a> 配置 SMTP</h2><p>如果您希望通过一个 SMTP 服务器发送应用邮件，而不是通过 Sendmail，需要在 <code>/etc/gitlab/gitlab.rb</code> 中添加以下配置信息，并执行 <code>gitlab-ctl reconfigure</code> 命令重新配置 GitLab 服务。</p>',18),O={href:"https://docs.gitlab.cn/omnibus/settings/smtp.html",target:"_blank",rel:"noopener noreferrer"},V=n(`<h3 id="配置网易-163-邮箱" tabindex="-1"><a class="header-anchor" href="#配置网易-163-邮箱" aria-hidden="true">#</a> 配置网易 163 邮箱</h3><p>例如：配置网易 163 邮箱 SMTP 服务，修改 <code>/etc/gitlab/gitlab.rb</code> 文件中以下配置信息：</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code>gitlab_rails<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;smtp_enable&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token comment"># 启用 SMTP 服务</span>
gitlab_rails<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;smtp_address&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;smtp.163.com&quot;</span></span>  <span class="token comment"># 配置 SMTP 服务器地址</span>
gitlab_rails<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;smtp_port&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">465</span>  <span class="token comment"># 配置 SMTP 服务的端口号</span>
gitlab_rails<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;smtp_user_name&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;xxx@163.com&quot;</span></span>  <span class="token comment"># 配置 SMTP 服务器身份验证用户名</span>
gitlab_rails<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;smtp_password&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;smtp password&quot;</span></span>  <span class="token comment"># 配置 SMTP 授权码</span>
gitlab_rails<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;smtp_domain&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;smtp.163.com&quot;</span></span>  <span class="token comment"># 配置 SMTP 服务的域名</span>
gitlab_rails<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;smtp_authentication&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;login&quot;</span></span>  <span class="token comment"># 配置 SMTP 认证方法</span>
gitlab_rails<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;smtp_enable_starttls_auto&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token comment"># 禁用 SMTP 服务器的 STARTTLS 自动启用，通常使用端口 587</span>
gitlab_rails<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;smtp_tls&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token comment"># 启用 TLS（传输层安全性），通常使用端口 465</span>
gitlab_rails<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;smtp_pool&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token comment"># 启用 SMTP 连接池</span>

gitlab_rails<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;smtp_openssl_verify_mode&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;peer&#39;</span></span>  <span class="token comment"># 配置 OpenSSL 的验证模式</span>

gitlab_rails<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;gitlab_email_from&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;xxx@163.com&#39;</span></span>  <span class="token comment"># 配置 GitLab 发送电子邮件时所使用的地址</span>
gitlab_rails<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;gitlab_email_display_name&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;My GitLab Server&quot;</span></span>  <span class="token comment"># 配置 GitLab 在发出的电子邮件中的显示名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>smtp_authentication</strong>：用于设置 SMTP 服务器认证方法</p><ul><li><strong>login</strong>：使用登录类型的认证</li><li><strong>plain</strong>：使用明文认证</li><li><strong>cram_md5</strong>：使用 CRAM-MD5 认证</li><li><strong>gssl</strong>：使用 GSSAPI 认证</li></ul></li><li><p><strong>smtp_openssl_verify_mode</strong>：通常，建议设置为 <code>peer</code> 或 <code>none</code>，具体取决于您是否信任您的 SMTP 服务器</p><ul><li><strong>none</strong>：不检查证书的有效性</li><li><strong>peer</strong>：检查证书的有效性，但不是客户端证书</li><li><strong>client_once</strong>：检查证书的有效性，并要求客户端证书</li><li><strong>fail_if_no_peer_cert</strong>：如果没有收到证书，会断开连接</li><li><strong>client_once</strong>：类似 <code>fail_if_no_peer_cert</code>，但是如果没有收到证书，会继续连接</li></ul></li></ul><p>执行 <code>gitlab-ctl reconfigure</code> 命令重新配置 GitLab 服务。</p><h3 id="测试-smtp-配置" tabindex="-1"><a class="header-anchor" href="#测试-smtp-配置" aria-hidden="true">#</a> 测试 SMTP 配置</h3><p>可以使用 Rails 控制台验证是否可以正确发送电子邮件。</p><p>在 极狐GitLab 服务器上，执行 <code>gitlab-rails console</code> 命令进入控制台。然后，您可以在控制台提示符下输入以下命令，以使系统发送测试电子邮件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Notify.test_email<span class="token punctuation">(</span><span class="token string">&#39;destination_email@address.com&#39;</span>, <span class="token string">&#39;Message Subject&#39;</span>, <span class="token string">&#39;Message Body&#39;</span><span class="token punctuation">)</span>.deliver_now
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用加密凭据" tabindex="-1"><a class="header-anchor" href="#使用加密凭据" aria-hidden="true">#</a> 使用加密凭据</h3><p>引入于 14.3 版本。选择使用加密文件作为 SMTP 凭据，而不是将 SMTP 凭据以纯文本形式存储在配置文件中。</p><p>加密文件支持的配置项有：</p><ul><li><code>user_name</code>：对应 <code>gitlab_rails[&#39;smtp_user_name&#39;]</code> 参数</li><li><code>password</code>：对应 <code>gitlab_rails[&#39;smtp_password&#39;]</code> 参数</li></ul><ol><li><p>编辑加密的 <code>secret</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> gitlab-rake gitlab:smtp:secret:edit <span class="token assign-left variable">EDITOR</span><span class="token operator">=</span>vim
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>SMTP secret 的未加密内容应输入如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>user_name: <span class="token string">&#39;smtp user&#39;</span>
password: <span class="token string">&#39;smtp password&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编辑 <code>/etc/gitlab/gitlab.rb</code> 并删除 <code>smtp_user_name</code> 和 <code>smtp_password</code> 的设置</p></li><li><p>重新配置 极狐GitLab</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> gitlab-ctl reconfigure
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="添加-ssh-密钥" tabindex="-1"><a class="header-anchor" href="#添加-ssh-密钥" aria-hidden="true">#</a> 添加 SSH 密钥</h2><p>在 极狐GitLab 服务器中生成 SSH 密钥：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 极狐GitLab 实例页面左侧边栏的右上角，选择 <em>头像 -&gt; 编辑个人资料 -&gt; 用户资料 -&gt; SSH 密钥</em>。</p><figure><img src="`+h+`" alt="SSH 密钥" tabindex="0" loading="lazy"><figcaption>SSH 密钥</figcaption></figure><p>点击 <em>添加新密钥</em>。将刚生成的 SSH 公钥文件（<code>id_rsa.pub</code>）内容复制到 GitLab SSH 中。点击 <em>添加密钥</em>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> ~/.ssh/id_rsa.pub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+v+'" alt="添加 SSH 密钥" tabindex="0" loading="lazy"><figcaption>添加 SSH 密钥</figcaption></figure><h2 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作" aria-hidden="true">#</a> 基本操作</h2><h3 id="创建用户" tabindex="-1"><a class="header-anchor" href="#创建用户" aria-hidden="true">#</a> 创建用户</h3><p>管理员可以手动创建用户：</p><p>在 极狐GitLab 实例页面左侧边栏的底部，选择 <em>管理中心 -&gt; 用户 -&gt; 新用户</em>。</p><figure><img src="'+k+'" alt="创建用户" tabindex="0" loading="lazy"><figcaption>创建用户</figcaption></figure><ul><li><strong>名称</strong>：用于 GitLab 页面显示名。例如：<code>Administrator</code></li><li><strong>用户名</strong>：用于 GitLab 登录。例如：<code>root</code></li><li><strong>电子邮箱</strong>：用于连接用户邮箱</li><li><strong>访问级别</strong>：普通、管理员</li></ul><figure><img src="'+_+'" alt="创建用户" tabindex="0" loading="lazy"><figcaption>创建用户</figcaption></figure><figure><img src="'+f+'" alt="创建用户" tabindex="0" loading="lazy"><figcaption>创建用户</figcaption></figure><p>重置链接会发送到用户的电子邮件，他们必须在首次登录时设置密码。</p><p>要在不依赖电子邮件确认的情况下设置用户密码，点击 <em>编辑</em>，配置用户初始密码。</p><figure><img src="'+x+'" alt="创建用户" tabindex="0" loading="lazy"><figcaption>创建用户</figcaption></figure><p>配置用户初始密码，点击 <em>保存更改。</em></p><figure><img src="'+G+'" alt="创建用户" tabindex="0" loading="lazy"><figcaption>创建用户</figcaption></figure><h3 id="创建群组" tabindex="-1"><a class="header-anchor" href="#创建群组" aria-hidden="true">#</a> 创建群组</h3><p>在 极狐GitLab 实例页面左侧边栏的左上角，选择 <em>极狐图像 -&gt; 群组 -&gt; 新建群组</em>。</p><figure><img src="'+L+'" alt="创建群组" tabindex="0" loading="lazy"><figcaption>创建群组</figcaption></figure><p>选择 <em>创建群组</em>。</p><figure><img src="'+S+'" alt="创建新群组" tabindex="0" loading="lazy"><figcaption>创建新群组</figcaption></figure><p>选择输入以下内容 <em>创建群组</em>：</p><ul><li><p><strong>群组名称</strong>：组名必须以字母、数字、表情或下划线开头，可以包含句点、破折号、空格和括号</p></li><li><p><strong>群组 URL</strong>：输入群组的路径，该路径用于命名空间</p></li><li><p><strong>可见性级别：</strong></p><ul><li><strong>私有</strong>：群组及其项目只能由成员查看</li><li><strong>内部</strong>：除外部用户外，任何登录用户均可查看该群组和任何内部项目</li><li><strong>公开</strong>：群组和任何公开项目可以在没有任何身份验证的情况下查看</li></ul></li><li><p><strong>个性化您的 GitLab 体验</strong>：</p><ul><li><strong>您的角色是什么</strong>：软件开发人员、开发团队负责人、DevOps 工程师、系统管理员、安全分析师、数据分析、产品经理、产品设计师、其他</li><li><strong>谁在使用这个群组</strong>：我的公司或团队、仅我自己</li><li><strong>您用这个群组来做什么</strong>：我想学习 Git 基础知识、我想把我的仓库从其它地方移动到 GitLab、我想存储我的代码、我想探索 GitLab，看看是否值得切换到这里、我想在我的现有仓库上使用 GitLab CI、一个不同的原因</li></ul></li><li><p><strong>邀请 极狐GitLab 成员或其他用户加入群组</strong></p></li></ul><figure><img src="'+y+'" alt="创建群组" tabindex="0" loading="lazy"><figcaption>创建群组</figcaption></figure><figure><img src="'+j+'" alt="创建群组" tabindex="0" loading="lazy"><figcaption>创建群组</figcaption></figure><figure><img src="'+z+'" alt="创建群组" tabindex="0" loading="lazy"><figcaption>创建群组</figcaption></figure>',45),K={href:"https://docs.gitlab.cn/jh/user/group/",target:"_blank",rel:"noopener noreferrer"},Y=n('<h3 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目" aria-hidden="true">#</a> 创建项目</h3><p>在 极狐GitLab 实例页面左侧边栏的左上角，选择 <em>极狐图像 -&gt; 项目 -&gt; 创建项目</em>。</p><figure><img src="'+q+'" alt="创建项目" tabindex="0" loading="lazy"><figcaption>创建项目</figcaption></figure><p>选择 <em>创建空白项目</em>。</p><figure><img src="'+T+'" alt="创建空白项目" tabindex="0" loading="lazy"><figcaption>创建空白项目</figcaption></figure><p>选择输入以下内容 <em>创建项目</em>：</p><ul><li><strong>项目名称</strong>：必须以小写或大写字母、数字、表情符号或下划线开头。也可以包含点、加号、破折号或空格</li><li><strong>项目 URL</strong>：选择项目所在的群组</li><li><strong>项目标识串</strong>：输入项目的路径</li><li><strong>可见性级别</strong>：私有、内部、公开</li><li><strong>项目配置</strong></li></ul><figure><img src="'+w+'" alt="创建项目" tabindex="0" loading="lazy"><figcaption>创建项目</figcaption></figure><figure><img src="'+M+'" alt="创建项目" tabindex="0" loading="lazy"><figcaption>创建项目</figcaption></figure><div class="hint-container info"><p class="hint-container-title">分支保护</p><p>团队开发时为了避免一些重要的开发分支（main）被意外篡改，管理人员需要将这些重要的分支设置分支保护，这样普通开发人员就不能直接对代码进行推送和合并，需要专门的分支管理人员（开发组长）维护重要分支的提交或合并操作。<code>main</code> 分支默认受保护。</p></div><h3 id="将用户添加到项目" tabindex="-1"><a class="header-anchor" href="#将用户添加到项目" aria-hidden="true">#</a> 将用户添加到项目</h3><p>将用户添加到项目中，以便他们成为成员并有权执行操作。</p><p>在 极狐GitLab 实例页面左侧边栏的左上角，选择 <em>极狐图像 -&gt; 项目 -&gt; 选择要添加用户的项目（例如：test_demo） -&gt; 管理 -&gt; 成员 -&gt; 邀请成员</em>。</p><figure><img src="'+E+'" alt="添加用户" tabindex="0" loading="lazy"><figcaption>添加用户</figcaption></figure><ul><li><p><strong>用户名</strong></p></li><li><p><strong>选择角色</strong>：角色权限依次递增。访客（<code>10</code>） -&gt; 报告者（<code>20</code>） -&gt; 开发者（<code>30</code>） -&gt; 维护者（<code>40</code>） -&gt; 拥有者（<code>50</code>）</p><ul><li><strong>Guest（访客）</strong>：可以创建 issue、发表评论，不能访问项目的私有分支和查看代码</li><li><strong>Reporter（报告者）</strong>：可以克隆项目、创建 issue、发表评论，不能推送到非保护分支</li><li><strong>Developer（开发者）</strong>：可以克隆项目、创建 issue、发表评论，可以推送到非保护分支，可以接收已合并的代码</li><li><strong>Maintainer（维护者）</strong>：可以克隆项目、创建 issue、发表评论、推送到非保护分支、接收已合并的代码，还可以推送到保护分支、删除未保护的分支和标签</li><li><strong>Owner（拥有者）</strong>：可以管理项目、包括更改项目设置、删除项目等操作</li></ul></li><li><p><strong>访问到期日期（可选）</strong></p></li></ul><figure><img src="'+A+`" alt="添加用户" tabindex="0" loading="lazy"><figcaption>添加用户</figcaption></figure><h3 id="管理员用户上传代码" tabindex="-1"><a class="header-anchor" href="#管理员用户上传代码" aria-hidden="true">#</a> 管理员用户上传代码</h3><p>使用管理员用户（<code>root</code>）登录 GitLab 服务器。</p><p>将 <code>test_demo</code> 项目使用 SSH 克隆到本地。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone ssh://git@10.1.1.10/tests/test_demo.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置 Git 用户和邮箱：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> test_demo
<span class="token function">git</span> config user.name <span class="token string">&quot;Administrator&quot;</span>
<span class="token function">git</span> config user.email <span class="token string">&quot;root@example.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>test_demo</code> 项目中添加文件并上传：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">touch</span> hello.sh
<span class="token builtin class-name">echo</span> <span class="token string">&quot;echo &#39;Hello World!&#39;&quot;</span> <span class="token operator">&gt;</span> hello.sh
<span class="token function">chmod</span> +x hello.sh
<span class="token function">git</span> <span class="token function">add</span> hello.sh
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;add hello.sh&quot;</span>

<span class="token function">vim</span> README.md
<span class="token function">git</span> <span class="token function">add</span> README.md
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;change README.md&quot;</span>

<span class="token function">git</span> push origin main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>刷新 GitLab 中 <code>test_demo</code> 项目页面，查看上传的文件及脚本。</p><figure><img src="`+t+`" alt="上传代码" tabindex="0" loading="lazy"><figcaption>上传代码</figcaption></figure><h3 id="普通开发用户上传代码" tabindex="-1"><a class="header-anchor" href="#普通开发用户上传代码" aria-hidden="true">#</a> 普通开发用户上传代码</h3><p>使用普通开发用户（<code>zhangsan</code>）登录 GitLab 服务器。配置普通开发用户（<code>zhangsan</code>）<a href="#%E6%B7%BB%E5%8A%A0-ssh-%E5%AF%86%E9%92%A5">SSH 密钥</a>。</p><p>将 <code>test_demo</code> 项目使用 SSH 克隆到本地。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone ssh://git@10.1.1.10/tests/test_demo.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置 Git 用户和邮箱：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> test_demo
<span class="token function">git</span> config user.name <span class="token string">&quot;zhangsan&quot;</span>
<span class="token function">git</span> config user.email <span class="token string">&quot;zhangsan@example.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>test_demo</code> 项目中添加文件并上传：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">touch</span> <span class="token builtin class-name">test</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;test&quot;</span> <span class="token operator">&gt;</span> <span class="token builtin class-name">test</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">test</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;add test&quot;</span>

<span class="token function">git</span> push origin main
Counting objects: <span class="token number">3</span>, done.
Delta compression using up to <span class="token number">8</span> threads.
Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">2</span>/2<span class="token punctuation">)</span>, done.
Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, <span class="token number">309</span> bytes <span class="token operator">|</span> <span class="token number">309.00</span> KiB/s, done.
Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>
remote: GitLab: You are not allowed to push code to protected branches on this project.
To ssh://10.1.1.10/tests/test_demo.git
 <span class="token operator">!</span> <span class="token punctuation">[</span>remote rejected<span class="token punctuation">]</span> main -<span class="token operator">&gt;</span> main <span class="token punctuation">(</span>pre-receive hook declined<span class="token punctuation">)</span>
error: failed to push some refs to <span class="token string">&#39;ssh://git@10.1.1.10/tests/test_demo.git&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>普通开发用户（<code>zhangsan</code>）无法上传到 <code>main</code> 分支，<code>main</code> 分支默认受保护。</p><p>普通开发用户（<code>zhangsan</code>）创建分支，并推送到远程仓库。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch dev
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin dev:dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 GitLab 页面，查看 <code>test_demo</code> 项目 <code>dev</code> 分支。</p><figure><img src="`+P+'" alt="查看分支" tabindex="0" loading="lazy"><figcaption>查看分支</figcaption></figure><p>创建从 <code>dev</code> 到 <code>main</code> 合并分支请求，点击 <em>创建合并请求</em>。</p><figure><img src="'+H+'" alt="创建合并请求" tabindex="0" loading="lazy"><figcaption>创建合并请求</figcaption></figure><figure><img src="'+C+'" alt="创建合并请求" tabindex="0" loading="lazy"><figcaption>创建合并请求</figcaption></figure><p>使用管理员用户（<code>root</code>）登录 GitLab 服务器。查看合并请求，检查代码，没有问题就同意合并请求并删除 <code>dev</code> 分支。</p><figure><img src="'+D+'" alt="同意合并请求" tabindex="0" loading="lazy"><figcaption>同意合并请求</figcaption></figure><p>查看 <code>test_demo</code> 项目 <code>main</code> 分支，确认已经合并 <code>dev</code> 分支。</p><figure><img src="'+N+'" alt="查看分支" tabindex="0" loading="lazy"><figcaption>查看分支</figcaption></figure><p>刷新 GitLab 中 <code>test_demo</code> 项目页面，查看上传的文件及脚本。</p><figure><img src="'+t+`" alt="上传代码" tabindex="0" loading="lazy"><figcaption>上传代码</figcaption></figure><h3 id="创建标签" tabindex="-1"><a class="header-anchor" href="#创建标签" aria-hidden="true">#</a> 创建标签</h3><p>在 Git 中，<code>tag</code> 是标记存储库历史记录中特定提交的一种方式。<code>tag</code> 通常用于标记项目的特定版本。</p><p>例如：对于版本 <code>10.5.7</code>：</p><ul><li><strong>10</strong>：代表主要版本。主要版本是 <code>10.0.0</code>，但通常称为 <code>10.0</code></li><li><strong>5</strong>：代表小版本。次要版本是 <code>10.5.0</code>，但通常称为 <code>10.5</code></li><li><strong>7</strong>：表示补丁编号</li></ul><p>版本号的任何部分都可以是多个数字，例如：<code>13.10.11</code>。</p><p>可以从命令行或 GitLab 页面创建标签。</p><ul><li><p>命令行</p><ul><li><p>创建轻量级标签，使用 <code>git tag [TAG_NAME]</code> 命令，将 <code>TAG_NAME</code> 更改为您想要的标签名称</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag v1.0.0
<span class="token function">git</span> push origin v1.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建注释的标签，使用 <code>git tag -a [TAG_NAME] -m &quot;Message&quot;</code> 命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag <span class="token parameter variable">-a</span> v1.0.0 <span class="token parameter variable">-m</span> <span class="token string">&quot;Version v1.0.0&quot;</span>
<span class="token function">git</span> push origin v1.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>GitLab 页面</p><ul><li><p>在 极狐GitLab 实例页面左侧边栏的左上角，选择 <em>极狐图像 -&gt; 项目 -&gt; 选择要添加用户的项目（例如：test_demo） -&gt; 代码 -&gt; 标签 -&gt; 新建标签</em>。</p><figure><img src="`+R+'" alt="新建标签" tabindex="0" loading="lazy"><figcaption>新建标签</figcaption></figure></li><li><p>添加标签名称、选择分支、添加标签消息</p><figure><img src="'+B+'" alt="新建标签" tabindex="0" loading="lazy"><figcaption>新建标签</figcaption></figure></li></ul></li></ul><h2 id="备份-gitlab" tabindex="-1"><a class="header-anchor" href="#备份-gitlab" aria-hidden="true">#</a> 备份 GitLab</h2>',56),Z={href:"https://docs.gitlab.com/ee/administration/backup_restore/backup_gitlab.html",target:"_blank",rel:"noopener noreferrer"},X=n(`<p>您的软件或组织取决于 GitLab 实例中的数据。您需要确保此数据免受不良事件的影响，例如：</p><ul><li>数据损坏</li><li>意外删除数据</li><li>勒索软件攻击</li><li>云提供商意外停机</li></ul><p>可以通过包含备份的灾难恢复计划来减轻所有这些风险。</p><h3 id="linux-安装备份" tabindex="-1"><a class="header-anchor" href="#linux-安装备份" aria-hidden="true">#</a> Linux 安装备份</h3><ol><li><p>备份 GitLab 的配置文件</p><p>使用 <code>gitlab-ctl backup-etc</code> 命令用于在进行系统升级或配置更改之前，你可能想要备份当前的配置。GitLab 会将 <code>/etc/gitlab</code> 目录下的所有配置文件打包成一个 <code>.tar</code> 文件，并将其存储在 <code>/etc/gitlab/config_backup</code> 目录下。这个命令不会备份数据库或其他数据，只关注配置文件。</p><p>如果您希望备份全部的配置文件到一个指定的目录，您可以使用 <code>--backup-path &lt;DIRECTORY&gt;</code> 参数来指定备份文件的保存路径，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> gitlab-ctl backup-etc --backup-path /data/gitlab/backups
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外，<code>backup-etc</code> 命令不会删除旧的备份文件，除非您使用 <code>--delete-old-backups</code> 参数。</p></li><li><p>备份 GitLab 的数据</p><p>使用 <code>gitlab-backup create</code> 命令用于恢复整个 GitLab 实例。GitLab 会创建一个包含数据库、上传文件和其他相关数据的完整备份，并将其保存为一个 <code>.tar</code> 文件，通常位于 <code>gitlab_rails[&#39;backup_path&#39;]</code> 所指定的路径下，默认是 <code>/var/opt/gitlab/backups</code>。</p><p>这个备份文件包含了恢复 GitLab 实例所需的所有数据，包括数据库、附件和配置文件的当前状态。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> gitlab-backup create
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p><code>gitlab-ctl backup-etc</code> 主要用于备份配置文件，而 <code>gitlab-backup create</code> 则用于创建包含数据和配置文件的完整备份。</p><h3 id="docker-安装备份" tabindex="-1"><a class="header-anchor" href="#docker-安装备份" aria-hidden="true">#</a> Docker 安装备份</h3><ol><li><p>备份应用程序数据</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-t</span> <span class="token operator">&lt;</span>container name<span class="token operator">&gt;</span> gitlab-backup create
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>备份配置文件和机密</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-t</span> <span class="token operator">&lt;</span>container name<span class="token operator">&gt;</span> /bin/sh <span class="token parameter variable">-c</span> <span class="token string">&#39;gitlab-ctl backup-etc &amp;&amp; cd /etc/gitlab/config_backup &amp;&amp; cp $(ls -t | head -n1) /data/gitlab/backups/&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="恢复" tabindex="-1"><a class="header-anchor" href="#恢复" aria-hidden="true">#</a> 恢复</h2><p>您只能将备份恢复到与创建备份的 GitLab 版本和类型（CE 或 EE）完全相同的版本。</p><p>如果您的备份与当前安装的版本不同，您必须在恢复备份之前降级或升级 GitLab。</p><h3 id="必须恢复-gitlab-机密" tabindex="-1"><a class="header-anchor" href="#必须恢复-gitlab-机密" aria-hidden="true">#</a> 必须恢复 GitLab 机密</h3><p>要恢复备份，您还必须恢复 <code>GitLab Secrets</code>。其中包括数据库加密密钥、CI/CD 变量以及用于双因素身份验证的变量。如果没有密钥，就会出现多种问题，包括启用了双因素身份验证的用户失去访问权限，并且 GitLab 运行者无法登录。</p><p>恢复：</p><ul><li><code>/etc/gitlab/gitlab-secrets.json</code>（Linux 软件包安装）</li><li><code>/home/git/gitlab/.secret</code>（自行编译安装）</li></ul><h3 id="linux-安装恢复" tabindex="-1"><a class="header-anchor" href="#linux-安装恢复" aria-hidden="true">#</a> Linux 安装恢复</h3><p>此过程假设：</p><ul><li>您安装的 GitLab 版本和类型（CE/EE）与创建备份时的版本和类型完全相同</li><li>至少执行过一次 <code>sudo gitlab-ctl reconfigure</code> 命令</li><li>GitLab 正在运行。如果没有，使用 <code>sudo gitlab-ctl start</code> 命令启动</li></ul><p>首先确保您的备份 <code>tar</code> 文件位于 <code>gitlab.rb</code> 配置中描述的 <code>gitlab_rails[&#39;backup_path&#39;]</code> 备份目录中。默认为 <code>/var/opt/gitlab/backups</code> 备份文件需要归 <code>git</code> 用户所有。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">cp</span> 1715136572_2024_05_08_16.11.1-jh_gitlab_backup.tar /var/opt/gitlab/backups/
<span class="token function">sudo</span> <span class="token function">chown</span> git:git /var/opt/gitlab/backups/1715136572_2024_05_08_16.11.1-jh_gitlab_backup.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>停止连接到数据库的进程。让 GitLab 的其余部分保持运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> gitlab-ctl stop puma
<span class="token function">sudo</span> gitlab-ctl stop sidekiq
<span class="token comment"># 验证</span>
<span class="token function">sudo</span> gitlab-ctl status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，确保您已完成恢复先决条件 <code>gitlab-ctl reconfigure</code> 步骤，并在从原始安装复制 GitLab 机密文件后运行。</p><p>接下来恢复备份，指定要恢复的备份的 ID：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> gitlab-backup restore <span class="token assign-left variable">BACKUP</span><span class="token operator">=</span>1715136572_2024_05_08_16.11.1-jh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此命令将覆盖 GitLab 数据库的内容，名称中省略了 <code>_gitlab_backup.tar</code>。</p><p>接下来，重新启动并检查 GitLab：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> gitlab-ctl restart
<span class="token function">sudo</span> gitlab-rake gitlab:check <span class="token assign-left variable">SANITIZE</span><span class="token operator">=</span>true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>验证数据库值是否可以解密，特别是在 <code>/etc/gitlab/gitlab-secrets.json</code> 已还原的情况下，或者如果还原的目标是不同的服务器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> gitlab-rake gitlab:doctor:secrets
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了增加保证，您可以对上传的文件执行完整性检查：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> gitlab-rake gitlab:artifacts:check
<span class="token function">sudo</span> gitlab-rake gitlab:lfs:check
<span class="token function">sudo</span> gitlab-rake gitlab:uploads:check
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="docker-安装恢复" tabindex="-1"><a class="header-anchor" href="#docker-安装恢复" aria-hidden="true">#</a> Docker 安装恢复</h3><p>如果您使用 Docker Swarm，容器可能会在恢复过程中重新启动，因为 Puma 已关闭，因此容器运行状况检查失败。要解决此问题，请暂时禁用运行状况检查机制。</p><ol><li><p>编辑 <code>docker-compose.yml</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>
  <span class="token key atrule">disable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>部署堆栈</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stack deploy --compose-file docker-compose.yml mystack
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>恢复任务可以从主机运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 停止连接到数据库的进程</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token operator">&lt;</span>container name<span class="token operator">&gt;</span> gitlab-ctl stop puma
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token operator">&lt;</span>container name<span class="token operator">&gt;</span> gitlab-ctl stop sidekiq

<span class="token comment"># 继续之前，验证流程是否全部关闭</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token operator">&lt;</span>container name<span class="token operator">&gt;</span> gitlab-ctl status

<span class="token comment"># 运行恢复。注意：名称中省略了 &quot;_gitlab_backup.tar&quot;</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token operator">&lt;</span>container name<span class="token operator">&gt;</span> gitlab-backup restore <span class="token assign-left variable">BACKUP</span><span class="token operator">=</span>1715136572_2024_05_08_16.11.1-jh

<span class="token comment"># 重新启动 GitLab 容器</span>
<span class="token function">docker</span> restart <span class="token operator">&lt;</span>container name<span class="token operator">&gt;</span>

<span class="token comment"># 检查 GitLab</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token operator">&lt;</span>container name<span class="token operator">&gt;</span> gitlab-rake gitlab:check <span class="token assign-left variable">SANITIZE</span><span class="token operator">=</span>true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37);function J(W,F){const e=l("ExternalLinkIcon");return c(),p("div",null,[U,s("p",null,[a("参考 极狐GitLab "),s("a",O,[a("官网 SMTP 配置"),i(e)]),a("。")]),V,s("p",null,[a("在 极狐GitLab 中，您可以使用群组同时管理一个或多个相关项目。对群组的操作（如：创建群组、删除群组、添加用户到群组等）可以参考 极狐GitLab "),s("a",K,[a("官网群组文档"),i(e)]),a("。")]),Y,s("p",null,[a("参考 "),s("a",Z,[a("官网 GitLab 备份"),i(e)]),a("。")]),X])}const aa=o(I,[["render",J],["__file","basic_operation.html.vue"]]);export{aa as default};
