import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as d,o as c,c as o,b as a,e,d as r,f as n}from"./app-BI-bw2qy.js";const l="/assets/http_has_no_port-52vJI_c5.jpg",s="/assets/http_has_port-sm15zzQa.jpg",p={},h=n('<h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><p>用 HTTP 方式克隆没有携带自定义端口号。</p><figure><img src="'+l+`" alt="HTTP 没有端口" tabindex="0" loading="lazy"><figcaption>HTTP 没有端口</figcaption></figure><h2 id="原因" tabindex="-1"><a class="header-anchor" href="#原因" aria-hidden="true">#</a> 原因</h2><p>Docker 安装 GitLab 时，自定义访问端口（如：<code>8888</code>），使用 HTTP 方式克隆项目时，URL 没有携带自定义的端口号（<code>8888</code>），而是使用默认的端口（<code>80</code>）。</p><h2 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法" aria-hidden="true">#</a> 解决方法</h2><h3 id="解决方法-1" tabindex="-1"><a class="header-anchor" href="#解决方法-1" aria-hidden="true">#</a> 解决方法 1</h3><p>修改 <code>docker-compose.yml</code> 文件中 <code>external_url</code> 和 <code>ports</code> 的值：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>external_url <span class="token string">&quot;http://gitlab.example.com:8888&quot;</span>

ports:
  - <span class="token string">&#39;8888:8888&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),u={href:"https://docs.gitlab.cn/jh/install/docker.html#%E4%BD%BF%E7%94%A8-docker-compose-%E5%AE%89%E8%A3%85%E6%9E%81%E7%8B%90gitlab",target:"_blank",rel:"noopener noreferrer"},b=n('<p>再次访问 GitLab 界面，问题解决：</p><figure><img src="'+s+`" alt="HTTP 有端口" tabindex="0" loading="lazy"><figcaption>HTTP 有端口</figcaption></figure><h3 id="解决方法-2" tabindex="-1"><a class="header-anchor" href="#解决方法-2" aria-hidden="true">#</a> 解决方法 2</h3><p>进入到容器内部：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token operator">&lt;</span>容器 ID 或名称<span class="token operator">&gt;</span> /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改 <code>gitlab.yml</code> 文件内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /opt/gitlab/embedded/service/gitlab-rails/config
<span class="token function">vi</span> gitlab.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将 <code>port</code> 修改为您自定义的端口号（如：<code>8888</code>）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># ......省略部分内容</span>
  gitlab:
    <span class="token comment">## Web server settings (note: host is the FQDN, do not include http://)</span>
    host: <span class="token number">192.168</span>.52.186
    port: <span class="token number">8888</span>
    https: <span class="token boolean">false</span>
<span class="token comment"># ......省略部分内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在容器中重启 GitLab：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gitlab-ctl restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再次访问 GitLab 界面，问题解决：</p><figure><img src="`+s+'" alt="HTTP 有端口" tabindex="0" loading="lazy"><figcaption>HTTP 有端口</figcaption></figure>',13);function m(v,g){const i=d("ExternalLinkIcon");return c(),o("div",null,[h,a("p",null,[e("查看官网 "),a("a",u,[e("使用 Docker Compose 安装"),r(i)]),e(" 极狐 Gitlab。")]),b])}const k=t(p,[["render",m],["__file","http_clone_without_carrying_port.html.vue"]]);export{k as default};
