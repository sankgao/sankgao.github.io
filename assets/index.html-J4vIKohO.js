import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as d,o as c,c as a,a as n,b as e,e as r,d as t,f as l}from"./app-Q5qy_7_G.js";const s="/assets/gerrit-workflow-9ilMf6AH.png",h={},p=e("p",null,"记录一些 Gerrit 相关的信息。",-1),f=e("p",null,"Gerrit 是一款基于 Perforce 的代码审查工具，用于在将代码提交到中央代码存储库之前对更改进行同行评审。",-1),g=e("p",null,"Gerrit 是一种开放源代码的代码审查软件，使用网页界面。利用网页浏览器，同一个团队的软件开发者，可以相互审阅彼此修改后的代码，决定是否能够提交，回退或是继续修改。",-1),_=e("h2",{id:"历史",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#历史","aria-hidden":"true"},"#"),r(" 历史")],-1),u={href:"https://www.gerritcodereview.com/",target:"_blank",rel:"noopener noreferrer"},m=e("strong",null,"赫里特·里特费尔德",-1),G={href:"https://github.com/rietveld-codereview/rietveld",target:"_blank",rel:"noopener noreferrer"},b=l('<h2 id="技术迭代" tabindex="-1"><a class="header-anchor" href="#技术迭代" aria-hidden="true">#</a> 技术迭代</h2><ul><li>最早 Gerrit 是由 Python 写成</li><li>在 Gerrit 2.x 后，改成用 Java 与 SQL，使用 <strong>Google Web Toolkit</strong>（GWT）来产生前端的 JavaScript</li><li>在 Gerrit 3.x 后，NoteDb 取代了 SQL 数据库，所有元数据现在都存储在 Git 中，用户界面从 GWT 迁移到 Polymer</li></ul><h2 id="工作流程" tabindex="-1"><a class="header-anchor" href="#工作流程" aria-hidden="true">#</a> 工作流程</h2><p>Gerrit 大致的工作流程：</p><ol><li>编写代码</li><li>将代码提交到暂存区（<code>git add</code>）</li><li>将暂存区的内容提交到本地仓库（<code>git commit</code>）</li><li>将本地仓库推送到 Gerrit 服务器中（<code>git push</code>）</li><li>审核人员审核代码</li><li>审核通过后提交到代码仓库</li></ol><figure><img src="'+s+`" alt="Gerrit 工作流程" tabindex="0" loading="lazy"><figcaption>Gerrit 工作流程</figcaption></figure><h2 id="修改提交检测" tabindex="-1"><a class="header-anchor" href="#修改提交检测" aria-hidden="true">#</a> 修改提交检测</h2><p>Git 提供了一种持续更新提交直到完美的机制，用 <code>git commit --amend</code> 命令重新制作（重新记录）代码更改。以这种方式更新提交后，您的分支就会指向新的提交。但是，较旧的（不完美的）修订版本不会丢失。可以通过 <code>git reflog</code> 命令找到。</p><p>当您将更改推送到 Gerrit 时，Gerrit 无法使用 SHA-1，因为该值在 <code>git commit --amend</code> 调用时会发生变化。</p><p>Gerrit 通过提交消息中的页脚来标识概念性更改。每个提交消息页脚都包含一个 <code>Change-Id</code> 消息挂钩，它唯一标识其所有草稿中的更改。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Change-Id: I9e29f5469142cc7fce9e90b0b09f5d2186ff0990
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因此，如果 <code>Change-Id</code> 在提交修改时保持不变，Gerrit 会检测到每个新版本都引用相同的概念更改。Gerrit Web 界面对版本进行分组，以便审阅者可以在代码审阅期间看到您的更改如何演变。</p><p>对于 Gerrit 来说，标识符可以是随机的。</p><h2 id="gerrit-特有分支" tabindex="-1"><a class="header-anchor" href="#gerrit-特有分支" aria-hidden="true">#</a> Gerrit 特有分支</h2><p>Gerrit 禁止用户向 Git 的 <code>refs/heads</code> 命名空间下的引用执行推送（除非特别的授权），即不允许用户直接向分支进行提交。为了让开发者能够向 Git 服务器提交修订，Gerrit 的 Git 服务器只允许用户向特殊的引用 <code>refs/for/&lt;branch-name&gt;</code> 下执行推送，其中 <code>&lt;branch-name&gt;</code> 即为开发者的工作分支。向 <code>refs/for/&lt;branch-name&gt;</code> 命名空间下推送并不会在其中创建引用，而是为新的提交分配一个 ID，称为 <code>review-id</code> ，并为该 <code>review-id</code> 的访问建立如下格式的引用 <code>refs/changes/nn/&lt;review-id&gt;/m</code>，其中：</p><ul><li><code>review-id</code> 为 Gerrit 为评审任务顺序分配的全局唯一的号码</li><li><code>nn</code> 为 <code>review-id</code> 的后两位数，位数不足用零补齐。即 <code>nn</code> 为 <code>review-id</code> 除以 <code>100</code> 的余数</li><li><code>m</code> 为修订号，该 <code>review-id</code> 的首次提交修订号为 <code>1</code>，如果该修订被打回，重新提交修订号会自增</li></ul><p>Gerrit 提供一个特有的分支 <code>refs/for/*</code> 用来区分 <code>commit</code> 是提交到 Gerrit 服务器进行审核还是直接提交到远程 Git 仓库。</p><p>假如一个远程分支为 <code>master</code>，只有当代码被提交到 <code>refs/for/master</code> 分支时，Gerrit 才会知道，我收到了一个需要审核的代码推送，需要通知审核员来审核代码。当审核通过之后，Gerrit 会自动将这条分支合并到 <code>master</code> 主线上，然后邮件通知相关成员，<code>master</code> 分支有更新，需要的成员再去 <code>pull</code> 就好了。</p><h2 id="相关文档" tabindex="-1"><a class="header-anchor" href="#相关文档" aria-hidden="true">#</a> 相关文档</h2>`,19),v={href:"https://www.gerritcodereview.com/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/GerritCodeReview/gerrit",target:"_blank",rel:"noopener noreferrer"},x={href:"https://gerrit-ci.gerritforge.com",target:"_blank",rel:"noopener noreferrer"},k={href:"https://gerrithub.io/q/status:open+-is:wip",target:"_blank",rel:"noopener noreferrer"};function C(I,N){const i=d("ExternalLinkIcon");return c(),a("div",null,[p,n(" more "),f,g,_,e("p",null,[e("a",u,[r("Gerrit"),t(i)]),r(" 名字来自于荷兰设计师 "),m,r("（Gerrit Rietveld）。")]),e("p",null,[r("Gerrit Code Review 最初是 "),e("a",G,[r("Rietveld"),t(i)]),r(" 的一组简单补丁，最初是为了服务 Android 开源项目（AOSP）而构建的。因为对访问控制（ACL）相关的修正，而没有被集成到 Rietveld 中，由于功能和代码开始变得截然不同，因此需要不同的名称。")]),b,e("ul",null,[e("li",null,[e("a",v,[r("Gerrit 官网"),t(i)])]),e("li",null,[e("a",w,[r("Gerrit GitHub 地址"),t(i)])]),e("li",null,[e("a",x,[r("Gerrit 插件源"),t(i)])]),e("li",null,[e("a",k,[r("GerritHub 地址"),t(i)]),r("：GitHub 在线仓库和 Gerrithub 的功能合体")])])])}const H=o(h,[["render",C],["__file","index.html.vue"]]);export{H as default};
