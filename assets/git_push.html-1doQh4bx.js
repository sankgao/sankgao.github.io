import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,f as n}from"./app-LKRXdX8g.js";const t={},d=n(`<h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述" aria-hidden="true">#</a> 描述</h2><p><code>git push</code> 用于将本地分支的更改推送到一个远程仓库。默认情况下，它推送当前活动的本地分支到与其同名的远程分支。您也可以指定要推送的本地分支和远程分支，以及推送的内容（例如：标签或特定的提交）。</p><p><code>git push</code> 是协作开发中的重要命令，它允许团队成员共享代码更改并保持代码的同步。在使用它时，了解您的操作如何影响其他人以及如何在不造成冲突的情况下进行推送是非常重要的。</p><h2 id="选项" tabindex="-1"><a class="header-anchor" href="#选项" aria-hidden="true">#</a> 选项</h2><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>--all</code></td><td style="text-align:left;">推送所有分支</td></tr><tr><td style="text-align:center;"><code>--tags</code></td><td style="text-align:left;">推送所有标签到远程仓库</td></tr><tr><td style="text-align:center;"><code>--prune</code></td><td style="text-align:left;">删除在远程仓库中不存在但本地仍然引用的远程分支</td></tr><tr><td style="text-align:center;"><code>--repo=&lt;仓库&gt;</code></td><td style="text-align:left;">指定远程仓库</td></tr><tr><td style="text-align:center;"><code>-u | --set-upstream</code></td><td style="text-align:left;">指定默认远程仓库</td></tr></tbody></table><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><h3 id="直接推送" tabindex="-1"><a class="header-anchor" href="#直接推送" aria-hidden="true">#</a> 直接推送</h3><p>像 <code>git push &lt;仓库&gt;</code> 那样工作，其中 <code>&lt;仓库&gt;</code> 是当前分支的远程仓库（或者 <code>origin</code>，如果没有为当前分支配置远程仓库）。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="推送当前分支到远程仓库" tabindex="-1"><a class="header-anchor" href="#推送当前分支到远程仓库" aria-hidden="true">#</a> 推送当前分支到远程仓库</h3><p>例如：推送名为 <code>&lt;branch-name&gt;</code> 的本地分支到名为 <code>origin</code> 的远程仓库的对应分支。如果远程分支不存在，Git 通常会尝试创建它。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin <span class="token operator">&lt;</span>branch-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="推送所有分支到远程仓库" tabindex="-1"><a class="header-anchor" href="#推送所有分支到远程仓库" aria-hidden="true">#</a> 推送所有分支到远程仓库</h3><p>例如：推送所有本地分支到远程仓库。如果远程仓库中不存在相应的分支，它们也会被创建。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin <span class="token parameter variable">--all</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="推送标签到远程仓库" tabindex="-1"><a class="header-anchor" href="#推送标签到远程仓库" aria-hidden="true">#</a> 推送标签到远程仓库</h3><p>例如：将特定的标签推送到远程仓库。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin <span class="token operator">&lt;</span>tag-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="推送所有标签到远程仓库" tabindex="-1"><a class="header-anchor" href="#推送所有标签到远程仓库" aria-hidden="true">#</a> 推送所有标签到远程仓库</h3><p>例如：将所有本地标签推送到远程仓库。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin tags
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="推送并设置上游分支" tabindex="-1"><a class="header-anchor" href="#推送并设置上游分支" aria-hidden="true">#</a> 推送并设置上游分支</h3><p>当第一次推送一个本地分支到远程仓库时，可能想要设置该远程分支作为此本地分支的上游（<code>upstream</code>）。这样，将来使用 <code>git pull</code> 和 <code>git push</code> 而不必指定远程仓库和分支名称。</p><p>例如：使用 <code>-u</code> 选项指定该远程分支作为此本地分支的上游。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin <span class="token operator">&lt;</span>branch-name<span class="token operator">&gt;</span>
<span class="token comment"># 或</span>
<span class="token function">git</span> push origin <span class="token operator">&lt;</span>branch-name<span class="token operator">&gt;</span> --set-upstream
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="强制推送" tabindex="-1"><a class="header-anchor" href="#强制推送" aria-hidden="true">#</a> 强制推送</h3><p>有时您可能需要覆盖远程仓库上的更改。这通常是不推荐的，因为它可能会丢失其他人的工作，但如果您确定要这样做，可以使用 <code>--force</code> 或 <code>-f</code> 选项。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token parameter variable">-f</span> origin <span class="token operator">&lt;</span>branch-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者更安全地，您可以使用 <code>--force-with-lease</code>，它会检查远程分支是否包含您的本地更改，从而避免覆盖其他人的工作。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push --force-with-lease origin <span class="token operator">&lt;</span>branch-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="同步本地仓库和远程仓库" tabindex="-1"><a class="header-anchor" href="#同步本地仓库和远程仓库" aria-hidden="true">#</a> 同步本地仓库和远程仓库</h3><p>删除在远程仓库中不存在但本地仍然引用的远程分支</p><p>例如：如果本地的同名分支不存在了，那么远程分支 <code>tmp</code> 将被删除。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token parameter variable">--prune</span> remote refs/heads/*:refs/tmp/*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将确保如果 <code>refs/heads/foo</code> 不存在，那么远程的 <code>refs/tmp/foo</code> 将被删除。</p><h3 id="推送到远程指定分支" tabindex="-1"><a class="header-anchor" href="#推送到远程指定分支" aria-hidden="true">#</a> 推送到远程指定分支</h3><p>推送当前分支到远程引用匹配 <code>master</code> 的 <code>origin</code> 仓库中。这种形式可以方便地推送当前分支，而不必考虑其本地名称。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin HEAD:master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,38),i=[d];function r(c,l){return a(),s("div",null,i)}const h=e(t,[["render",r],["__file","git_push.html.vue"]]);export{h as default};
