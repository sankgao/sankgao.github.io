import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o,c as i,b as t,e,d as l,w as r,f as n}from"./app-I2r7Sjrs.js";const s={},h=t("h2",{id:"描述",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#描述","aria-hidden":"true"},"#"),e(" 描述")],-1),p=t("code",null,"git am",-1),g=n(`<p><code>git am</code> 的基本用法 <code>git am &lt;patchfile&gt;</code> 其中 <code>&lt;patchfile&gt;</code> 是补丁文件的路径。这个命令将读取补丁文件的内容，并将其应用到本地的代码库中。如果应用成功，将生成一个新的提交，包含了补丁所做的更改。</p><p><code>git am</code> 命令是 Git 中用于应用补丁文件的强大工具，它可以帮助开发者轻松地将补丁集成到他们的代码库中。通过结合其他 Git 命令和选项，开发者可以高效地管理和维护他们的代码库。</p><p><strong>注意事项：</strong></p><ul><li><code>git am</code> 只能应用 <code>.patch</code> 或 <code>.diff</code> 格式的补丁文件</li><li>补丁文件应该是以 UTF-8 编码保存的纯文本文件</li><li>补丁文件必须是基于当前代码库的最新提交生成的，否则可能会出现冲突</li></ul><h2 id="选项" tabindex="-1"><a class="header-anchor" href="#选项" aria-hidden="true">#</a> 选项</h2><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>-s, --signoff</code></td><td style="text-align:left;">在补丁文件中添加当前用户签名信息（<code>Signed-off-by:</code>）</td></tr><tr><td style="text-align:center;"><code>-3</code></td><td style="text-align:left;">如果遇到冲突，尝试进行三路合并（three-way merge），这有助于解决行号不匹配的问题</td></tr><tr><td style="text-align:center;"><code>--directory=&lt;dir&gt;</code></td><td style="text-align:left;">更改补丁中的文件路径，使补丁应用于指定目录中的文件</td></tr><tr><td style="text-align:center;"><code>-i, --interactive</code></td><td style="text-align:left;">交互式运行</td></tr></tbody></table><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><p>例如：如果您有一个名为 <code>example.patch</code> 的补丁文件，您可以使用以下命令将其应用到本地的代码库中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> am example.patch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将读取 <code>example.patch</code> 文件的内容，并将其应用到本地的代码库中。如果应用成功，将生成一个新的提交，包含了补丁所做的更改。</p>`,10);function m(f,_){const a=c("RouterLink");return o(),i("div",null,[h,t("p",null,[p,e(" 用于应用由 "),l(a,{to:"/computers/commands/git/git_format-patch.html"},{default:r(()=>[e("git format-patch")]),_:1}),e(" 或其他方式生成的补丁文件（patch files）到当前的代码库中。")]),g])}const y=d(s,[["render",m],["__file","git_am.html.vue"]]);export{y as default};
