import{_ as o,r as p,o as c,c as i,d as n,e as s,b as e,f as a}from"./app-f5426764.js";const r="/assets/linear-f6bd533d.png",l="/assets/tree-79abcf35.png",d="/assets/picture-d8e9330f.png",u="/assets/O_linear-6acc6ba2.png",g="/assets/O_logarithm-c7cb276a.png",k="/assets/O_constant-87aa5e10.png",m="/assets/O_polynomial-cb77fa13.png",h={},b=n("h2",{id:"算法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#算法","aria-hidden":"true"},"#"),s(" 算法")],-1),v=n("p",null,[n("strong",null,"算法（algorithm）"),s(" 是一个很古老的概念，最早来自数学领域。")],-1),y={class:"hint-container info"},f=a('<p class="hint-container-title">有一个关于算法的小故事，估计大家都有耳闻</p><p>在很久很久以前，曾经有一个顽皮又聪明的 “熊孩子”，天天在课堂上调皮捣蛋。</p><p>一次数学课上，老师为了让他们安静下来，给他们列了一道很难的算式，让他们一个小时内算出 <code>1 + 2 + 3 + …… + 100</code> 的得数。</p><p>老师以为，孩子们会按部就班地一步一步计算，就像下面这样：</p><blockquote><p>1 + 2 = 3</p><p>3 + 3 = 6</p><p>6 + 4 = 10</p><p>10 + 5 = 15</p><p>...</p></blockquote><p>全班只有 “熊孩子” 用了不到 20 分钟给出了答案，因为他想到了用以下方法计算：</p><blockquote><p>1 + 100 = 101</p><p>2 + 99 = 101</p><p>3 + 98 = 101</p><p>4 + 97 = 101</p><p>...</p></blockquote><p>一共有 <code>50</code> 个 <code>101</code> ，所以 <code>50 × 101</code> 就是 1 加到一百的得数。可以这样来计算：</p><p><code>(1 + 100) × 100 ÷ 2 = 5 050</code></p>',9),x={href:"https://baike.baidu.com/item/%E7%BA%A6%E7%BF%B0%C2%B7%E5%8D%A1%E5%B0%94%C2%B7%E5%BC%97%E9%87%8C%E5%BE%B7%E9%87%8C%E5%B8%8C%C2%B7%E9%AB%98%E6%96%AF/9963604",target:"_blank",rel:"noopener noreferrer"},_=n("strong",null,"等差数列求和",-1),O={href:"https://baike.baidu.com/item/%E9%AB%98%E6%96%AF%E7%AE%97%E6%B3%95/4727683",target:"_blank",rel:"noopener noreferrer"},T=a('<p>这是数学领域中算法的一个简单示例。在数学领域里，算法是用于解决某一类问题的公式和思想。</p><p>而计算机科学领域的算法，它的本质是一系列程序指令，用于解决特定的运算和逻辑问题。</p><p>从宏观上来看，数学领域的算法和计算机领域的算法有很多相通之处。</p><ul><li><p>算法有简单的，也有复杂的</p><ul><li><strong>简单的算法</strong>：例如：给出一组整数，找出其中最大的数</li><li><strong>复杂的算法</strong>：例如：在多种物品里选择装入背包的物品，使背包里的物品总价值最大；或找出从一个城市到另一个城市的最短路线</li></ul></li><li><p>算法有高效的，也有拙劣的</p><p>例如：刚才讲的从 1 加到 100。</p><ul><li><strong>高效的算法</strong>：高斯利用等差数列的规律，省时省力地求出了最终结果。显然是更加高效的算法</li><li><strong>拙劣的算法</strong>：老师心中所想的算法，按部就班地一个数一个数进行累加。虽然这种算法也能得到最终结果，但是其计算过程要低效得多</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">衡量算法好坏的重要标准有两个</p><ul><li><strong>时间复杂度</strong></li><li><strong>空间复杂度</strong></li></ul></div><h2 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h2><p><strong>数据结构（data structure）</strong> 是数据的组织、管理和存储格式，其使用目的是为了高效地访问和修改数据。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>数据结构是算法的基石。如果把算法比喻成美丽灵动的舞者，那么数据结构就是舞者脚下广阔而坚实的舞台。</p></div><p><strong>数据结构的组成方式：</strong></p><ul><li><p><strong>线性结构</strong></p><p>线性结构是最简单的数据结构，包括数组、链表，以及由它们衍生出来的栈、队列、哈希表。</p><figure><img src="'+r+'" alt="linear" tabindex="0" loading="lazy"><figcaption>linear</figcaption></figure></li><li><p><strong>树</strong></p><p>树是相对复杂的数据结构，其中比较有代表性的是二叉树，由它又衍生出了二叉堆之类的数据结构。</p><figure><img src="'+l+'" alt="tree" tabindex="0" loading="lazy"><figcaption>tree</figcaption></figure></li><li><p><strong>图</strong></p><p>图是更为复杂的数据结构，因为在图中会呈现出多对多的关联关系。</p><figure><img src="'+d+`" alt="picture" tabindex="0" loading="lazy"><figcaption>picture</figcaption></figure></li><li><p><strong>其他数据结构</strong></p><p>还有一些其他的千奇百怪的数据结构。它们由基本数据结构变形而来，用于解决某些特定问题，如跳表、哈希链表、位图等。</p></li></ul><p>有了数据结构这个舞台，算法才可以尽情舞蹈。在解决问题时，不同的算法会选用不同的数据结构。例如：排序算法中的堆排序，利用的就是二叉堆这样一种数据结构；再如缓存淘汰算法 <code>LRU</code>（Least Recently Used，最近最少使用），利用的就是特殊数据结构哈希链表。</p><h2 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度" aria-hidden="true">#</a> 时间复杂度</h2><p><strong>时间复杂度</strong> 是对一个算法运行时间长短的量度，用大 <code>O</code> 表示，记作 <code>T(n)=O(f(n))</code>。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>时间复杂度</strong> 是执行算法的时间成本</p></div><h3 id="基本操作执行次数" tabindex="-1"><a class="header-anchor" href="#基本操作执行次数" aria-hidden="true">#</a> 基本操作执行次数</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>由于受运行环境和输入规模的影响，代码的绝对执行时间是无法预估的。但却可以预估代码的基本操作执行次数</p></div><p>关于代码的基本操作执行次数，下面用生活中的四个场景来进行说明。</p><ul><li><p><strong>场景一</strong></p><p>给小灰一个长度为 <code>10cm</code> 的面包，小灰每 <code>3</code> 分钟吃掉 <code>1cm</code>，那么吃掉整个面包需要多久？</p><p>答案自然是 <code>3 × 10</code> 即 <code>30</code> 分钟。</p><p>如果面包的长度是 <code>n cm</code> 呢？此时吃掉整个面包，需要 <code>3</code> 乘以 <code>n</code> 即 <code>3n</code> 分钟。</p><p>如果用一个函数来表达吃掉整个面包所需要的时间，可以记作 <strong>T(n)=3n</strong>，<code>n</code> 为面包的长度。</p></li><li><p><strong>场景二</strong></p><p>给小灰一个长度为 <code>16cm</code> 的面包，小灰每 <code>5</code> 分钟吃掉面包剩余长度的一半，即第 <code>5</code> 分钟吃掉 <code>8cm</code>，第 <code>10</code> 分钟吃掉 <code>4cm</code>，第 <code>15</code> 分钟吃掉 <code>2cm</code>…… 那么小灰把面包吃得只剩 <code>1cm</code>，需要多久呢？</p><p>这个问题用数学方式表达就是，数字 <code>16</code> 不断地除以 <code>2</code>，那么除几次以后的结果等于 <code>1</code>？这里涉及数学中的对数，即以 <code>2</code> 为底 <code>16</code> 的对数 <strong>log<sub>2</sub>16。</strong></p><p>因此，把面包吃得只剩下 <code>1cm</code>，需要 <strong>5 × log<sub>2</sub>16</strong> 即 <code>20</code> 分钟。</p><p>如果面包的长度是 <code>n cm</code> 呢？此时，需要 <code>5</code> 乘以 <strong>log<sub>2</sub>n</strong> 即 <strong>5log<sub>2</sub>n</strong> 分钟，记作 <strong>T(n)=5log<sub>2</sub>n。</strong></p></li><li><p><strong>场景三</strong></p><p>给小灰一个长度为 <code>10cm</code> 的面包和一个鸡腿，小灰每 <code>2</code> 分钟吃掉 <code>1</code> 个鸡腿。那么小灰吃掉整个鸡腿需要多久呢？</p><p>答案自然是 <code>2</code> 分钟。因为这里只要求吃掉鸡腿，和 <code>10cm</code> 的面包没有关系。</p><p>如果面包的长度是 <code>n cm</code> 呢？无论面包多长，吃掉鸡腿的时间都是 <code>2</code> 分钟，记作 <strong>T(n)=2。</strong></p></li><li><p><strong>场景四</strong>：</p><p>给小灰一个长度为 <code>10cm</code> 的面包，小灰吃掉第一个 <code>1cm</code> 需要 <code>1</code> 分钟时间，吃掉第二个 <code>1cm</code> 需要 <code>2</code> 分钟时间，吃掉第三个 <code>1cm</code> 需要 <code>3</code> 分钟时间…… 每吃 <code>1cm</code> 所花的时间就比吃上一个 <code>1cm</code> 多用 <code>1</code> 分钟。那么小灰吃掉整个面包需要多久呢？</p><p>答案是从 <code>1</code> 累加到 <code>10</code> 的总和，也就是 <code>55</code> 分钟。</p><p>如果面包的长度是 <code>n cm</code> 呢？根据高斯算法，此时吃掉整个面包需要 <code>1 + 2 + 3 + …… + n</code> 即 <code>(1 + n) × n / 2</code> 分钟，也就是 <strong>0.5n<sup>2</sup> + 0.5n</strong> 分钟，记作 <strong>T(n)=0.5n<sup>2</sup> + 0.5n。</strong></p></li></ul><p>上面所讲的是吃东西所花费的时间，这一思想同样适用于对程序 <strong>基本操作执行次数</strong> 的统计。设 <code>T(n)</code> 为程序基本操作执行次数的函数（也可以认为是程序的相对执行时间函数），<code>n</code> 为输入规模。</p><p>刚才的四个场景分别对应了程序中最常见的四种执行方式。</p><ul><li><p><strong>场景一</strong>：<strong>T(n)=3n</strong></p><p>执行次数是 <strong>线性</strong> 的。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">eat1</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;等待 1 分钟&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;等待 1 分钟&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;吃 1cm 面包&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>场景二</strong>：<strong>T(n)=5log<sub>2</sub>n</strong></p><p>执行次数是用 <strong>对数</strong> 计算的。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">eat2</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;等待 1 分钟&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;等待 1 分钟&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;等待 1 分钟&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;等待 1 分钟&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;吃一半面包&quot;</span><span class="token punctuation">)</span>
        n <span class="token operator">/=</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>场景三</strong>：<strong>T(n)=2</strong></p><p>执行次数是 <strong>常量。</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">eat3</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;等待 1 分钟&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;吃 1 个鸡腿&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>场景四</strong>：<strong>T(n)=0.5n<sup>2</sup> + 0.5n</strong></p><p>执行次数是用 <strong>多项式</strong> 计算的。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">eat4</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;等待 1 分钟&quot;</span><span class="token punctuation">)</span>
        
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;吃 1cm 面包&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="渐进时间复杂度" tabindex="-1"><a class="header-anchor" href="#渐进时间复杂度" aria-hidden="true">#</a> 渐进时间复杂度</h3><p>若存在函数 <code>f(n)</code>，使得当 <code>n</code> 趋近于无穷大时，<code>T(n)/f(n)</code> 的极限值为不等于零的常数，则称 <code>f(n)</code> 是 <code>T(n)</code> 的同数量级函数。记作 <code>T(n)=O(f(n))</code>，称为 <code>O(f(n))</code>，<code>O</code> 为算法的 <strong>渐进时间复杂度</strong>，简称为 <strong>时间复杂度。</strong></p><p>因为渐进时间复杂度用大写 <code>O</code> 来表示，所以也被称为 <strong>大 O 表示法。</strong></p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>时间复杂度就是把程序的相对执行时间函数 <code>T(n)</code> 简化为一个数量级，这个数量级可以是 <strong>n</strong>、<strong>n<sup>2</sup></strong>、<strong>n<sup>3</sup></strong> 等</p></div><p><strong>推导出时间复杂度有如下几个原则：</strong></p><ul><li>如果运行时间是常数量级，则用常数 <code>1</code> 表示</li><li>只保留时间函数中的最高阶项</li><li>如果最高阶项存在，则省去最高阶项前面的系数</li></ul><p>刚才的四个场景对应的时间复杂度。</p><ul><li><p><strong>场景一</strong>：<strong>T(n)=3n</strong></p><p>最高阶项为 <code>3n</code>，省去系数 <code>3</code>，则转化的时间复杂度为：<strong>T(n)=O(n)。</strong></p><figure><img src="`+u+'" alt="T(n)=O(n)" tabindex="0" loading="lazy"><figcaption>T(n)=O(n)</figcaption></figure></li><li><p><strong>场景二</strong>：<strong>T(n)=5log<sub>2</sub>n</strong></p><p>最高阶项为 <strong>5log<sub>2</sub>n</strong>，省去系数 <code>5</code>，则转化的时间复杂度为：<strong>T(n)=O(log<sub>2</sub>n)。</strong></p><figure><img src="'+g+'" alt="T(n)=O(log2n)" tabindex="0" loading="lazy"><figcaption>T(n)=O(log<sub>2</sub>n)</figcaption></figure></li><li><p><strong>场景三</strong>：<strong>T(n)=2</strong></p><p>只有常数量级，则转化的时间复杂度为：<strong>T(n)=O(1)。</strong></p><figure><img src="'+k+'" alt="T(n)=O(1)" tabindex="0" loading="lazy"><figcaption>T(n)=O(1)</figcaption></figure></li><li><p><strong>场景四</strong>：<strong>T(n)=0.5n<sup>2</sup> + 0.5n</strong></p><p>最高阶项为 <strong>0.5n<sup>2</sup></strong>，省去系数 <code>0.5</code>，则转化的时间复杂度为：<strong>T(n)=O(n<sup>2</sup>)。</strong></p><figure><img src="'+m+`" alt="T(n)=O(n2)" tabindex="0" loading="lazy"><figcaption>T(n)=O(n<sup>2</sup>)</figcaption></figure></li></ul><p>这四种时间复杂度对程度执行用时时间由低到高为：</p><p><strong>O(1)</strong> &lt; <strong>O(log<sub>2</sub>n)</strong> &lt; <strong>O(n)</strong> &lt; <strong>O(n<sup>2</sup>)</strong></p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>在编程的世界中有各种各样的算法，除了上述四个场景，还有许多不同形式的时间复杂度，例如：<strong>O(nlog<sub>2</sub>n)</strong>、<strong>O(n<sup>3</sup>)</strong>、<strong>O(mn)</strong>、<strong>O(2<sup>n</sup>)</strong>、<strong>O(n!)</strong></p></div><h3 id="时间复杂度的巨大差异" tabindex="-1"><a class="header-anchor" href="#时间复杂度的巨大差异" aria-hidden="true">#</a> 时间复杂度的巨大差异</h3><p>算法A 的执行次数是 <strong>T(n)=100n</strong>，时间复杂度是 <strong>O(n)。</strong></p><p>算法B 的执行次数是 <strong>T(n)=5n<sup>2</sup></strong>，时间复杂度是 <strong>O(n<sup>2</sup>)。</strong></p><p>算法A 运行在小灰家里的老旧电脑上，算法B 运行在某台超级计算机上，超级计算机的运行速度是老旧电脑的 100 倍。</p><p>那么，随着输入规模 <code>n</code> 的增长，两种算法谁运行速度更快呢？</p><table><thead><tr><th style="text-align:center;">n（规模）</th><th style="text-align:center;">T(n) = 100n x 100</th><th style="text-align:center;">T(n) = 5n<sup>2</sup></th></tr></thead><tbody><tr><td style="text-align:center;">n = 1</td><td style="text-align:center;">10 000</td><td style="text-align:center;">5</td></tr><tr><td style="text-align:center;">n = 5</td><td style="text-align:center;">50 000</td><td style="text-align:center;">125</td></tr><tr><td style="text-align:center;">n = 10</td><td style="text-align:center;">100 000</td><td style="text-align:center;">500</td></tr><tr><td style="text-align:center;">n = 100</td><td style="text-align:center;">1 000 000</td><td style="text-align:center;">50 000</td></tr><tr><td style="text-align:center;">n = 1 000</td><td style="text-align:center;">10 000 000</td><td style="text-align:center;">5 000 000</td></tr><tr><td style="text-align:center;">n = 10 000</td><td style="text-align:center;">100 000 000</td><td style="text-align:center;">500 000 000</td></tr><tr><td style="text-align:center;">n = 100 000</td><td style="text-align:center;">1 000 000 000</td><td style="text-align:center;">50 000 000 000</td></tr><tr><td style="text-align:center;">n = 1 000 000</td><td style="text-align:center;">10 000 000 000</td><td style="text-align:center;">5 000 000 000 000</td></tr></tbody></table><p>从上面的表格可以看出，当 <code>n</code> 的值很小时，算法A 的运行用时要远大于算法B；当 <code>n</code> 的值在 <code>1 000</code> 左右时，算法A 和算法B 的运行时间已经比较接近；随着 <code>n</code> 的值越来越大，甚至达到十万、百万时，算法A 的优势开始显现出来，算法B 的运行速度则越来越慢，差距越来越明显。这就是不同时间复杂度带来的差距。</p><h2 id="空间复杂度" tabindex="-1"><a class="header-anchor" href="#空间复杂度" aria-hidden="true">#</a> 空间复杂度</h2><p>和时间复杂度类似，<strong>空间复杂度</strong> 是对一个算法在运行过程中临时占用存储空间大小的量度，它同样使用了 <strong>大 O 表示法。</strong></p><p>程序占用空间大小的计算公式记作 <code>S(n)=O(f(n))</code>，其中 <code>n</code> 为问题的规模，<code>f(n)</code> 为算法所占存储空间的函数。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>空间复杂度</strong> 是执行算法的空间成本</p></div><h3 id="空间复杂度的计算" tabindex="-1"><a class="header-anchor" href="#空间复杂度的计算" aria-hidden="true">#</a> 空间复杂度的计算</h3><p>常见的空间复杂度有下面几种情形：</p><ul><li><p><strong>常量空间</strong></p><p>当算法的存储空间大小固定，和输入规模没有直接的关系时，空间复杂度记作 <strong>O(1)</strong>。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    i <span class="token operator">=</span> <span class="token number">3</span>
    <span class="token comment"># do something</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>线性空间</strong></p><p>当算法分配的空间是一个线性的集合（如：数组），并且集合大小和输入规模 <code>n</code> 成正比时，空间复杂度记作 <strong>O(n)</strong>。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fun2</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    my_arrary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n<span class="token punctuation">]</span>
    <span class="token comment"># do something</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>二维空间</strong></p><p>当算法分配的空间是一个二维数组集合，并且集合的长度和宽度都与输入规模 <code>n</code> 成正比时，空间复杂度记作 <strong>O(n<sup>2</sup>)</strong>。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fun3</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n<span class="token punctuation">]</span> <span class="token operator">*</span> n
    <span class="token comment"># do something</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>递归空间</strong></p><p>递归是一个比较特殊的场景。虽然递归代码中并没有显式地声明变量或集合，但是计算机在执行程序时，会专门分配一块内存，用来存储 <strong>方法调用栈。</strong></p><p>方法调用栈包括 <strong>进栈</strong> 和 <strong>出栈</strong> 两个行为。</p><p>当进入一个新方法时，执行进栈操作，把调用的方法和参数信息压入栈中；当方法返回时，执行出栈操作，把调用的方法和参数信息从栈中弹出。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fun4</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        fun4<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment"># do something</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行递归操作所需要的内存空间和递归的深度成正比。纯粹的递归操作的空间复杂度也是线性的，如果递归的深度是 <code>n</code>，那么空间复杂度就是 <strong>O(n)。</strong></p></li></ul><p>常见的空间复杂度按照从低到高的顺序为：</p><p><strong>O(1)</strong> &lt; <strong>O(n)</strong> &lt; <strong>O(n2)</strong> 等。</p><p>其中递归算法的空间复杂度和递归深度成正比。</p><h3 id="时间与空间的取舍" tabindex="-1"><a class="header-anchor" href="#时间与空间的取舍" aria-hidden="true">#</a> 时间与空间的取舍</h3><p>在绝大多数时候，时间复杂度更为重要一些，宁可多分配一些内存空间，也要提升程序的执行速度。</p>`,51);function w(q,B){const t=p("ExternalLinkIcon");return c(),i("div",null,[b,v,n("div",y,[f,n("p",null,[s("这个 “熊孩子” 就是后来著名的犹太数学家 "),n("a",x,[s("约翰·卡尔·弗里德里希·高斯"),e(t)]),s("，而他所采用的这种 "),_,s(" 的方法，被称为 "),n("a",O,[s("高斯算法"),e(t)]),s("。（上文的故事情节与史实略有出入。）")])]),T])}const A=o(h,[["render",w],["__file","algorithm_data_structure.html.vue"]]);export{A as default};
