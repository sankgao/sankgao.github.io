import{_ as n,o as s,c as a,f as p}from"./app-b7b4f124.js";const t={},e=p(`<p>Python 内置的数据类型如：序列（列表、元组等）、集合和字典等可以容纳多项数据，称它们为 <strong>容器类型的数据。</strong></p><h2 id="序列" tabindex="-1"><a class="header-anchor" href="#序列" aria-hidden="true">#</a> 序列</h2><p>序列是一块用于存放多个值的连续内存空间，并且按一定顺序排列，每一个元素（值）都分配一个数字，称为索引或位置，通过该索引可以取出相应的值。序列结构主要有列表、元组、集合、字典和字符串。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>集合和字典不支持索引、切片、相加和相乘操作</p></div><h3 id="索引" tabindex="-1"><a class="header-anchor" href="#索引" aria-hidden="true">#</a> 索引</h3><p>序列中的每一个元素都有一个编号，也称为索引。这个索引是从 <code>0</code> 开始递增的，即下标为 <code>0</code> 表示第一个元素，下标为 <code>1</code> 表示第二个元素，以此类推。</p><p>符号、空格也会占一个元素。索引有正值索引和负值索引之分，正值索引（下标）是从前向后，默认从 <code>0</code> 开始的，而负值索引（下标）是从后向前，默认从 <code>-1</code> 开始的。</p><p>可以通过下标运算符访问序列中的元素，下标运算符是跟在容器数据后的一对中括号（<code>[]</code>），中括号带有参数，对于序列类型的数据，这个参数就是元素的索引序号。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Hello<span class="token punctuation">,</span> W

元素<span class="token number">1</span>  元素<span class="token number">2</span>  元素<span class="token number">3</span>  元素<span class="token number">4</span>  元素<span class="token number">5</span>  元素<span class="token number">6</span>  元素<span class="token number">7</span>  元素<span class="token number">8</span>
  H     e      l      l     o      <span class="token punctuation">,</span>            W
  <span class="token number">0</span>     <span class="token number">1</span>      <span class="token number">2</span>      <span class="token number">3</span>     <span class="token number">4</span>      <span class="token number">5</span>     <span class="token number">6</span>      <span class="token number">7</span>      正值索引（下标索引序号）
 <span class="token operator">-</span><span class="token number">8</span>    <span class="token operator">-</span><span class="token number">7</span>     <span class="token operator">-</span><span class="token number">6</span>     <span class="token operator">-</span><span class="token number">5</span>    <span class="token operator">-</span><span class="token number">4</span>     <span class="token operator">-</span><span class="token number">3</span>    <span class="token operator">-</span><span class="token number">2</span>     <span class="token operator">-</span><span class="token number">1</span>      负值索引（下标索引序号）


a <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：H</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：!</span>

<span class="token comment"># 若索引超过范围，则会报错</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：IndexError: string index out of range</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="切片" tabindex="-1"><a class="header-anchor" href="#切片" aria-hidden="true">#</a> 切片</h3><p>通给切片操作可以生成一个新的序列。</p><p><strong>语法格式</strong>：<code>sname[start: end: step]</code></p><ul><li><strong>sname</strong>：表示序列的名称</li><li><strong>start</strong>：表示切片的开始位置（包括该位置），如果不指定，默认为 0</li><li><strong>end</strong>：表示切片的结束位置（不包括该位置），如果不知道，默认为序列的长度</li><li><strong>step</strong>：表示切片的步长，如果省略，默认为 1</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：el</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：Hel</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：lo, World!</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：ello, World</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：orld</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：Hello, World!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="序列相加" tabindex="-1"><a class="header-anchor" href="#序列相加" aria-hidden="true">#</a> 序列相加</h3><p>支持两种类型的序列相加，即将两个序列相加，不会去除重复的元素，使用（<code>+</code>）运算符实现。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>不能将列表和元组相加，也不能将列表和字符串相加</p></div><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&quot;Hello,&quot;</span>
b <span class="token operator">=</span> <span class="token string">&quot;World!&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：Hello,World!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="序列乘法" tabindex="-1"><a class="header-anchor" href="#序列乘法" aria-hidden="true">#</a> 序列乘法</h3><p>使用一个序列乘以数字 n 会生成一个新的序列。新序列的内容为原来序列被重复 n 次的结果。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span>
b <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">3</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：Hello, World!Hello, World!Hello, World!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="序列成员测试" tabindex="-1"><a class="header-anchor" href="#序列成员测试" aria-hidden="true">#</a> 序列成员测试</h3><p>如果检查正确，则输出 <code>True</code>，否则输出 <code>False</code>。</p><ul><li><p><strong>in</strong></p><p>使用 <code>in</code> 关键字检查某个元素是否包含在序列中。</p><p><strong>语法格式</strong>：<code>value in sequence</code></p><ul><li><strong>value</strong>：表示要检查的元素</li><li><strong>sequence</strong>：表示指定的序列</li></ul></li><li><p><strong>not in</strong></p><p>使用 <code>not in</code> 关键字检查某个元素是否不包含在序列中。</p><p><strong>语法格式</strong>：<code>value not in sequence</code></p><ul><li><strong>value</strong>：表示要检查的元素</li><li><strong>sequence</strong>：表示指定的序列</li></ul></li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span> <span class="token keyword">in</span> a<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span> <span class="token keyword">not</span> <span class="token keyword">in</span> a<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="计算序列的长度、最大值和最小值" tabindex="-1"><a class="header-anchor" href="#计算序列的长度、最大值和最小值" aria-hidden="true">#</a> 计算序列的长度、最大值和最小值</h3><p>提供了内置函数计算序列的长度、最大值和最小值。</p><ul><li><strong>len()</strong>：序列的长度</li><li><strong>max()</strong>：序列的最大值（元素）</li><li><strong>min()</strong>：序列的最小值（元素）</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span>
b <span class="token operator">=</span> <span class="token string">&#39;6546186638948&#39;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：13</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：13</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：r</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：9</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果： </span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="列表" tabindex="-1"><a class="header-anchor" href="#列表" aria-hidden="true">#</a> 列表</h2><p>列表是按特定顺序排列的元素组成的，是 Python 中内置的 <strong>可变序列</strong>，可以追加、插入、删除和修改列表中的元素。列表中所有元素都放在一对中括号中（<code>[]</code>），两个相邻元素之间使用逗号（<code>,</code>）分隔。可以将整数、实数、字符串、列表、元组等任何类型的内容放入到列表中，并且同一个列表中，元素类型可以不同，因为它们之间没有任何关系。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>列表中允许存在相同的元素</p></div><h3 id="创建列表" tabindex="-1"><a class="header-anchor" href="#创建列表" aria-hidden="true">#</a> 创建列表</h3><p>使用赋值运算符直接创建列表。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>
mylist01 <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[10, 20, 30]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mylist01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建空列表。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建数值列表。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="访问列表元素" tabindex="-1"><a class="header-anchor" href="#访问列表元素" aria-hidden="true">#</a> 访问列表元素</h3><p>直接使用 <code>print()</code> 函数即可。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加列表" tabindex="-1"><a class="header-anchor" href="#添加列表" aria-hidden="true">#</a> 添加列表</h3><p>通过使用列表对象的 <code>append()</code> 方法实现在列表的末尾添加元素。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>
mylist<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[10, 20, 30, 40]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过使用列表对象的 <code>insert()</code> 方法实现在列表的指定位置添加元素。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>
mylist<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[10, 40, 20, 30]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过使用列表对象的 <code>extend()</code> 方法实现将一个列表中的全部元素添加到另一个列表中。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>
mylist01 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span>
mylist<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>mylist01<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[10, 20, 30, 30, 40, 50]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修改列表" tabindex="-1"><a class="header-anchor" href="#修改列表" aria-hidden="true">#</a> 修改列表</h3><p>只需要通过索引获取该元素，然后再为其重新赋值即可。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>
mylist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">40</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[10, 40, 30]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除列表元素" tabindex="-1"><a class="header-anchor" href="#删除列表元素" aria-hidden="true">#</a> 删除列表元素</h3><p>根据索引删除列表元素，通过 <code>del 语句</code> 实现。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>
<span class="token keyword">del</span> mylist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[10, 30]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据元素删除，通过 <code>remove()</code> 方法，如果指定的元素不存在将会报错。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>
mylist<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>

<span class="token comment"># 指定元素不在列表中</span>
mylist<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：ValueError: list.remove(x): x not in list</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[10, 20]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="遍历列表" tabindex="-1"><a class="header-anchor" href="#遍历列表" aria-hidden="true">#</a> 遍历列表</h3><p>使用 for 循环遍历。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> mylist<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token number">10</span>
<span class="token number">20</span>
<span class="token number">30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 for 循环和 <code>enumerate()</code> 函数实现，可以同时输出索引值和元素内容。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> index<span class="token punctuation">,</span> i <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> i<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token number">0</span> <span class="token number">10</span>
<span class="token number">1</span> <span class="token number">20</span>
<span class="token number">2</span> <span class="token number">30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对列表进行统计和计算" tabindex="-1"><a class="header-anchor" href="#对列表进行统计和计算" aria-hidden="true">#</a> 对列表进行统计和计算</h3><p>使用列表对象的 <code>count()</code> 方法可以获取指定元素在列表中出现的次数。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span>
num <span class="token operator">=</span> mylist<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用列表对象的 <code>index()</code> 方法可以获取指定元素在列表中首次出现的索引位置，如果指定元素不存在将报错。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span>
num <span class="token operator">=</span> mylist<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
num01 <span class="token operator">=</span> mylist<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0</span>

<span class="token comment"># 指定元素不在列表中</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>num01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：ValueError: 60 is not in list</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>sum()</code> 函数用于统计数值列表中各元素的和。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span>
total <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：120</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对列表进行排序" tabindex="-1"><a class="header-anchor" href="#对列表进行排序" aria-hidden="true">#</a> 对列表进行排序</h3><p>使用列表对象的 <code>sort()</code> 方法可以对原列表中的元素进行排序，改变原有列表。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>
mylist<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[10, 20, 30, 50]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>sorted()</code> 内置函数，可以对列表进行排序，不改变原有的列表。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>
mylist01 <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[20, 10, 50, 30]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mylist01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[10, 20, 30, 50]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="列表推导式" tabindex="-1"><a class="header-anchor" href="#列表推导式" aria-hidden="true">#</a> 列表推导式</h3><p>使用列表推导式可以快速生成一个列表，或者根据某个列表生成满足指定需求的列表。</p><p>生成指定范围的数值列表。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random

mylist <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[77, 45, 18, 14, 30, 58, 97, 88, 91, 83]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据需求生成指定列表。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">5330</span><span class="token punctuation">,</span> <span class="token number">2988</span><span class="token punctuation">,</span> <span class="token number">6200</span><span class="token punctuation">,</span> <span class="token number">1998</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">]</span>
newlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> mylist<span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;原列表：&quot;</span><span class="token punctuation">,</span> mylist<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;原列表乘 0.5 后生成的新列表：&quot;</span><span class="token punctuation">,</span> newlist<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
原列表： <span class="token punctuation">[</span><span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">5330</span><span class="token punctuation">,</span> <span class="token number">2988</span><span class="token punctuation">,</span> <span class="token number">6200</span><span class="token punctuation">,</span> <span class="token number">1998</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">]</span>
原列表乘 <span class="token number">0.5</span> 后生成的新列表： <span class="token punctuation">[</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">2665</span><span class="token punctuation">,</span> <span class="token number">1494</span><span class="token punctuation">,</span> <span class="token number">3100</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">,</span> <span class="token number">4444</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从列表中选择符合条件的元素组成新的列表。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">5330</span><span class="token punctuation">,</span> <span class="token number">2988</span><span class="token punctuation">,</span> <span class="token number">6200</span><span class="token punctuation">,</span> <span class="token number">1998</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">]</span>
newlist <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> mylist <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;原列表：&quot;</span><span class="token punctuation">,</span> mylist<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;原列表中大于 5000 生成的新列表：&quot;</span><span class="token punctuation">,</span> newlist<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
原列表： <span class="token punctuation">[</span><span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">5330</span><span class="token punctuation">,</span> <span class="token number">2988</span><span class="token punctuation">,</span> <span class="token number">6200</span><span class="token punctuation">,</span> <span class="token number">1998</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">]</span>
原列表中大于 <span class="token number">5000</span> 生成的新列表： <span class="token punctuation">[</span><span class="token number">5330</span><span class="token punctuation">,</span> <span class="token number">6200</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>if 作用是用于判断，只有满足条件时，将满足条件的元素值，生成一个新的列表</p></div><p>从列表中选择符合条件的元素组成新的列表，大于 5000 输出原有值，小于 5000 输出小于 5000。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">5330</span><span class="token punctuation">,</span> <span class="token number">2988</span><span class="token punctuation">,</span> <span class="token number">6200</span><span class="token punctuation">,</span> <span class="token number">1998</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">]</span>
newlist <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">5000</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">&quot;小于 5000&quot;</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> mylist<span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;原列表：&quot;</span><span class="token punctuation">,</span> mylist<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;原列表中大于 5000 和 小于 5000 生成的新列表：&quot;</span><span class="token punctuation">,</span> newlist<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
原列表： <span class="token punctuation">[</span><span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">5330</span><span class="token punctuation">,</span> <span class="token number">2988</span><span class="token punctuation">,</span> <span class="token number">6200</span><span class="token punctuation">,</span> <span class="token number">1998</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">]</span>
原列表中大于 <span class="token number">5000</span> 和 小于 <span class="token number">5000</span> 生成的新列表： <span class="token punctuation">[</span><span class="token string">&#39;小于 5000&#39;</span><span class="token punctuation">,</span> <span class="token number">5330</span><span class="token punctuation">,</span> <span class="token string">&#39;小于 5000&#39;</span><span class="token punctuation">,</span> <span class="token number">6200</span><span class="token punctuation">,</span> <span class="token string">&#39;小于 5000&#39;</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>if...else</code> 作用的用于赋值，满足条件时，执行 if 前面的代码；不满足条件时，执行 else 后面的代码</p></div><h3 id="二维列表" tabindex="-1"><a class="header-anchor" href="#二维列表" aria-hidden="true">#</a> 二维列表</h3><p>二维列表中的信息以行和列的形式表示，第一个下标表示元素所在的行，第二个下标表示元素所在的列。常用的三种方法：</p><ul><li><p><strong>直接定义二维列表</strong></p><p>语法格式：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>listname <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>元素<span class="token number">11</span><span class="token punctuation">,</span> 元素<span class="token number">12</span><span class="token punctuation">,</span> 元素<span class="token number">13</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> 元素1n<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>元素<span class="token number">21</span><span class="token punctuation">,</span> 元素<span class="token number">22</span><span class="token punctuation">,</span> 元素<span class="token number">23</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> 元素2n<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>元素<span class="token number">31</span><span class="token punctuation">,</span> 元素<span class="token number">32</span><span class="token punctuation">,</span> 元素<span class="token number">33</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> 元素3n<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">[</span>元素n1<span class="token punctuation">,</span> 元素n2<span class="token punctuation">,</span> 元素n3<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> 元素nn<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>listname</strong>：表示生成的列表名称</li><li><strong>[元素11, 元素12, 元素13, ..., 元素1n]</strong>：表示二维列表的第一行，也是一个列表。其中 “元素11, 元素12, 元素13, ..., 元素1n” 表示第一行中的列</li><li><strong>[元素21, 元素22, 元素23, ..., 元素2n]</strong>：表示二维列表的第二行</li><li><strong>[元素31, 元素32, 元素33, ..., 元素3n]</strong>：表示二维列表的第三行</li><li><strong>[元素n1, 元素n2, 元素n3, ..., 元素nn</strong>]：表示二维列表的第 n 行</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>listname <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token string">&#39;千&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;山&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;鸟&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;飞&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;绝&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&#39;万&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;径&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;人&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;踪&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;灭&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&#39;孤&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;舟&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;蓑&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;笠&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;翁&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&#39;独&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;钓&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;寒&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;江&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;雪&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>listname<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;千&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;山&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;鸟&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;飞&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;绝&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;万&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;径&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;人&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;踪&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;灭&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;孤&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;舟&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;蓑&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;笠&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;翁&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;独&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;钓&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;寒&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;江&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;雪&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>使用嵌套的 for 循环创建</strong></p><p>每创建一行，行内再创建 5 个列表。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>使用列表推导式创建</strong></p><p>每创建一行，行内再创建 5 个列表。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>j <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>使用二维列表输出不同版式的古诗。例如：柳宗元《江雪》。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>str1 <span class="token operator">=</span> <span class="token string">&quot;千山鸟飞绝&quot;</span>
str2 <span class="token operator">=</span> <span class="token string">&quot;万径人踪灭&quot;</span>
str3 <span class="token operator">=</span> <span class="token string">&quot;孤舟蓑笠翁&quot;</span>
str4 <span class="token operator">=</span> <span class="token string">&quot;独钓寒江雪&quot;</span>
verse <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;横版&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>verse<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>verse<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>


<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;竖版&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
verse<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>verse<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>verse<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> 横版 <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
千山鸟飞绝
万径人踪灭
孤舟蓑笠翁
独钓寒江雪
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> 竖版 <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
独孤万千
钓舟径山
寒蓑人鸟
江笠踪飞
雪翁灭绝
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="元组" tabindex="-1"><a class="header-anchor" href="#元组" aria-hidden="true">#</a> 元组</h2><p>元组（tuple）与列表类似，也是由一系列按特定顺序排列的元素组成，但是它是不可变序列。</p><h3 id="创建元组" tabindex="-1"><a class="header-anchor" href="#创建元组" aria-hidden="true">#</a> 创建元组</h3><p>使用赋值运算符直接创建元组。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：(10, 20, 30)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建元组时，小括号（<code>()</code>）不是必须的，Python 中只要将一组元素值用逗号（<code>,</code>）分隔，默认就是元组。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：(10, 20, 30)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建元组时，如果只有只有一个元素值，则需要在元素的后面加一个逗号（<code>,</code>）否则创建的不是元组。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>
num01 <span class="token operator">=</span> <span class="token number">10</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：(10,)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>num01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建空元组。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mytuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mytuple<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除元组" tabindex="-1"><a class="header-anchor" href="#删除元组" aria-hidden="true">#</a> 删除元组</h3><p>使用 <code>del</code> 语句删除。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：(10, 20, 30)</span>

<span class="token keyword">del</span> num

<span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：NameError: name &#39;num&#39; is not defined. Did you mean: &#39;sum&#39;?。没有这个名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="访问元组" tabindex="-1"><a class="header-anchor" href="#访问元组" aria-hidden="true">#</a> 访问元组</h3><p>使用 <code>print()</code> 函数即可。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：(10, 20, 30)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指定索引获取元组元素。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用切片方式获取指定的元素。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：(10, 20)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修改元组" tabindex="-1"><a class="header-anchor" href="#修改元组" aria-hidden="true">#</a> 修改元组</h3><p>元组是不可变序列，所以不能对它单个元素值进行修改，但可以对元组重新进行赋值。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：(10, 20, 30)</span>

num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：TypeError: &#39;tuple&#39; object does not support item assignment。元组不支持指定元素重新赋值</span>

num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：(10, 50, 30)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用加号（+）连接组合元组。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>
num01 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>
num02 <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">+</span> num01<span class="token punctuation">)</span>
num03 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">+</span> num
num04 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">+</span> num

<span class="token keyword">print</span><span class="token punctuation">(</span>num02<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：(10, 20, 30, 40, 50, 60)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>num03<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：(40, 50, 10, 20, 30)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>num04<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：TypeError: can only concatenate list (not &quot;tuple&quot;) to list。不能将列表用连接符添加到元组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>元组连接时，连接的内容只能是元组，不能使用其它元素进行连接</p></div><h3 id="元组推导式" tabindex="-1"><a class="header-anchor" href="#元组推导式" aria-hidden="true">#</a> 元组推导式</h3><p>使用元组推导式可以快速生成一个元组，它的表现形式和列表推导式类似。</p><p>生成指定范围的数值列表。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random

mytuple <span class="token operator">=</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
mytuple01 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mytuple<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;generator object &lt;genexpr&gt; at 0x000001AA0BD8A2D0&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mytuple01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：(36, 65, 71, 52, 86, 49, 85, 46, 47, 11)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>使用元组推导式生成的元组，需要使用 <code>tuple()</code> 函数转换为元组，否则生成的是一个生成器对象</p></div><h2 id="元组与列表的区别" tabindex="-1"><a class="header-anchor" href="#元组与列表的区别" aria-hidden="true">#</a> 元组与列表的区别</h2><ul><li>列表属于可变序列，可以随时修改或者删除；元组属于不可变序列，其中的元素不可以修改，除非整体替换</li><li>列表可以使用 <code>append()</code>、<code>extend()</code>、<code>insert()</code>、<code>remove()</code> 和 <code>pop()</code> 等方法实现添加和修改列表元素，而元组没有这几个方法，所以不能向元组中添加、修改和删除元素</li><li>列表可以使用切片访问和修改列表中的元素；元组也支持切片，但只支持通过切片访问元组中的元素，不支持修改</li><li>元组比列表的访问和处理速度快</li><li>列表不能作为字典的键，而元组可以</li></ul><h2 id="字典" tabindex="-1"><a class="header-anchor" href="#字典" aria-hidden="true">#</a> 字典</h2><p>字典与列表类似，也是可变序列，不过列表是有序的可变序列，字典是无序的可变序列，保存的内容是以 “键-值” 对的形式存放的。</p><p>字典的特征：</p><ul><li>通过键而不是通过索引来读取</li><li>字典是任意对象的无序集合</li><li>字典是可变的，并且可以任意嵌套</li><li>字典中的键必须唯一，如果键出现多次，则最后一个值会被记住</li><li>字典中的键必须不可变，可以使用数字、字符串或者元组，但不能使用列表</li></ul><h3 id="创建字典" tabindex="-1"><a class="header-anchor" href="#创建字典" aria-hidden="true">#</a> 创建字典</h3><p>通过 <code>key-value</code> 的方式创建。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;24&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{&#39;zhangsan&#39;: &#39;20&#39;, &#39;lisi&#39;: &#39;24&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建空字典。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

或者

my_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>zip()</code> 函数将已有的数据快速创建字典。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wangwu&#39;</span><span class="token punctuation">]</span>
age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;24&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;25&#39;</span><span class="token punctuation">]</span>
mydict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{&#39;zhangsan&#39;: &#39;20&#39;, &#39;lisi&#39;: &#39;24&#39;, &#39;wangwu&#39;: &#39;25&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 dict 对象的 <code>fromkeys()</code> 方法创建值为 None 的字典。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wangwu&#39;</span><span class="token punctuation">]</span>
mydict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span>name<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{&#39;zhangsan&#39;: None, &#39;lisi&#39;: None, &#39;wangwu&#39;: None}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用已经存在的元组和列表创建字典。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wangwu&#39;</span><span class="token punctuation">]</span>
name01 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wangwu&#39;</span><span class="token punctuation">)</span>
age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;24&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;25&#39;</span><span class="token punctuation">]</span>
mydict <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> age<span class="token punctuation">}</span>
mydict01 <span class="token operator">=</span> <span class="token punctuation">{</span>name01<span class="token punctuation">:</span> age<span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：TypeError: unhashable type: &#39;list&#39;，无法处理 list 类型</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mydict01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{(&#39;zhangsan&#39;, &#39;lisi&#39;, &#39;wangwu&#39;): [&#39;20&#39;, &#39;24&#39;, &#39;25&#39;]}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>使用这种方式创建字典，字典中的键（key）不能为列表</p></div><h3 id="添加字典元素" tabindex="-1"><a class="header-anchor" href="#添加字典元素" aria-hidden="true">#</a> 添加字典元素</h3><p>字典是可变序列，所以可以随时在字典中添加 “key-value”。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;24&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{&#39;zhangsan&#39;: &#39;20&#39;, &#39;lisi&#39;: &#39;24&#39;}</span>

mydict<span class="token punctuation">[</span><span class="token string">&#39;wangwu&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;25&#39;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{&#39;zhangsan&#39;: &#39;20&#39;, &#39;lisi&#39;: &#39;24&#39;, &#39;wangwu&#39;: &#39;25&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在字典中 “键” 是唯一的，如果添加的新 “键” 已经存在，那么将使用新的值替换原来的 “键” 值。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;24&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{&#39;zhangsan&#39;: &#39;20&#39;, &#39;lisi&#39;: &#39;24&#39;}</span>

mydict<span class="token punctuation">[</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;25&#39;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{&#39;zhangsan&#39;: &#39;25&#39;, &#39;lisi&#39;: &#39;24&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除字典" tabindex="-1"><a class="header-anchor" href="#删除字典" aria-hidden="true">#</a> 删除字典</h3><p>使用 <code>del</code> 命令删除整个字典。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;24&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{&#39;zhangsan&#39;: &#39;20&#39;, &#39;lisi&#39;: &#39;24&#39;}</span>

<span class="token keyword">del</span> mydict

<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：NameError: name &#39;mydict&#39; is not defined. Did you mean: &#39;dict&#39;?，没有这个名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>clear()</code> 方法将字典变为空字典。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;24&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{&#39;zhangsan&#39;: &#39;20&#39;, &#39;lisi&#39;: &#39;24&#39;}</span>

mydict<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>pop()</code> 方法删除并默认返回指定键（key）的元素，如果指定键（key）不存在，则报错或者指定返回内容。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;24&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：20</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">&#39;wangwu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：KeyError: &#39;wangwu&#39;。没有指定的 key 值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">&#39;wangwu&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;没有 wangwu 的年龄&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：没有 wangwu 的年龄</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="访问字典" tabindex="-1"><a class="header-anchor" href="#访问字典" aria-hidden="true">#</a> 访问字典</h3><p>使用 <code>print()</code> 函数。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;24&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{&#39;zhangsan&#39;: &#39;20&#39;, &#39;lisi&#39;: &#39;24&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问字典指定的元素，可以通过下标的方式实现，与列表和元组不同，这里的下标不是索引号，而是键（key）。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;24&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">[</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <strong>if 语句</strong> 对不存在的键进行处理。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;24&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;wangwu 的年龄是：&quot;</span><span class="token punctuation">,</span> mydict<span class="token punctuation">[</span><span class="token string">&#39;wangwu&#39;</span><span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token string">&#39;wangwu&#39;</span> <span class="token keyword">in</span> mydict <span class="token keyword">else</span> <span class="token string">&quot;字典里没有名字是 wangwu 的人&quot;</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
wangwu 的年龄是： 字典里没有名字是 wangwu 的人
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用字典对象的 <code>get()</code> 方法获取指定的键。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;24&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;zhangsan 的年龄是：&quot;</span><span class="token punctuation">,</span> mydict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;wangwu 的年龄是：&quot;</span><span class="token punctuation">,</span> mydict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;wangwu&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;字典里没有名字是 wangwu 的人&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
zhangsan 的年龄是： <span class="token number">20</span>
wangwu 的年龄是： 字典里没有名字是 wangwu 的人
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="遍历字典" tabindex="-1"><a class="header-anchor" href="#遍历字典" aria-hidden="true">#</a> 遍历字典</h3><p>使用字典对象的 <code>items()</code> 方法可以获取字典的 “key-value” 对的列表，将各个元素以元组的方式输出。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;24&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">for</span> item <span class="token keyword">in</span> mydict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token punctuation">(</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;20&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;24&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取具体的每个键和值。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;24&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> mydict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">&quot;的年龄是&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
zhangsan 的年龄是 <span class="token number">20</span>
lisi 的年龄是 <span class="token number">24</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字典推导式" tabindex="-1"><a class="header-anchor" href="#字典推导式" aria-hidden="true">#</a> 字典推导式</h3><p>使用字典推导式可以快速的生成一个字典，和列表推导式类似。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random

mydict <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{1: 61, 2: 51, 3: 75, 4: 30}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字典推导式也可以通过列表生成字典。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">]</span>
age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;24&#39;</span><span class="token punctuation">]</span>

mydict <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> j <span class="token operator">+</span> <span class="token string">&quot;岁&quot;</span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{&#39;zhangsan&#39;: &#39;20岁&#39;, &#39;lisi&#39;: &#39;24岁&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h2><p>Python 中的集合用于保存不重复的元素，如果有重复的元素，只保留一个，集合是无序序列，有可变集合（set）和不可变集合（fozenset）两种。</p><h3 id="创建集合" tabindex="-1"><a class="header-anchor" href="#创建集合" aria-hidden="true">#</a> 创建集合</h3><p>直接使用 “<code>{}</code>” 创建集合。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>myset <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>myset<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{40, 10, 20, 30}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>set()</code> 函数创建集合，<code>set()</code> 函数可以将列表、元组等其它可迭代的对象转换为集合。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>myset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>myset<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{40, 10, 20, 30}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建空集合。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>myset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>myset<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：set()</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>myset<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;class &#39;set&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在创建空集合时，只能使用 <code>set()</code> 实现，不能使用 <code>{}</code>，因为 <code>{}</code> 表示创建一个空字典</p></div><h3 id="添加集合元素" tabindex="-1"><a class="header-anchor" href="#添加集合元素" aria-hidden="true">#</a> 添加集合元素</h3><p>使用 <code>add()</code> 方法向集合中添加元素。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>myset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
myset<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>myset<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{40, 10, 50, 20, 30}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除集合元素" tabindex="-1"><a class="header-anchor" href="#删除集合元素" aria-hidden="true">#</a> 删除集合元素</h3><p>使用 <code>del</code> 语句删除整个集合。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>myset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">del</span> myset

<span class="token keyword">print</span><span class="token punctuation">(</span>myset<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：NameError: name &#39;myset&#39; is not defined。没有这个名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>pop()</code> 方法随机删除一个元素。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>myset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
myset<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>myset<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{10, 20, 30}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>remove()</code> 和 <code>discard()</code> 方法删除指定元素，但当删除的元素不存在时 <code>remove()</code> 方法会报错，<code>discard()</code> 方法不会报错。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>myset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
myset01 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
myset<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
myset01<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
myset<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：KeyError: 50。没有指定 key</span>
myset01<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>myset<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{40, 20, 30}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myset01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{40, 10, 30}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>clear()</code> 方法清空集合。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>myset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
myset<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>myset<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：set()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>使用 <code>remove()</code> 和 <code>discard()</code> 方法时，最好先判断是否存在，可以使用 <code>in</code> 关键字实现。例如：</p></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>myset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">50</span> <span class="token keyword">in</span> myset<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：False</span>

<span class="token keyword">if</span> <span class="token number">50</span> <span class="token keyword">in</span> myset<span class="token punctuation">:</span>
    myset<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;已删除 50&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;50 不存在&quot;</span><span class="token punctuation">)</span>


<span class="token number">50</span> 不存在  <span class="token comment"># 输出结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="集合的交集、并集、差集和对称差集运算" tabindex="-1"><a class="header-anchor" href="#集合的交集、并集、差集和对称差集运算" aria-hidden="true">#</a> 集合的交集、并集、差集和对称差集运算</h3><p>进行交集运算使用 “<code>&amp;</code>” 符号；并集运算使用 “<code>|</code>” 符号；差集运算使用 “<code>-</code>” 符号；对称差集运算使用 “<code>^</code>” 符号。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>myset <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">}</span>
myset01 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;交集运算，在 myset 和 myset01 都存在的有：&quot;</span><span class="token punctuation">,</span> myset <span class="token operator">&amp;</span> myset01<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;并集运算，即在 myset 也在 myset01 的有：&quot;</span><span class="token punctuation">,</span> myset <span class="token operator">|</span> myset01<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;差集运算，只在 myset 不在 myset01 的有：&quot;</span><span class="token punctuation">,</span> myset <span class="token operator">-</span> myset01<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;对称差集运算，myset 和 myset01 中不相同的有：&quot;</span><span class="token punctuation">,</span> myset <span class="token operator">^</span> myset01<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
交集运算，在 myset 和 myset01 都存在的有： <span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span>
并集运算，即在 myset 也在 myset01 的有： <span class="token punctuation">{</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span>
差集运算，只在 myset 不在 myset01 的有： <span class="token punctuation">{</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span>
对称差集运算，myset 和 myset01 中不相同的有： <span class="token punctuation">{</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,203),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","containers.html.vue"]]);export{r as default};
