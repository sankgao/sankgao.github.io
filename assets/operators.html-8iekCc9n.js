import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as t,f as a}from"./app-icfFSHOT.js";const e={},l=a(`<h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><h3 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符" aria-hidden="true">#</a> 算数运算符</h3><p>算术运算符用于组织整数类型和浮点类型的数据，有 <strong>一元运算符</strong> 和 <strong>二元运算符</strong> 之分。</p><p>一元算术运算符有两个：<code>+</code>（正号）和 <code>-</code>（负号）。例如：<code>+a</code> 还是 <code>a</code>，<code>-a</code> 是对 <code>a</code> 的取反运算。</p><p>二元算术运算符如下表所示：</p><table><thead><tr><th style="text-align:center;">算数运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>++</strong></td><td style="text-align:left;">依次相加</td></tr><tr><td style="text-align:center;"><strong>--</strong></td><td style="text-align:left;">依次相减</td></tr><tr><td style="text-align:center;"><strong>+</strong></td><td style="text-align:left;">加</td></tr><tr><td style="text-align:center;"><strong>-</strong></td><td style="text-align:left;">减</td></tr><tr><td style="text-align:center;"><strong>*</strong></td><td style="text-align:left;">乘</td></tr><tr><td style="text-align:center;"><strong>/</strong></td><td style="text-align:left;">除</td></tr><tr><td style="text-align:center;"><strong>%</strong></td><td style="text-align:left;">取余或（求模）</td></tr><tr><td style="text-align:center;"><strong>**</strong></td><td style="text-align:left;">指数或（幂）</td></tr><tr><td style="text-align:center;"><strong>//</strong></td><td style="text-align:left;">取整除</td></tr></tbody></table><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：4</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2.0</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">//</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：1</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：16</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h3><p>赋值运算符只是一种简写，只有算数和位运算符中的二元运算符才有对应的赋值运算符。</p><table><thead><tr><th style="text-align:center;">赋值运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>=</strong></td><td style="text-align:left;">普通赋值</td></tr><tr><td style="text-align:center;"><strong>+=</strong></td><td style="text-align:left;">加赋值</td></tr><tr><td style="text-align:center;"><strong>-=</strong></td><td style="text-align:left;">减赋值</td></tr><tr><td style="text-align:center;">*<strong>=</strong></td><td style="text-align:left;">乘赋值</td></tr><tr><td style="text-align:center;"><strong>/=</strong></td><td style="text-align:left;">除赋值</td></tr><tr><td style="text-align:center;"><strong>%=</strong></td><td style="text-align:left;">取余赋值</td></tr><tr><td style="text-align:center;"><strong>**=</strong></td><td style="text-align:left;">幂赋值</td></tr><tr><td style="text-align:center;"><strong>//=</strong></td><td style="text-align:left;">整除赋值</td></tr><tr><td style="text-align:center;"><strong>&amp;=</strong></td><td style="text-align:left;">位与赋值</td></tr><tr><td style="text-align:center;"><strong>|=</strong></td><td style="text-align:left;">位或赋值</td></tr><tr><td style="text-align:center;"><strong>^=</strong></td><td style="text-align:left;">位异赋值</td></tr><tr><td style="text-align:center;"><strong>&lt;&lt;=</strong></td><td style="text-align:left;">左移赋值</td></tr><tr><td style="text-align:center;"><strong>&gt;&gt;=</strong></td><td style="text-align:left;">右移赋值</td></tr></tbody></table><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 单个变量赋值</span>
num <span class="token operator">=</span> <span class="token number">1</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：1</span>

<span class="token comment"># 多个变量赋值</span>
num1<span class="token punctuation">,</span> float1<span class="token punctuation">,</span> str1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world&#39;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>float1<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0.5</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：hello world</span>

<span class="token comment"># 多变量赋相同值</span>
a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">10</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：10</span>

<span class="token comment"># 加赋值运算符</span>
a <span class="token operator">=</span> <span class="token number">100</span>
a <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># a = a + 1</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：101</span>

<span class="token comment"># 减赋值运算符</span>
b <span class="token operator">=</span> <span class="token number">100</span>
b <span class="token operator">-=</span> <span class="token number">1</span>  <span class="token comment"># b = b - 1</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：99</span>

<span class="token comment"># 乘赋值运算符</span>
c <span class="token operator">=</span> <span class="token number">100</span>
c <span class="token operator">*=</span> <span class="token number">2</span>  <span class="token comment"># c = c * 2</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：200</span>

<span class="token comment"># 除赋值运算符</span>
d <span class="token operator">=</span> <span class="token number">100</span>
d <span class="token operator">/=</span> <span class="token number">2</span>  <span class="token comment"># d = d / 2</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：50.0</span>

<span class="token comment"># 整除赋值运算符</span>
e <span class="token operator">=</span> <span class="token number">100</span>
e <span class="token operator">//=</span> <span class="token number">3</span>  <span class="token comment"># e = e // 3</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：33</span>

<span class="token comment"># 取余赋值运算符</span>
f <span class="token operator">=</span> <span class="token number">100</span>
f <span class="token operator">%=</span> <span class="token number">3</span>  <span class="token comment"># f = f % 3</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：1</span>

<span class="token comment"># 幂赋值运算符</span>
g <span class="token operator">=</span> <span class="token number">100</span>
g <span class="token operator">**=</span> <span class="token number">3</span>  <span class="token comment"># g = g ** 3</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：1000000</span>

<span class="token comment"># 先算复合赋值运算符右边的表达式，再算复合赋值运算</span>
h <span class="token operator">=</span> <span class="token number">100</span>
h <span class="token operator">*=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span>  <span class="token comment"># h = 100 * (1 + 2)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：300</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h3><p>比较运算符用于比较两个表达式的大小，其结果是布尔类型的数据，即 <code>True</code> 或 <code>False</code>。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>比较运算符可用于任意类型的数据，但参与比较的两种类型的数据要相互兼容，即能进行隐式转换或显示转换</p></div><table><thead><tr><th style="text-align:center;">比较运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>&gt;</strong></td><td style="text-align:left;">大于</td></tr><tr><td style="text-align:center;"><strong>&lt;</strong></td><td style="text-align:left;">小于</td></tr><tr><td style="text-align:center;"><strong>==</strong></td><td style="text-align:left;">等于</td></tr><tr><td style="text-align:center;"><strong>!=</strong></td><td style="text-align:left;">不等于</td></tr><tr><td style="text-align:center;"><strong>&gt;=</strong></td><td style="text-align:left;">大于等于</td></tr><tr><td style="text-align:center;"><strong>&lt;=</strong></td><td style="text-align:left;">小于等于</td></tr><tr><td style="text-align:center;"><strong>is</strong></td><td style="text-align:left;">两个对象地址（<code>id</code>）为同一个对象地址（<code>id</code>）</td></tr><tr><td style="text-align:center;"><strong>is not</strong></td><td style="text-align:left;">两个对象地址（<code>id</code>）为不同对象地址（<code>id</code>）</td></tr></tbody></table><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True。判断左边大于右边</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True。判断左边小于右边</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True。判断左边等于右边</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True。判断左边不等于右边</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True。判断左边大于等于右边</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True。判断的左边小于等于右边</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span>

a <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
b <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：140506224367496</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：140506224367496</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True</span>

a <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span>
b <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：140506208811952</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：140506208812208</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> <span class="token keyword">not</span> b<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True。交互环境跟 .py 文件结果是不一样的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h3><p>逻辑运算符用于对布尔型变量进行运算，其结果也是布尔型</p><table><thead><tr><th style="text-align:center;">逻辑运算符</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>and</strong></td><td style="text-align:left;">逻辑与。如果两个语句都为真，则返回 True</td></tr><tr><td style="text-align:center;"><strong>or</strong></td><td style="text-align:left;">逻辑或。如果其中一个语句为真，则返回 True</td></tr><tr><td style="text-align:center;"><strong>not</strong></td><td style="text-align:left;">逻辑非。反转结果，如果结果为 true，则返回 False</td></tr></tbody></table><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True。逻辑与运算</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True。逻辑或运算</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True。逻辑非运算，取反</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>数字之间逻辑运算：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># and 运算符，只要有一个值为 0，结果为 0，否则结果为最后一个非 0 数字</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">and</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">and</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">and</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">and</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：1</span>

<span class="token comment"># or 运算符，只要所有值为 0，结果才为 0，否则结果为第一个非 0 数字</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">or</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">or</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">or</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">or</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">or</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符" aria-hidden="true">#</a> 位运算符</h3><p>位运算是以二进位（bit）为单位进行运算的，操作数和结果都是整数类型的数据。</p><table><thead><tr><th style="text-align:center;">位运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>&amp;</strong></td><td style="text-align:left;">位与：只有对应操作数位都是 1 时，结果位才是 1，否则为 0</td></tr><tr><td style="text-align:center;"><strong>|</strong></td><td style="text-align:left;">位或：只有对应操作数位都是 0 时，结果位才是 0，否则为 1</td></tr><tr><td style="text-align:center;"><strong>^</strong></td><td style="text-align:left;">位异：只有对应操作数位都是 0 或都是 1 时，结果位才是 0，否则位 1</td></tr><tr><td style="text-align:center;"><strong>~</strong></td><td style="text-align:left;">位反：将操作数中对应的二进制数 1 修改为 0；0 修改为 1</td></tr><tr><td style="text-align:center;"><strong>&gt;&gt;</strong></td><td style="text-align:left;">右移：将一个二进制操作数向右移动指定的位数，右边（低位端）溢出的位被丢弃，而在填充左边（高位端）的空位时，如果最高位是 0（正数），左侧空位填入 0；如果最高位是 1（负数），左侧空位填入 1。右移位运算相当于除以 2 的 n 次幂</td></tr><tr><td style="text-align:center;"><strong>&lt;&lt;</strong></td><td style="text-align:left;">左移：将一个二进制操作数向左移动指定的位数，左边（高位端）溢出的位被丢弃，右边（低位端）的空位用 0 补充。左移位运算相当于乘以 2 的 n 次幂</td></tr></tbody></table><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># &amp;，位与</span>
  0000 0000 0000 <span class="token number">1100</span>
<span class="token operator">&amp;</span> 0000 0000 0000 <span class="token number">1000</span>
-----------------------
  0000 0000 0000 <span class="token number">1000</span>

<span class="token comment"># |，位或</span>
  0000 0000 0000 0110
<span class="token operator">|</span> 0000 0000 0000 <span class="token number">1010</span>
-----------------------
  0000 0000 0000 <span class="token number">1110</span>

<span class="token comment"># ^，位异</span>
  0000 0000 0001 <span class="token number">1111</span>
^ 0000 0000 0001 0110
-----------------------
  0000 0000 0000 <span class="token number">1001</span>

<span class="token comment"># ~，位反</span>
~ 0000 0000 0111 <span class="token number">1011</span>
-----------------------
  <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1000</span> 0100

<span class="token comment"># &gt;&gt; 右移</span>
十进制：50  0000 0011 0010
十进制：25  0000 0001 <span class="token number">1001</span>  <span class="token comment"># 上面的向右移 1 位，右边最低位 0 丢弃，左边最高位添加 0</span>
十进制：12  0000 0000 <span class="token number">1100</span>  <span class="token comment"># 上面的向右移 1 位，右边最低为 1 丢弃，左边最高位添加 0</span>

<span class="token comment"># &lt;&lt; 左移</span>
十进制：96  0000 0110 0000
十进制：192 0000 <span class="token number">1100</span> 0000  <span class="token comment"># 上面的向左移 1 位，左边最高位 0 丢弃，右边最低位添加 0</span>
十进制：384 0001 <span class="token number">1000</span> 0000  <span class="token comment"># 上面的向左移 1 位，左边最高位 0 丢弃，右边最低位添加 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="成员运算符" tabindex="-1"><a class="header-anchor" href="#成员运算符" aria-hidden="true">#</a> 成员运算符</h3><p>成员资格运算符用于测试序列是否在对象中出现。</p><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>in</strong></td><td style="text-align:left;">如果对象中存在具有指定值的序列，则返回 True</td></tr><tr><td style="text-align:center;"><strong>not in</strong></td><td style="text-align:left;">如果对象中不存在具有指定值的序列，则返回 True</td></tr></tbody></table><h2 id="运算符优先级" tabindex="-1"><a class="header-anchor" href="#运算符优先级" aria-hidden="true">#</a> 运算符优先级</h2><p>优先级高的运算先执行，优先级低的运算后执行，同一优先级的操作按照从左到右的顺序进行。</p><p>运算符优先级，由高到低，同一行的优先级相同，如下表所示：</p><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>()</strong></td><td style="text-align:left;">小括号</td></tr><tr><td style="text-align:center;"><strong>**</strong></td><td style="text-align:left;">幂</td></tr><tr><td style="text-align:center;"><strong>~</strong></td><td style="text-align:left;">位反</td></tr><tr><td style="text-align:center;"><strong>+</strong>、<strong>-</strong></td><td style="text-align:left;">正负号</td></tr><tr><td style="text-align:center;"><strong>*</strong>、<strong>/</strong>、<strong>%</strong>、<strong>//</strong></td><td style="text-align:left;">乘、除、取余、取整</td></tr><tr><td style="text-align:center;"><strong>+</strong>、<strong>-</strong></td><td style="text-align:left;">加、减</td></tr><tr><td style="text-align:center;"><strong>&lt;&lt;</strong>、<strong>&gt;&gt;</strong></td><td style="text-align:left;">左位移、右位移</td></tr><tr><td style="text-align:center;"><strong>&amp;</strong></td><td style="text-align:left;">位与</td></tr><tr><td style="text-align:center;"><strong>^</strong></td><td style="text-align:left;">位异</td></tr><tr><td style="text-align:center;"><strong>|</strong></td><td style="text-align:left;">位或</td></tr><tr><td style="text-align:center;"><strong>&lt;</strong>、<strong>&lt;=</strong>、<strong>&gt;</strong>、<strong>&gt;=</strong>、<strong>!=</strong>、<strong>==</strong></td><td style="text-align:left;">比较</td></tr><tr><td style="text-align:center;"><strong>no</strong></td><td style="text-align:left;">逻辑非</td></tr><tr><td style="text-align:center;"><strong>an</strong>、<strong>or</strong></td><td style="text-align:left;">逻辑与、逻辑或</td></tr></tbody></table><h2 id="转义字符" tabindex="-1"><a class="header-anchor" href="#转义字符" aria-hidden="true">#</a> 转义字符</h2><table><thead><tr><th style="text-align:center;">转义字符</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>\\</strong></td><td style="text-align:left;">续行符</td></tr><tr><td style="text-align:center;"><strong>\\n</strong></td><td style="text-align:left;">换行符</td></tr><tr><td style="text-align:center;"><strong>\\0</strong></td><td style="text-align:left;">空</td></tr><tr><td style="text-align:center;"><strong>\\t</strong></td><td style="text-align:left;">水平制表符</td></tr><tr><td style="text-align:center;"><strong>&quot;</strong></td><td style="text-align:left;">双引号</td></tr><tr><td style="text-align:center;"><strong>&#39;</strong></td><td style="text-align:left;">单引号</td></tr><tr><td style="text-align:center;"><strong>\\</strong></td><td style="text-align:left;">一个反斜杠</td></tr><tr><td style="text-align:center;"><strong>\\f</strong></td><td style="text-align:left;">换页</td></tr><tr><td style="text-align:center;"><strong>\\0dd</strong></td><td style="text-align:left;">八进制数，<code>dd</code> 代表字符。例如：<code>\\012</code> 代表换行</td></tr><tr><td style="text-align:center;"><strong>\\xhh</strong></td><td style="text-align:left;">十六进制数，<code>hh</code> 代表字符。例如：<code>\\x0a</code> 代表换行</td></tr><tr><td style="text-align:center;"><strong>r/R</strong></td><td style="text-align:left;">在字符串定界符引号前面添加字母 <code>r</code> 或 <code>R</code>，该字符串原样输出，其中的转义字符不进行转义</td></tr></tbody></table><h2 id="格式化输出" tabindex="-1"><a class="header-anchor" href="#格式化输出" aria-hidden="true">#</a> 格式化输出</h2><ul><li><strong>%d</strong>：整数</li><li><strong>%s</strong>：字符串</li><li><strong>%f</strong>：浮点数</li><li><strong>%.2f</strong>：保留小数点后两位，不够的添加 0，多的去掉</li><li><strong>%03d</strong>：指定整数为 3 位数，不够的在数字前面添加 0</li><li><strong>f&#39;{表达式}&#39;</strong>：格式化字符串常量</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>age <span class="token operator">=</span> <span class="token number">18</span>
name <span class="token operator">=</span> <span class="token string">&#39;TOM&#39;</span>
weight <span class="token operator">=</span> <span class="token number">75.5</span>
stu_id <span class="token operator">=</span> <span class="token number">1</span>

<span class="token comment"># %d 整数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;今年我的年龄是 %d 岁&#39;</span> <span class="token operator">%</span> age<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：今年我的年龄是 18 岁</span>

<span class="token comment"># %s 字符串</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我的名字是 %s&#39;</span> <span class="token operator">%</span> name<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我的名字是 TOM</span>

<span class="token comment"># %f、%.2f 浮点数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我的体重是 %f 公斤&#39;</span> <span class="token operator">%</span> weight<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我的体重是 75.500000 公斤</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我的体重是 %.2f 公斤&#39;</span> <span class="token operator">%</span> weight<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我的体重是 75.50 公斤</span>

<span class="token comment"># %03d</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我的学号是 %d&#39;</span> <span class="token operator">%</span> stu_id<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我的学号是 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我的学号是 %03d&#39;</span> <span class="token operator">%</span> stu_id<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我的学号是 001</span>

<span class="token comment"># 格式化输出多个字符</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我的名字是 %s，今年 %d 岁了&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我的名字是 TOM，今年 18 岁了</span>

<span class="token comment"># 运行格式化输出字符进行运算</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我的名字是 %s，明年 %d 岁了&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我的名字是 TOM，明年 19 岁了</span>

<span class="token comment"># 格式化输出允许同一类型字符，注意顺序</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我的名字是 %s，今年 %s 岁了，体重 %s 公斤&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我的名字是 TOM，今年 18 岁了，体重 75.5 公斤</span>

<span class="token comment"># f&#39;{表达式}&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;我的名字是 </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">，今年 </span><span class="token interpolation"><span class="token punctuation">{</span>age<span class="token punctuation">}</span></span><span class="token string"> 岁了&#39;</span></span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我的名字是 TOM，今年 18 岁了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44),p=[l];function o(c,r){return s(),t("div",null,p)}const u=n(e,[["render",o],["__file","operators.html.vue"]]);export{u as default};
