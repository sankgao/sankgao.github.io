import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as i,c as p,b as e,e as n,d as a,w as l,f as d}from"./app-BgFlMjCv.js";const r={},u=d('<h2 id="本地环境设置" tabindex="-1"><a class="header-anchor" href="#本地环境设置" aria-hidden="true">#</a> 本地环境设置</h2><p>设置 C 语言环境，需要确保电脑上有 <strong>文本编辑器</strong> 和 <strong>C 编译器</strong> 两款可用的软件。</p><h3 id="文本编辑器" tabindex="-1"><a class="header-anchor" href="#文本编辑器" aria-hidden="true">#</a> 文本编辑器</h3><p>文本编辑器用于输入您的程序。文本编辑器包括 Windows Notepad、OS Edit command、Brief、Epsilon、EMACS 、sublime、VSCode（推荐）和 vim/vi。</p><p>文本编辑器的名称和版本在不同的操作系统上可能会有所不同。例如：Notepad 通常用于 Windows 操作系统上，vim/vi 可用于 Windows 和 Linux/UNIX 操作系统上。</p><p>VSCode 拥有多平台支持，Windows，linux 和 mac 都可以找到对应的安装包。</p><p>通过编辑器创建的文件通常称为源文件，源文件包含程序源代码。C 程序的源文件通常使用 <code>.c</code> 为扩展名。</p><h3 id="c-编译器" tabindex="-1"><a class="header-anchor" href="#c-编译器" aria-hidden="true">#</a> C 编译器</h3><p>写在源文件中的源代码是人类可读的。它需要 “编译”，转为机器语言，这样 CPU 才可以按给定指令执行程序。</p><p>C 语言编译器用于把源代码编译成最终的可执行程序。最常用的免费可用的编译器是 GNU 的 C/C++ 编译器，GNU 的 gcc 编译器适合于 C 和 C++ 编程语言。</p><h2 id="安装环境" tabindex="-1"><a class="header-anchor" href="#安装环境" aria-hidden="true">#</a> 安装环境</h2>',11),h=e("h2",{id:"vs-code-环境配置",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#vs-code-环境配置","aria-hidden":"true"},"#"),n(" VS Code 环境配置")],-1),m={href:"https://code.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"},v=e("p",null,"在 VS Code 中安装以下两个扩展插件：",-1),k={href:"https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools-extension-pack",target:"_blank",rel:"noopener noreferrer"},g={href:"https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner",target:"_blank",rel:"noopener noreferrer"},b=d(`<p>安装后重启 VS Code 后就可以运行 C 脚本。</p><h2 id="hello-world-示例" tabindex="-1"><a class="header-anchor" href="#hello-world-示例" aria-hidden="true">#</a> Hello World 示例</h2><h3 id="写程序" tabindex="-1"><a class="header-anchor" href="#写程序" aria-hidden="true">#</a> 写程序</h3><p>下面是一个简单的 C 程序 <code>hello.c</code>，用于在屏幕上显示 “Hello World”。它就是一个普通的文本文件，任何文本编译器都能用来写。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编译并执行" tabindex="-1"><a class="header-anchor" href="#编译并执行" aria-hidden="true">#</a> 编译并执行</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在 Windows 系统中生成的可执行文件后缀为 <code>.exe</code>，Linux 系统中生成的可执行文件后缀为 <code>.out</code></p></div><ul><li><p><strong>在 Windows 系统中的 cmd 终端编译并执行</strong></p><p>在文件存放的目录中按 <kbd>Shift</kbd> + <kbd>鼠标右键</kbd>，点击 <em>在终端中打开。</em></p><p>在终端中输入以下命令进行编译：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>gcc hello<span class="token punctuation">.</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 gcc 编译器，将源文件 <code>hello.c</code> 编译成二进制文件。运行这个命令后，默认在当前目录下生成一个编译执行文件 <code>a.exe</code>（assembler executable 的缩写）。</p><p>输入以下命令执行该文件，屏幕上会输出 “Hello World”。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span>\\a<span class="token punctuation">.</span>exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>GCC 的 <code>-o</code> 参数（output 的缩写）可以指定编译产物的文件名。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>gcc <span class="token operator">-</span>o hello hello<span class="token punctuation">.</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-o hello</code> 指定编译产物的文件名为 <code>hello</code>，默认后缀为 <code>.exe</code>。执行该文件也会输出 “Hello World”。</p></li><li><p><strong>在 Linux 系统终端编译并执行</strong></p><p>在命令行中输入以下命令进行编译：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>gcc hello<span class="token punctuation">.</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 gcc 编译器，将源文件 <code>hello.c</code> 编译成二进制文件。运行这个命令后，默认在当前目录下生成一个编译执行文件 <code>a.out</code>（assembler output 的缩写）。</p><p>输入以下命令执行该文件，屏幕上会输出 “Hello World”。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>GCC 的 <code>-o</code> 参数（output 的缩写）可以指定编译产物的文件名。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>gcc <span class="token operator">-</span>o hello hello<span class="token punctuation">.</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-o hello</code> 指定编译产物的文件名为 <code>hello</code>，执行该文件也会输出 “Hello World”。</p></li><li><p><strong>在 VS Code 中执行</strong></p><p>打开 <code>hello.c</code> 文件，鼠标右键选择 <em>Run Code</em> 运行代码。在终端面板中输出以下内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>Running<span class="token punctuation">]</span> <span class="token builtin class-name">cd</span> <span class="token string">&quot;e:\\project-demo<span class="token entity" title="\\c">\\c</span>\\hello-world<span class="token entity" title="\\&quot;">\\&quot;</span> &amp;&amp; gcc hello.c -o hello &amp;&amp; &quot;</span>e:<span class="token punctuation">\\</span>project-demo<span class="token punctuation">\\</span>c<span class="token punctuation">\\</span>hello-world<span class="token punctuation">\\</span>&quot;hello
Hello World

<span class="token punctuation">[</span>Done<span class="token punctuation">]</span> exited with <span class="token assign-left variable">code</span><span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">in</span> <span class="token number">1.641</span> seconds
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>终端也会输出 “Hello World”，在点击 <em>Run Code</em> 时，VS Code 执行以下三个命令：</p><ol><li>cd 到 <code>hello.c</code> 文件所在的目录</li><li>执行 <code>gcc hello.c -o hello</code> 命令。使用 gcc 编译 <code>hello.c</code> 文件并使用 <code>-o hello</code> 指定编译产物文件名为 <code>hello</code>，默认后缀为 <code>.exe</code></li><li>执行编译后的 <code>hello</code> 文件，并在终端屏幕中输出 “Hello World”</li></ol></li></ul>`,8);function x(_,C){const o=c("RouterLink"),s=c("ExternalLinkIcon");return i(),p("div",null,[u,e("p",null,[n("在开发环境中查看 "),a(o,{to:"/computers/dev_env/gcc.html"},{default:l(()=>[n("GCC 安装")]),_:1}),n("。")]),h,e("p",null,[e("a",m,[n("VS Code 官网"),a(s)]),n(" 下载。"),a(o,{to:"/about/tools/vscode.html"},{default:l(()=>[n("VS Code 教程")]),_:1})]),v,e("ul",null,[e("li",null,[e("a",k,[n("C/C++ Extension Pack"),a(s)])]),e("li",null,[e("a",g,[n("Code Runner"),a(s)])])]),b])}const W=t(r,[["render",x],["__file","install.html.vue"]]);export{W as default};
