import{_ as u}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as d,o as b,c as v,b as s,e as a,d as i,w as n,f as l}from"./app-QHX7eKIM.js";const m="/assets/gitlab_repos-Hpa2kwfD.jpg",g="/assets/scripts_install-shrfNn6c.jpg",r="/assets/gitlab_ee_login-s2TQbvpb.jpg",p="/assets/gitlab_ee_page-n-EIjfZx.jpg",h={},k=s("h2",{id:"安装环境",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#安装环境","aria-hidden":"true"},"#"),a(" 安装环境")],-1),_={href:"https://docs.gitlab.com/ee/install/requirements.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://docs.gitlab.cn/jh/install/requirements.html",target:"_blank",rel:"noopener noreferrer"},L=s("h3",{id:"cpu",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#cpu","aria-hidden":"true"},"#"),a(" CPU")],-1),y=s("p",null,"CPU（中央处理器）要求取决于用户数量和预期工作负载求。您的具体需可能更多，具体取决于您的工作量。您的工作负载受到多种因素的影响，例如但不限于您的用户活跃程度、您使用的自动化程度、镜像以及存储库/更改大小。",-1),G=s("p",null,"以下是针对少数 GitLab 用户群规模示例的建议最低 CPU 硬件指南：",-1),x=s("li",null,[s("strong",null,"4 核"),a(" 是建议的最小核心数，最多支持 "),s("code",null,"500"),a(" 个用户")],-1),E=s("li",null,[s("strong",null,"8 核"),a(" 支持多达 "),s("code",null,"1000"),a(" 个用户")],-1),A={href:"https://docs.gitlab.com/ee/administration/reference_architectures/index.html",target:"_blank",rel:"noopener noreferrer"},T=s("h3",{id:"ram",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#ram","aria-hidden":"true"},"#"),a(" RAM")],-1),O=s("p",null,"RAM（内存）要求取决于用户数量和预期工作负载。您的具体需求可能更多，具体取决于您的工作量。您的工作负载受到多种因素的影响，例如但不限于您的用户活跃程度、您使用的自动化程度、镜像以及存储库/更改大小。",-1),w=s("p",null,"以下是针对少数 GitLab 用户群大小示例的建议最低内存硬件指南：",-1),R=s("li",null,[s("strong",null,"4 GB"),a(" 是所需的最小内存大小，最多支持 "),s("code",null,"500"),a(" 个用户")],-1),I=s("li",null,[s("strong",null,"8 GB"),a(" 支持多达 "),s("code",null,"1000"),a(" 个用户")],-1),B={href:"https://docs.gitlab.com/ee/administration/reference_architectures/index.html",target:"_blank",rel:"noopener noreferrer"},S=s("h2",{id:"linux-安装",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#linux-安装","aria-hidden":"true"},"#"),a(" Linux 安装")],-1),N=s("h3",{id:"gitlab-ee",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#gitlab-ee","aria-hidden":"true"},"#"),a(" GitLab EE")],-1),H=s("p",null,"安装和配置所需的依赖：",-1),M=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"sudo"),a(),s("span",{class:"token function"},"apt"),a(),s("span",{class:"token function"},"install"),a(),s("span",{class:"token parameter variable"},"-y"),a(),s("span",{class:"token function"},"curl"),a(` openssh-server ca-certificates tzdata perl postfix
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),U=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"sudo"),a(" yum "),s("span",{class:"token function"},"install"),a(),s("span",{class:"token parameter variable"},"-y"),a(),s("span",{class:"token function"},"curl"),a(` policycoreutils-python3 openssh-server perl postfix
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),j={href:"https://packages.gitlab.com/gitlab",target:"_blank",rel:"noopener noreferrer"},D=s("figure",null,[s("img",{src:m,alt:"GitLab 包仓库",tabindex:"0",loading:"lazy"}),s("figcaption",null,"GitLab 包仓库")],-1),C=s("p",null,"使用 Bash 脚本安装 GPG 密钥、GitLab 存储库等，选择支持您系统的脚本。",-1),P=s("figure",null,[s("img",{src:g,alt:"Bash 脚本",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Bash 脚本")],-1),$=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"curl"),a(),s("span",{class:"token parameter variable"},"-s"),a(" https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh "),s("span",{class:"token operator"},"|"),a(),s("span",{class:"token function"},"sudo"),a(),s("span",{class:"token function"},"bash"),a(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),X=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"curl"),a(),s("span",{class:"token parameter variable"},"-s"),a(" https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh "),s("span",{class:"token operator"},"|"),a(),s("span",{class:"token function"},"sudo"),a(),s("span",{class:"token function"},"bash"),a(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),F=l('<p>接下来安装 <code>gitlab-ee</code>。此外，还需要通过设置 <code>EXTERNAL_URL</code> 环境变量来指定 GitLab EE 实例的 <code>URL</code>。如果还要设置初始密码，查看下一步骤。</p><div class="hint-container info"><p class="hint-container-title">EXTERNAL_URL</p><p><code>EXTERNAL_URL</code> 可以使用完全限定域名（FQDN），也可以使用服务器 IP 地址。</p><p>如果 <strong>有域名</strong> 则设置域名（例如：<code>http://gitlab.example.com</code>）；如果 <strong>没有域名</strong> 则设置本地 IP 地址（例如：<code>http://localhost</code>），还可以指定端口（例如：<code>http://localhost:port</code>）GitLab 默认使用 <code>80</code> 端口。</p></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>注意您使用的端口是否和 GitLab 中其他服务默认端口冲突，GitLab 默认会运行很多与 GitLab 相关的其他服务或工具。</p></div>',3),z=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"sudo"),a(),s("span",{class:"token assign-left variable"},"EXTERNAL_URL"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},'"http://localhost"'),a(),s("span",{class:"token function"},"apt"),a(),s("span",{class:"token function"},"install"),a(),s("span",{class:"token parameter variable"},"-y"),a(` gitlab-ee
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),q=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"sudo"),a(),s("span",{class:"token assign-left variable"},"EXTERNAL_URL"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},'"http://localhost"'),a(" yum "),s("span",{class:"token function"},"install"),a(),s("span",{class:"token parameter variable"},"-y"),a(` gitlab-ee
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),W=l('<p><strong>设置初始密码</strong>（引入于 GitLab 14.0），默认情况下，Linux 软件包安装会自动为初始管理员用户账号（<code>root</code>）生成密码，并将其存储到 <code>/etc/gitlab/initial_root_password</code> 至少 24 小时。出于安全原因，24 小时后，此文件会被第一次 <code>gitlab-ctl reconfigure</code> 自动删除。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果 GitLab 在安装期间无法检测到服务器的有效主机名，则不会运行重新配置。</p></div><p>要提供自定义初始 <code>root</code> 密码，有以下两种方式：</p>',3),V=s("p",null,[a("如果服务器的主机名设置正确，则将 "),s("code",null,"GITLAB_ROOT_PASSWORD"),a(" 环境变量传递给安装命令")],-1),Q=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"sudo"),a(),s("span",{class:"token assign-left variable"},"GITLAB_ROOT_PASSWORD"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},'"<strongpassword>"'),a(),s("span",{class:"token assign-left variable"},"EXTERNAL_URL"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},'"http://localhost"'),a(),s("span",{class:"token function"},"apt"),a(),s("span",{class:"token function"},"install"),a(),s("span",{class:"token parameter variable"},"-y"),a(` gitlab-ee
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),Z=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"sudo"),a(),s("span",{class:"token assign-left variable"},"GITLAB_ROOT_PASSWORD"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},'"<strongpassword>"'),a(),s("span",{class:"token assign-left variable"},"EXTERNAL_URL"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},'"http://localhost"'),a(" yum "),s("span",{class:"token function"},"install"),a(),s("span",{class:"token parameter variable"},"-y"),a(` gitlab-ee
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),J=s("p",null,[a("如果在安装期间 GitLab 没有自动执行重新配置，则必须将 "),s("code",null,"GITLAB_ROOT_PASSWORD"),a(" 变量传递给第一次运行的 "),s("code",null,"gitlab-ctl reconfigure"),a("。")],-1),Y=l(`<li><p>在第一次重新配置之前，编辑 <code>/etc/gitlab/gitlab.rb</code>（如果不存在则创建）并设置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gitlab_rails<span class="token punctuation">[</span><span class="token string">&#39;initial_root_password&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;&lt;my_strong_password&gt;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,1),K=l(`<p>这两种方法都仅适用于初始数据库播种设定，发生在第一次重新配置期间。对于后续的重新配置运行，上述方法均无效。在这种情况下，使用 <code>/etc/gitlab/initial_root_password</code> 中的随机密码登录，或重置 <code>root</code> 密码。</p><p>出现以下提示说明 GitLab 安装成功：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>It looks like GitLab has not been configured yet<span class="token punctuation">;</span> skipping the upgrade script.

       *.                  *.
      ***                 ***
     *****               *****
    .******             *******
    ********            ********
   ,,,,,,,,,***********,,,,,,,,,
  ,,,,,,,,,,,*********,,,,,,,,,,,
  .,,,,,,,,,,,*******,,,,,,,,,,,,
      ,,,,,,,,,*****,,,,,,,,,.
         ,,,,,,,****,,,,,,
            .,,,***,,,,
                ,*,.



     _______ __  __          __
    / ____<span class="token punctuation">(</span>_<span class="token punctuation">)</span> /_/ /   ____ _/ /_
   / / __/ / __/ /   / __ <span class="token variable"><span class="token variable">\`</span>/ __ <span class="token punctuation">\\</span>
  / /_/ / / /_/ /___/ /_/ / /_/ /
  <span class="token punctuation">\\</span>____/_/<span class="token punctuation">\\</span>__/_____/<span class="token punctuation">\\</span>__,_/_.___/


Thank you <span class="token keyword">for</span> installing GitLab<span class="token operator">!</span>
GitLab was unable to detect a valid <span class="token function">hostname</span> <span class="token keyword">for</span> your instance.
Please configure a URL <span class="token keyword">for</span> your GitLab instance by setting <span class="token variable">\`</span></span>external_url\`
configuration <span class="token keyword">in</span> /etc/gitlab/gitlab.rb file.
Then, you can start your GitLab instance by running the following command:
  <span class="token function">sudo</span> gitlab-ctl reconfigure

For a comprehensive list of configuration options please see the Omnibus GitLab readme
https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md

Help us improve the installation experience, <span class="token builtin class-name">let</span> us know how we did with a <span class="token number">1</span> minute survey:
https://gitlab.fra1.qualtrics.com/jfe/form/SV_6kVqZANThUQ1bZb?installation<span class="token operator">=</span>omnibus<span class="token operator">&amp;</span><span class="token assign-left variable">release</span><span class="token operator">=</span><span class="token number">16</span>-11
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问 GitLab 服务 <code>http://localhost:port</code>。如果在安装过程中指定了初始密码，则用初始密码登录，如果未指定密码，则系统会随机生成一个密码并存储在 <code>/etc/gitlab/initial_root_password</code> 文件中，查看随机密码并使用 <code>root</code> 用户名登录。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>出于安全原因，24 小时后，<code>/etc/gitlab/initial_root_password</code> 会被第一次 <code>gitlab-ctl reconfigure</code> 自动删除，因此若使用随机密码登录，建议安装成功初始登录成功之后，立即修改初始密码。</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">cat</span> /etc/gitlab/initial_root_password
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+r+'" alt="GitLab EE 登录" tabindex="0" loading="lazy"><figcaption>GitLab EE 登录</figcaption></figure><p>GitLab EE 主页。</p><figure><img src="'+p+'" alt="GitLab EE 主页" tabindex="0" loading="lazy"><figcaption>GitLab EE 主页</figcaption></figure><h3 id="极狐gitlab" tabindex="-1"><a class="header-anchor" href="#极狐gitlab" aria-hidden="true">#</a> 极狐GitLab</h3><p>安装和配置所需的依赖：</p>',11),ss=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"sudo"),a(),s("span",{class:"token function"},"apt"),a(),s("span",{class:"token function"},"install"),a(),s("span",{class:"token parameter variable"},"-y"),a(),s("span",{class:"token function"},"curl"),a(` openssh-server ca-certificates tzdata perl postfix
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),as=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"sudo"),a(" yum "),s("span",{class:"token function"},"install"),a(),s("span",{class:"token parameter variable"},"-y"),a(),s("span",{class:"token function"},"curl"),a(` policycoreutils-python3 openssh-server perl postfix
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),ns=l(`<p>执行以下命令配置 极狐GitLab 软件源镜像：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://get.gitlab.cn <span class="token operator">|</span> /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来安装 极狐GitLab。此外，还需要通过设置 <code>EXTERNAL_URL</code> 环境变量来指定 极狐GitLab 实例的 <code>URL</code>。如果还要设置初始密码，查看下一步骤。</p><div class="hint-container info"><p class="hint-container-title">EXTERNAL_URL</p><p><code>EXTERNAL_URL</code> 可以使用完全限定域名（FQDN），也可以使用服务器 IP 地址。</p><p>如果 <strong>有域名</strong> 则设置域名（例如：<code>http://gitlab.example.com</code>）；如果 <strong>没有域名</strong> 则设置本地 IP 地址（例如：<code>http://localhost</code>），还可以指定端口（例如：<code>http://localhost:port</code>）GitLab 默认使用 <code>80</code> 端口。</p></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>注意您使用的端口是否和 GitLab 中其他服务默认端口冲突，GitLab 默认会运行很多与 GitLab 相关的其他服务或工具。</p></div>`,5),es=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"sudo"),a(),s("span",{class:"token assign-left variable"},"EXTERNAL_URL"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},'"http://localhost"'),a(),s("span",{class:"token function"},"apt"),a(),s("span",{class:"token function"},"install"),a(),s("span",{class:"token parameter variable"},"-y"),a(` gitlab-jh
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),ts=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"sudo"),a(),s("span",{class:"token assign-left variable"},"EXTERNAL_URL"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},'"http://localhost"'),a(" yum "),s("span",{class:"token function"},"install"),a(),s("span",{class:"token parameter variable"},"-y"),a(` gitlab-jh
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),is=l('<p><strong>设置初始密码</strong>（引入于 极狐GitLab 14.0），默认情况下，Linux 软件包安装会自动为初始管理员用户账号（<code>root</code>）生成密码，并将其存储到 <code>/etc/gitlab/initial_root_password</code> 至少 24 小时。出于安全原因，24 小时后，此文件会被第一次 <code>gitlab-ctl reconfigure</code> 自动删除。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果 极狐GitLab 在安装期间无法检测到服务器的有效主机名，则不会运行重新配置。</p></div><p>要提供自定义初始 <code>root</code> 密码，您有两个选择：</p>',3),ls=s("p",null,[a("如果服务器的主机名设置正确，则将 "),s("code",null,"GITLAB_ROOT_PASSWORD"),a(" 环境变量传递给安装命令")],-1),os=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"sudo"),a(),s("span",{class:"token assign-left variable"},"GITLAB_ROOT_PASSWORD"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},'"<strongpassword>"'),a(),s("span",{class:"token assign-left variable"},"EXTERNAL_URL"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},'"http://localhost"'),a(),s("span",{class:"token function"},"apt"),a(),s("span",{class:"token function"},"install"),a(),s("span",{class:"token parameter variable"},"-y"),a(` gitlab-jh
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),cs=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"sudo"),a(),s("span",{class:"token assign-left variable"},"GITLAB_ROOT_PASSWORD"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},'"<strongpassword>"'),a(),s("span",{class:"token assign-left variable"},"EXTERNAL_URL"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},'"http://localhost"'),a(" yum "),s("span",{class:"token function"},"install"),a(),s("span",{class:"token parameter variable"},"-y"),a(` gitlab-jh
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),ds=s("p",null,[a("如果在安装期间 GitLab 没有自动执行重新配置，则必须将 "),s("code",null,"GITLAB_ROOT_PASSWORD"),a(" 变量传递给第一次运行的 "),s("code",null,"gitlab-ctl reconfigure"),a("。")],-1),rs=l(`<li><p>在第一次重新配置之前，编辑 <code>/etc/gitlab/gitlab.rb</code>（如果不存在则创建）并设置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gitlab_rails<span class="token punctuation">[</span><span class="token string">&#39;initial_root_password&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;&lt;my_strong_password&gt;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,1),ps=l(`<p>这两种方法都仅适用于初始数据库播种设定，发生在第一次重新配置期间。对于后续的重新配置运行，上述方法均无效。在这种情况下，使用 <code>/etc/gitlab/initial_root_password</code> 中的随机密码登录，或重置 <code>root</code> 密码。</p><p>出现以下提示说明 GitLab 安装成功：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Running handlers:
<span class="token punctuation">[</span><span class="token number">2024</span>-04-24T15:50:19+08:00<span class="token punctuation">]</span> INFO: Running report handlers
Running handlers complete
<span class="token punctuation">[</span><span class="token number">2024</span>-04-24T15:50:19+08:00<span class="token punctuation">]</span> INFO: Report handlers complete
Infra Phase complete, <span class="token number">557</span>/1635 resources updated <span class="token keyword">in</span> 06 minutes <span class="token number">23</span> seconds

Notes:
Default admin account has been configured with following details:
Username: root
Password: You didn&#39;t opt-in to print initial root password to STDOUT.

NOTE: Because these credentials might be present <span class="token keyword">in</span> your log files <span class="token keyword">in</span> plain text, it is highly recommended to reset the password following https://docs.gitlab.com/ee/security/reset_user_password.html<span class="token comment">#reset-your-root-password.</span>

gitlab Reconfigured<span class="token operator">!</span>

                  *.                  *.
                 ***                 ***
                *****               *****
               .******             *******
               ********            ********
              ,,,,,,,,,***********,,,,,,,,,
             ,,,,,,,,,,,*********,,,,,,,,,,,
             .,,,,,,,,,,,*******,,,,,,,,,,,,
                 ,,,,,,,,,*****,,,,,,,,,.
                    ,,,,,,,****,,,,,,
                       .,,,***,,,,
                           ,*,.



         ___ __  __         _______ __  __          __
        / <span class="token punctuation">(</span>_<span class="token punctuation">)</span> / / /_  __   / ____<span class="token punctuation">(</span>_<span class="token punctuation">)</span> /_/ /   ____ _/ /_
   __  / / / /_/ / / / /  / / __/ / __/ /   / __ \`/ __ <span class="token punctuation">\\</span>
  / /_/ / / __  / /_/ /  / /_/ / / /_/ /___/ /_/ / /_/ /
  <span class="token punctuation">\\</span>____/_/_/ /_/<span class="token punctuation">\\</span>__,_/   <span class="token punctuation">\\</span>____/_/<span class="token punctuation">\\</span>__/_____/<span class="token punctuation">\\</span>__,_/_.___/


Thank you <span class="token keyword">for</span> installing JiHu GitLab<span class="token operator">!</span>
GitLab should be available at http://10.1.1.10:8088

For a comprehensive list of configuration options please see the Omnibus GitLab readme
https://jihulab.com/gitlab-cn/omnibus-gitlab/-/blob/main-jh/README.md

Help us improve the installation experience, <span class="token builtin class-name">let</span> us know how we did with a <span class="token number">1</span> minute survey:
https://wj.qq.com/s2/10068464/dc66


  Verifying        <span class="token builtin class-name">:</span> gitlab-jh-16.11.0-jh.0.el8.x86_64                              <span class="token number">1</span>/1

Installed:
  gitlab-jh-16.11.0-jh.0.el8.x86_64

Complete<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问 极狐GitLab 服务 <code>http://localhost:port</code>。如果在安装过程中指定了初始密码，则用初始密码登录，如果未指定密码，则系统会随机生成一个密码并存储在 <code>/etc/gitlab/initial_root_password</code> 文件中，查看随机密码并使用 <code>root</code> 用户名登录。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>出于安全原因，24 小时后，<code>/etc/gitlab/initial_root_password</code> 会被第一次 <code>gitlab-ctl reconfigure</code> 自动删除，因此若使用随机密码登录，建议安装成功初始登录成功之后，立即修改初始密码。</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">cat</span> /etc/gitlab/initial_root_password
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+r+'" alt="GitLab EE 登录" tabindex="0" loading="lazy"><figcaption>GitLab EE 登录</figcaption></figure><p>GitLab EE 主页。</p><figure><img src="'+p+'" alt="GitLab EE 主页" tabindex="0" loading="lazy"><figcaption>GitLab EE 主页</figcaption></figure><h2 id="docker-安装" tabindex="-1"><a class="header-anchor" href="#docker-安装" aria-hidden="true">#</a> Docker 安装</h2><p>GitLab Docker 镜像是 GitLab 的整体镜像，在单个容器中运行所有必要的服务。</p><p>Docker 映像不包含邮件传输代理（MTA）。推荐的解决方案是添加在单独容器中运行的 MTA（例如：<code>Postfix</code> 或 <code>Sendmail</code>）。作为另一种选择，您可以直接在 GitLab 容器中安装 MTA，但这会增加维护开销，因为您可能需要在每次升级或重新启动后重新安装 MTA。</p>',12),us={href:"https://docs.gitlab.com/ee/install/docker.html",target:"_blank",rel:"noopener noreferrer"},bs={href:"https://docs.gitlab.cn/jh/install/docker.html",target:"_blank",rel:"noopener noreferrer"},vs=s("h3",{id:"配置-ssh-端口",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#配置-ssh-端口","aria-hidden":"true"},"#"),a(" 配置 SSH 端口")],-1),ms=s("p",null,[a("GitLab 使用 SSH 通过 SSH 与 Git 进行交互。默认情况下，GitLab 使用端口 "),s("code",null,"22"),a("。")],-1),gs=s("p",null,"要在使用 GitLab Docker 映像时使用不同的端口，使用以下两种方式：",-1),hs=l(`<li><p>更改服务器的 SSH 端口（推荐）</p><p>在这种情况下，SSH 克隆 URL 看起来像 <code>ssh://git@gitlab.example.com/user/project.git</code>。</p><p>使用编辑器打开 <code>/etc/ssh/sshd_config</code>，然后更改 SSH 端口：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Port <span class="token operator">=</span> <span class="token number">2424</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>保存文件并重新启动 SSH 服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl restart sshd.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打开新的终端会话并验证您是否可以使用新端口通过 SSH 连接到服务器。</p></li>`,1),ks=l("<p>更改 GitLab Shell SSH 端口</p><p>在这种情况下，SSH 克隆 URL 看起来像 <code>ssh://git@gitlab.example.com:&lt;portNumber&gt;/user/project.git</code>。</p><p><code>docker run</code> 时，在 <code>GITLAB_OMNIBUS_CONFIG</code> 变量中添加 <code>gitlab_rails[&#39;gitlab_shell_ssh_port&#39;] = 2424</code>，多个参数用 <kbd>;</kbd> （冒号）分割，并且修改 <code>publish</code> 映射端口。</p>",3),_s={href:"https://docs.gitlab.com/ee/install/docker.html#expose-gitlab-on-different-ports",target:"_blank",rel:"noopener noreferrer"},fs={href:"https://docs.gitlab.cn/jh/install/docker.html#%E5%9C%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E7%AB%AF%E5%8F%A3%E4%B8%8A%E5%85%AC%E5%BC%80%E6%9E%81%E7%8B%90gitlab",target:"_blank",rel:"noopener noreferrer"},Ls=l(`<h3 id="配置挂载卷" tabindex="-1"><a class="header-anchor" href="#配置挂载卷" aria-hidden="true">#</a> 配置挂载卷</h3><p>配置一个新的环境变量 <code>$GITLAB_HOME</code>，指向配置、日志和数据文件所在的目录。将 <code>$GITLAB_HOME</code> 环境变量应该附加到您的 shell 的配置文件（<code>~/.bash_profile</code>）中，以便它应用于所有未来的终端会话。</p><p>在 <code>~/.bash_profile</code> 文件最后添加以下内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">GITLAB_HOME</span><span class="token operator">=</span>/opt/gitlab
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>刷新 <code>~/.bash_profile</code> 文件，使配置生效。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> ~/.bash_profile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>GitLab 容器使用主机安装的卷来存储持久数据：</p><table><thead><tr><th>本地位置</th><th>容器位置</th><th>用法</th></tr></thead><tbody><tr><td><code>$GITLAB_HOME/data</code></td><td><code>/var/opt/gitlab</code></td><td>用于存储应用程序数据</td></tr><tr><td><code>$GITLAB_HOME/logs</code></td><td><code>/var/log/gitlab</code></td><td>用于存储日志</td></tr><tr><td><code>$GITLAB_HOME/config</code></td><td><code>/etc/gitlab</code></td><td>用于存储 GitLab 配置文件</td></tr></tbody></table><h3 id="gitlab-ee-1" tabindex="-1"><a class="header-anchor" href="#gitlab-ee-1" aria-hidden="true">#</a> GitLab EE</h3><ul><li><p>使用 Docker Engine 安装 GitLab</p><p>其中 <code>&lt;version&gt;</code> 是 GitLab 版本（例如：<code>16.5.3</code>），它总是包括 <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code> 以其名称命名。<code>external_url</code> 根据您的情况配置。</p><p>出于测试目的，您可以使用 <code>latest</code> 标签（例如：<code>gitlab/gitlab-ee:latest</code>），它指向最新的稳定版本。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">--detach</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">--hostname</span> gitlab.example.com <span class="token punctuation">\\</span>
  <span class="token parameter variable">--env</span> <span class="token assign-left variable">GITLAB_OMNIBUS_CONFIG</span><span class="token operator">=</span><span class="token string">&quot;external_url &#39;http://gitlab.example.com&#39;&quot;</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">--publish</span> <span class="token number">443</span>:443 <span class="token parameter variable">--publish</span> <span class="token number">80</span>:80 <span class="token parameter variable">--publish</span> <span class="token number">22</span>:22 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--name</span> gitlab <span class="token punctuation">\\</span>
  <span class="token parameter variable">--restart</span> always <span class="token punctuation">\\</span>
  <span class="token parameter variable">--volume</span> <span class="token variable">$GITLAB_HOME</span>/config:/etc/gitlab <span class="token punctuation">\\</span>
  <span class="token parameter variable">--volume</span> <span class="token variable">$GITLAB_HOME</span>/logs:/var/log/gitlab <span class="token punctuation">\\</span>
  <span class="token parameter variable">--volume</span> <span class="token variable">$GITLAB_HOME</span>/data:/var/opt/gitlab <span class="token punctuation">\\</span>
  --shm-size 256m <span class="token punctuation">\\</span>
  gitlab/gitlab-ee:<span class="token operator">&lt;</span>version<span class="token operator">&gt;</span>-ee.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用 Docker Compose 安装 GitLab</p><p>创建挂载目录 <code>/opt/gitlab</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mkdir</span> /opt/gitlab
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 <code>docker-compose.yml</code> 文件中使用环境变量来定义卷的路径。创建 <code>.env</code> 文件，在 <code>.env</code> 文件中定义 <code>GITLAB_HOME</code> 变量，以在 <code>docker-compose.yml</code> 文件中使用。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">GITLAB_HOME</span><span class="token operator">=</span>/opt/gitlab
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 <code>/opt/gitlab</code> 目录中创建一个 <code>docker-compose.yml</code> 文件，并输入以下内容：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.6&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">gitlab</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> gitlab/gitlab<span class="token punctuation">-</span>ee<span class="token punctuation">:</span>&lt;version<span class="token punctuation">&gt;</span><span class="token punctuation">-</span>ee.0
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> gitlab
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> <span class="token string">&#39;gitlab.example.com&#39;</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">GITLAB_OMNIBUS_CONFIG</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
        # Add any other gitlab.rb configuration here, each on its own line
        external_url &#39;http://gitlab.example.com&#39;</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&#39;80:80&#39;</span>
      <span class="token punctuation">-</span> <span class="token string">&#39;443:443&#39;</span>
      <span class="token punctuation">-</span> <span class="token string">&#39;22:22&#39;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&#39;\${GITLAB_HOME}/config:/etc/gitlab&#39;</span>
      <span class="token punctuation">-</span> <span class="token string">&#39;\${GITLAB_HOME}/logs:/var/log/gitlab&#39;</span>
      <span class="token punctuation">-</span> <span class="token string">&#39;\${GITLAB_HOME}/data:/var/opt/gitlab&#39;</span>
    <span class="token key atrule">shm_size</span><span class="token punctuation">:</span> <span class="token string">&#39;256m&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>确保您在与 <code>docker-compose.yml</code> 相同的目录下并启动 GitLab：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> compose up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="极狐gitlab-1" tabindex="-1"><a class="header-anchor" href="#极狐gitlab-1" aria-hidden="true">#</a> 极狐Gitlab</h3><ul><li><p>使用 Docker Engine 安装 极狐GitLab</p><p><code>external_url</code> 根据您的情况配置。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">--detach</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">--hostname</span> gitlab.example.com <span class="token punctuation">\\</span>
  <span class="token parameter variable">--env</span> <span class="token assign-left variable">GITLAB_OMNIBUS_CONFIG</span><span class="token operator">=</span><span class="token string">&quot;external_url &#39;http://gitlab.example.com&#39;&quot;</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">--publish</span> <span class="token number">443</span>:443 <span class="token parameter variable">--publish</span> <span class="token number">80</span>:80 <span class="token parameter variable">--publish</span> <span class="token number">22</span>:22 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--name</span> gitlab <span class="token punctuation">\\</span>
  <span class="token parameter variable">--restart</span> always <span class="token punctuation">\\</span>
  <span class="token parameter variable">--volume</span> <span class="token variable">$GITLAB_HOME</span>/config:/etc/gitlab <span class="token punctuation">\\</span>
  <span class="token parameter variable">--volume</span> <span class="token variable">$GITLAB_HOME</span>/logs:/var/log/gitlab <span class="token punctuation">\\</span>
  <span class="token parameter variable">--volume</span> <span class="token variable">$GITLAB_HOME</span>/data:/var/opt/gitlab <span class="token punctuation">\\</span>
  --shm-size 256m <span class="token punctuation">\\</span>
  registry.gitlab.cn/omnibus/gitlab-jh:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用 Docker Compose 安装 GitLab</p><p>创建挂载目录 <code>/opt/gitlab</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mkdir</span> /opt/gitlab
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 <code>docker-compose.yml</code> 文件中使用环境变量来定义卷的路径。创建 <code>.env</code> 文件，在 <code>.env</code> 文件中定义 <code>GITLAB_HOME</code> 变量，以在 <code>docker-compose.yml</code> 文件中使用。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">GITLAB_HOME</span><span class="token operator">=</span>/opt/gitlab
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 <code>/opt/gitlab</code> 目录中创建一个 <code>docker-compose.yml</code> 文件，并输入以下内容：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.6&#39;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&#39;registry.gitlab.cn/omnibus/gitlab-jh:latest&#39;</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> <span class="token string">&#39;gitlab.example.com&#39;</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">GITLAB_OMNIBUS_CONFIG</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
        # Add any other gitlab.rb configuration here, each on its own line
        external_url &#39;http://gitlab.example.com&#39;</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&#39;80:80&#39;</span>
      <span class="token punctuation">-</span> <span class="token string">&#39;443:443&#39;</span>
      <span class="token punctuation">-</span> <span class="token string">&#39;22:22&#39;</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&#39;\${GITLAB_HOME}/config:/etc/gitlab&#39;</span>
      <span class="token punctuation">-</span> <span class="token string">&#39;\${GITLAB_HOME}/logs:/var/log/gitlab&#39;</span>
      <span class="token punctuation">-</span> <span class="token string">&#39;\${GITLAB_HOME}/data:/var/opt/gitlab&#39;</span>
    <span class="token key atrule">shm_size</span><span class="token punctuation">:</span> <span class="token string">&#39;256m&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>确保您在与 <code>docker-compose.yml</code> 相同的目录下并启动 极狐GitLab：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> compose up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="查看-gitlab-容器日志" tabindex="-1"><a class="header-anchor" href="#查看-gitlab-容器日志" aria-hidden="true">#</a> 查看 gitlab 容器日志</h3><p>初始化过程可能需要很长时间。您可以通过以下方式跟踪此过程：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> logs <span class="token parameter variable">-f</span> gitlab
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="访问-gitlab" tabindex="-1"><a class="header-anchor" href="#访问-gitlab" aria-hidden="true">#</a> 访问 GitLab</h3><p>访问 GitLab URL，并使用用户名 <code>root</code> 和来自以下命令的密码登录：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> gitlab <span class="token function">grep</span> <span class="token string">&#39;Password:&#39;</span> /etc/gitlab/initial_root_password
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="卸载-linux-软件包" tabindex="-1"><a class="header-anchor" href="#卸载-linux-软件包" aria-hidden="true">#</a> 卸载 Linux 软件包</h2><p>要卸载 Linux 软件包，您可以选择保留数据（代码库、数据库、配置）或全部删除。</p>`,20),ys=l(`<li><p>可选。在删除软件包（使用 <code>apt</code> 或 <code>yum</code>）之前，删除由 Linux 软件包创建的所有用户和群组</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> gitlab-ctl stop <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> gitlab-ctl remove-accounts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果您在删除账户或组时遇到问题，请手动运行 <code>userdel</code> 或 <code>groupdel</code> 来删除它们。您可能还想从 <code>/home/</code> 中手动删除剩余的用户主目录。</p></li><li><p>选择是保留您的数据还是删除所有数据</p><ul><li><p>要保留您的数据（代码库、数据库、配置），请停止极狐GitLab 并删除其 supervision 进程</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl stop gitlab-runsvdir
<span class="token function">sudo</span> systemctl disable gitlab-runsvdir
<span class="token function">sudo</span> <span class="token function">rm</span> /usr/lib/systemd/system/gitlab-runsvdir.service
<span class="token function">sudo</span> systemctl daemon-reload
<span class="token function">sudo</span> systemctl reset-failed
<span class="token function">sudo</span> gitlab-ctl uninstall
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>要删除所有数据</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> gitlab-ctl cleanse <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> /opt/gitlab
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li>`,2),Gs=s("p",null,"卸载软件包",-1),xs=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"sudo"),a(),s("span",{class:"token function"},"apt"),a(` remove gitlab-ee
`),s("span",{class:"token comment"},"# 或"),a(`
`),s("span",{class:"token function"},"sudo"),a(),s("span",{class:"token function"},"apt"),a(` remove gitlab-jh
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Es=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token function"},"sudo"),a(` yum remove gitlab-ee
`),s("span",{class:"token comment"},"# 或"),a(`
`),s("span",{class:"token function"},"sudo"),a(` yum remove gitlab-jh
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),As=l('<h2 id="命令" tabindex="-1"><a class="header-anchor" href="#命令" aria-hidden="true">#</a> 命令</h2><p><code>gitlab-ctl</code> 常用命令如下：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>sudo gitlab-ctl --help</code></td><td>获取 gitlab-ctl 命令帮助</td></tr><tr><td><code>sudo gitlab-ctl start</code></td><td>启动服务</td></tr><tr><td><code>sudo gitlab-ctl stop</code></td><td>停止服务</td></tr><tr><td><code>sudo gitlab-ctl restart</code></td><td>重启服务</td></tr><tr><td><code>sudo gitlab-ctl status</code></td><td>显示所有服务状态</td></tr><tr><td><code>sudo gitlab-ctl reconfigure</code></td><td>更新配置（修改配置后执行）</td></tr><tr><td><code>sudo gitlab-ctl remove-accounts</code></td><td>删除此包使用的所有用户和组</td></tr><tr><td><code>sudo gitlab-ctl uninstall</code></td><td>卸载 gitlab 但会保留您的数据（代码库、数据库、配置）</td></tr><tr><td><code>sudo gitlab-ctl cleanse</code></td><td>卸载 gitlab 删除所有数据</td></tr></tbody></table><p><code>systemd</code> 控制 GitLab 服务命令：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>sudo systemctl start gitlab-runsvdir.service</code></td><td>启动服务</td></tr><tr><td><code>sudo systemctl stop gitlab-runsvdir.service</code></td><td>停止服务</td></tr><tr><td><code>sudo systemctl restart gitlab-runsvdir.service</code></td><td>重启服务</td></tr><tr><td><code>sudo systemctl status gitlab-runsvdir.service</code></td><td>显示所有服务状态</td></tr><tr><td><code>sudo systemctl enable gitlab-runsvdir.service</code></td><td>开机自启</td></tr><tr><td><code>sudo systemctl disable gitlab-runsvdir.service</code></td><td>禁止开机自启</td></tr></tbody></table>',5);function Ts(Os,ws){const o=d("ExternalLinkIcon"),c=d("CodeTabs");return b(),v("div",null,[k,s("ul",null,[s("li",null,[a("GitLab CE/EE 官网 "),s("a",_,[a("安装需求"),i(o)])]),s("li",null,[a("极狐GitLab 官网 "),s("a",f,[a("安装需求"),i(o)])])]),L,y,G,s("ul",null,[x,E,s("li",null,[a("更多用户，请参阅 "),s("a",A,[a("参考架构页面"),i(o)])])]),T,O,w,s("ul",null,[R,I,s("li",null,[a("更多用户，请参阅 "),s("a",B,[a("参考架构页面"),i(o)])])]),S,N,H,i(c,{id:"76",data:[{id:"apt"},{id:"yum"}],"tab-id":"shell"},{title0:n(({value:e,isActive:t})=>[a("apt")]),title1:n(({value:e,isActive:t})=>[a("yum")]),tab0:n(({value:e,isActive:t})=>[M]),tab1:n(({value:e,isActive:t})=>[U]),_:1}),s("p",null,[a("访问 "),s("a",j,[a("GitLab 包仓库"),i(o)]),a("，选择需要安装的 GitLab 版本。")]),D,C,P,i(c,{id:"96",data:[{id:"apt"},{id:"yum"}],"tab-id":"shell"},{title0:n(({value:e,isActive:t})=>[a("apt")]),title1:n(({value:e,isActive:t})=>[a("yum")]),tab0:n(({value:e,isActive:t})=>[$]),tab1:n(({value:e,isActive:t})=>[X]),_:1}),F,i(c,{id:"120",data:[{id:"apt"},{id:"yum"}],"tab-id":"shell"},{title0:n(({value:e,isActive:t})=>[a("apt")]),title1:n(({value:e,isActive:t})=>[a("yum")]),tab0:n(({value:e,isActive:t})=>[z]),tab1:n(({value:e,isActive:t})=>[q]),_:1}),W,s("ul",null,[s("li",null,[V,i(c,{id:"144",data:[{id:"apt"},{id:"yum"}],"tab-id":"shell"},{title0:n(({value:e,isActive:t})=>[a("apt")]),title1:n(({value:e,isActive:t})=>[a("yum")]),tab0:n(({value:e,isActive:t})=>[Q]),tab1:n(({value:e,isActive:t})=>[Z]),_:1}),J]),Y]),K,i(c,{id:"194",data:[{id:"apt"},{id:"yum"}],"tab-id":"shell"},{title0:n(({value:e,isActive:t})=>[a("apt")]),title1:n(({value:e,isActive:t})=>[a("yum")]),tab0:n(({value:e,isActive:t})=>[ss]),tab1:n(({value:e,isActive:t})=>[as]),_:1}),ns,i(c,{id:"222",data:[{id:"apt"},{id:"yum"}],"tab-id":"shell"},{title0:n(({value:e,isActive:t})=>[a("apt")]),title1:n(({value:e,isActive:t})=>[a("yum")]),tab0:n(({value:e,isActive:t})=>[es]),tab1:n(({value:e,isActive:t})=>[ts]),_:1}),is,s("ul",null,[s("li",null,[ls,i(c,{id:"246",data:[{id:"apt"},{id:"yum"}],"tab-id":"shell"},{title0:n(({value:e,isActive:t})=>[a("apt")]),title1:n(({value:e,isActive:t})=>[a("yum")]),tab0:n(({value:e,isActive:t})=>[os]),tab1:n(({value:e,isActive:t})=>[cs]),_:1}),ds]),rs]),ps,s("ul",null,[s("li",null,[a("GitLab CE/EE 官网 "),s("a",us,[a("Docker 安装"),i(o)])]),s("li",null,[a("极狐GitLab 官网 "),s("a",bs,[a("Docker 安装"),i(o)])])]),vs,ms,gs,s("ul",null,[hs,s("li",null,[ks,s("ul",null,[s("li",null,[a("GitLab CE/EE "),s("a",_s,[a("参考官网"),i(o)]),a(" 配置")]),s("li",null,[a("极狐GitLab "),s("a",fs,[a("参考官网"),i(o)]),a(" 配置")])])])]),Ls,s("ol",null,[ys,s("li",null,[Gs,i(c,{id:"557",data:[{id:"apt"},{id:"yum"}],"tab-id":"shell"},{title0:n(({value:e,isActive:t})=>[a("apt")]),title1:n(({value:e,isActive:t})=>[a("yum")]),tab0:n(({value:e,isActive:t})=>[xs]),tab1:n(({value:e,isActive:t})=>[Es]),_:1})])]),As])}const Bs=u(h,[["render",Ts],["__file","install.html.vue"]]);export{Bs as default};
