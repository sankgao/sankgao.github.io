import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as r,c as o,b as a,e,d as s,w as d,f as n}from"./app-3FWpuhDi.js";const l={},h=a("h2",{id:"描述",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#描述","aria-hidden":"true"},"#"),e(" 描述")],-1),u=a("p",null,[a("code",null,"git rebase"),e(" 用于将一个分支的提交记录复制到另一个分支上，并改变分支的基础点。"),a("code",null,"git rebase"),e(" 会提取您在当前分支（也就是 “变基分支”）上的所有提交，保存为临时的补丁文件，然后切换到目标分支（也就是您希望您的当前分支基于的那个分支），最后将这些之前保存的补丁应用到目标分支上。")],-1),b=a("code",null,"git rebase",-1),g=n("<p><code>git rebase</code> 的基本步骤包括：</p><ol><li>切换到目标分支：首先，您需要切换到您想要变基到的目标分支</li><li>执行 <code>rebase</code> 命令：然后，您可以使用 <code>git rebase &lt;source-branch&gt;</code> 命令来开始变基操作，其中 <code>&lt;source-branch&gt;</code> 是您想要复制提交记录的分支</li><li>解决冲突：如果目标分支和源分支在变基期间存在冲突，Git 会暂停并提示您解决这些冲突。解决冲突后，您需要使用 <code>git add</code> 命令标记冲突已解决，并使用 <code>git rebase --continue</code> 命令继续变基过程</li><li>完成 <code>rebase</code>：一旦所有提交都被成功应用到目标分支，变基操作就完成了</li></ol>",2),p=a("code",null,"git rebase",-1),m=a("code",null,"git rebase",-1),v=a("code",null,"git rebase",-1),_=n(`<p>此外，<code>git rebase</code> 还可以用于合并当前分支的多个提交记录，这对于想要清理或整理提交历史的情况非常有用。</p><p>总的来说，<code>git rebase</code> 是一个强大的工具，但也需要谨慎使用，以确保不会破坏项目的版本控制历史或给团队其他成员带来困扰。</p><h2 id="选项" tabindex="-1"><a class="header-anchor" href="#选项" aria-hidden="true">#</a> 选项</h2><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>--continue</code></td><td style="text-align:left;">继续运行 <code>rebase</code> 变基操作</td></tr><tr><td style="text-align:center;"><code>--abort</code></td><td style="text-align:left;">取消 <code>rebase</code> 变基操作，并将 HEAD 重置为原始分支</td></tr><tr><td style="text-align:center;"><code>--quit</code></td><td style="text-align:left;">放弃 <code>rebase</code> 变基操作，但 HEAD 不会重置回原始分支</td></tr><tr><td style="text-align:center;"><code>-i, --interactive</code></td><td style="text-align:left;">交互式执行 <code>rebase</code> 变基操作</td></tr></tbody></table><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><h3 id="将提交记录复制到另一个分支" tabindex="-1"><a class="header-anchor" href="#将提交记录复制到另一个分支" aria-hidden="true">#</a> 将提交记录复制到另一个分支</h3><p>例如：将 <code>dev</code> 分支上的所有提交，复制到 <code>main</code> 分支下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout dev
<span class="token function">git</span> rebase main dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：将 <code>dev</code> 分支下的某一个提交记录，复制到 <code>main</code> 分支下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase main <span class="token operator">&lt;</span>commit<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="继续变基操作" tabindex="-1"><a class="header-anchor" href="#继续变基操作" aria-hidden="true">#</a> 继续变基操作</h3><p>例如：当遇到冲突，<code>git rebase</code> 变基操作停止，手动解决冲突后，继续变基操作。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase <span class="token parameter variable">--continue</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="撤销变基操作" tabindex="-1"><a class="header-anchor" href="#撤销变基操作" aria-hidden="true">#</a> 撤销变基操作</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase <span class="token parameter variable">--abort</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="交互式执行变基操作" tabindex="-1"><a class="header-anchor" href="#交互式执行变基操作" aria-hidden="true">#</a> 交互式执行变基操作</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase <span class="token parameter variable">-i</span> HEAD~4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,17);function f(x,k){const t=c("RouterLink");return r(),o("div",null,[h,u,a("p",null,[e("这个命令可以保持一个线性且干净的提交历史。与 "),s(t,{to:"/computers/commands/git/git_merge.html"},{default:d(()=>[e("git merge")]),_:1}),e(" 不同，"),b,e(" 不会创建一个新的合并提交，而是将变基分支的提交 “复制” 到目标分支上，从而保持一个看似连续的提交历史。这可以使提交历史更容易阅读和理解，尤其是在查看日志或进行代码审查时。")]),g,a("p",null,[e("需要注意的是，虽然 "),p,e(" 可以产生更干净的提交历史，但它也改变了历史的实际顺序。因此，在使用 "),m,e(" 时需要谨慎，特别是在与他人协作的项目中，因为这可能会导致混淆或问题。通常，对于已经公开的提交，推荐使用 "),s(t,{to:"/computers/commands/git/git_merge.html"},{default:d(()=>[e("git merge")]),_:1}),e(" 而不是 "),v,e("，以避免重写已经共享的历史。")]),_])}const N=i(l,[["render",f],["__file","git_rebase.html.vue"]]);export{N as default};
