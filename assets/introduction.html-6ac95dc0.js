import{_ as n,o as s,c as o,f as a}from"./app-8e879d54.js";const e={},i=a(`<h2 id="python-的历史" tabindex="-1"><a class="header-anchor" href="#python-的历史" aria-hidden="true">#</a> Python 的历史</h2><p>1989 年，Python 之父 Guido van Rossum 在阿姆斯特丹为了打发圣诞节的闲暇时间，开发了一门解释型编程语言。国内社区通常将 Guido van Rossum 简称为 “龟叔”，“龟” 的发音取自 Guido 中的 “Gui”。</p><h2 id="python-的特点" tabindex="-1"><a class="header-anchor" href="#python-的特点" aria-hidden="true">#</a> Python 的特点</h2><p>Python 之所以受到大家的欢迎，是因为它有很多优秀 “品质”。</p><ul><li><strong>简单、易学、免费、开源</strong>：Python 简单、易学。我们可以自由发布其复制版本，阅读、修改其源代码，将其（部分）用于新软件中</li><li><strong>解释型</strong>：Python 是边解释边执行的，Python 解释器会将源代码转换为中间字节码形式，然后将其解释为机器语言并执行</li><li><strong>可移植</strong>：Python 解释器已被移植在许多平台上，Python 程序无须经过修改就可以在多个平台上运行</li><li><strong>代码规范</strong>：Python 所采用的强制缩进的方式，使得其代码具有极佳的可读性</li><li><strong>面向对象</strong>：与 C++ 和 Java 等相比，Python 以强大而简单的方式实现了面向对象编程</li><li><strong>胶水语言</strong>：标准版本的 Python 调用 C 语言，并可以借助 C 语言的接口驱动调用所有编程语言</li><li><strong>丰富的库</strong>：Python 的标准库种类繁多，可以帮助处理各种工作，我们不需要安装就可以直接使用这些库</li><li><strong>动态类型</strong>：Python 不会检查数据类型，在声明变量时不需要指定数据类型</li></ul><h2 id="python-编写方式" tabindex="-1"><a class="header-anchor" href="#python-编写方式" aria-hidden="true">#</a> Python 编写方式</h2><p>编写和运行 Python 程序主要有两种方式：</p><ol><li><strong>交互方式</strong>：指我们每写一行 Python 代码，就可以敲回车键来运行和调试代码</li><li><strong>文件方式</strong>：指先编写好 Python 代码文件（<code>*.py</code>），然后通过 Python 指令运行，保存文件时，文件命名推荐全部小写英文字母，后缀名必须为 <code>.py</code>，文件编码为 <code>UTF-8</code></li></ol><h2 id="代码缩进" tabindex="-1"><a class="header-anchor" href="#代码缩进" aria-hidden="true">#</a> 代码缩进</h2><p>缩进可以使用空格或者 <kbd>Tab</kbd> 键实现。使用空格时，一般采用 4 个空格作为一个缩进量，而使用 <kbd>Tab</kbd> 键时，采用 1 个 <kbd>Tab</kbd> 键作为一个缩进量。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>通常情况下建议采用空格进行缩进</p></div><h2 id="编写规则" tabindex="-1"><a class="header-anchor" href="#编写规则" aria-hidden="true">#</a> 编写规则</h2><ul><li><p>每个 <code>import</code> 语句只导入一个模块，尽量避免一次导入多个模块</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os  <span class="token comment"># 推荐写法</span>
<span class="token keyword">import</span> os<span class="token punctuation">,</span> sys  <span class="token comment"># 不推荐写法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>不要在行尾添加分号（<code>;</code>），也不要用分号将两条命令放在同一行，不规范语法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> y <span class="token operator">=</span> <span class="token number">30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>建议每行不超过 80 个字符，如果超过，建议使用小括号（<code>()</code>）将多行内容隐式的连接起来，而不推荐使用反斜杠（<code>\\</code>）进行连接</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 推荐写法</span>
txt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;1989年，Python 之父 Guido van Rossum 在阿姆斯特丹为了打发圣诞节的闲暇时间，开发了一门解释型编程语言。&quot;</span>
       <span class="token string">&quot;国内社区通常将 Guido van Rossum 简称为 “龟叔”，“龟” 的发音取自 Guido 中的 “Gui”。&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 不推荐写法</span>
txt <span class="token operator">=</span> <span class="token punctuation">(</span>&quot;<span class="token number">1989</span>年，Python 之父 Guido van Rossum 在阿姆斯特丹为了打发圣诞节的闲暇时间，开发了一门解释型编程语言。\\
   国内社区通常将 Guido van Rossum 简称为 “龟叔”，“龟” 的发音取自 Guido 中的 “Gui”。&quot;<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下两种情况除外：</p><ul><li>导入模块的语句过长</li><li>注释里的 URL</li></ul></li><li><p>使用必要的空行增加代码的可读性。一般在顶级定义（如：函数或类的定义）之间空两行，而方法定义空一行</p></li><li><p>通常情况，运算符两侧、函数参数之间、“<code>,</code>” 号两侧建议使用空格进行分隔</p></li><li><p>应该避免在循环中使用 “<code>+</code>” 和 “<code>+=</code>” 运算符累加字符串。这是因为字符串是不可变的，这样做会创建不必要的临时对象，推荐将每个字符串加入列表，然后在循环结束后使用 <code>join()</code> 方法连接列表</p></li><li><p>适当使用异常处理结构提高程序的容错性，但不能过多依赖异常处理结构，适当的显示判断还是必要的</p></li></ul><h2 id="命名规范" tabindex="-1"><a class="header-anchor" href="#命名规范" aria-hidden="true">#</a> 命名规范</h2><ul><li>模块名尽量短，并且全部使用小写字母，可以使用下划线（<code>_</code>）分隔多个字母</li><li>包名尽量短，并且全部使用小写字母，不推荐使用下划线（<code>_</code>）</li><li>类名采用单词首字母大写形式（即：驼峰风格命名）</li><li>模块内部的类采用下划线（<code>_</code>）+ 驼峰风格的类名组成</li><li>函数、类的属性、方法的命名全部使用小写字母，多个字母间用下划线（<code>_</code>）分隔</li><li>常量命名时全部使用大写字母，可以使用下划线（<code>_</code>）</li><li>使用单下划线（<code>_</code>）开头的模块变量或函数是受保护的，在使用 <code>from &lt;模块名&gt; import &lt;代码元素&gt;</code> 语句从模块中导入时，这些变量或函数不能被导入</li><li>使用双下划线（<code>__</code>）开头的实例变量或方法是类私有的</li></ul>`,15),t=[i];function l(d,c){return s(),o("div",null,t)}const r=n(e,[["render",l],["__file","introduction.html.vue"]]);export{r as default};
