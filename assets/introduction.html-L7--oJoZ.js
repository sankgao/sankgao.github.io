import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{g as u,r as c,o as r,c as d,b as n,t as k,e as s,d as t,w as v,f as a}from"./app-BRAj6-d7.js";const g=a(`<h2 id="什么是-vue" tabindex="-1"><a class="header-anchor" href="#什么是-vue" aria-hidden="true">#</a> 什么是 Vue</h2><p>Vue（发音为 <code>/vjuː/</code>，类似 view）是一款用于构建用户界面的 JavaScript 框架。它基于标准 <code>HTML</code>、<code>CSS</code> 和 <code>JavaScript</code> 构建，并提供了一套 <strong>声明式的</strong>、<strong>组件化的</strong> 编程模型，可以帮助您高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。</p><p>下面是一个最基本的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;div id=&quot;app&quot;&gt;
  &lt;button @click=&quot;count++&quot;&gt;
    Count is: {{ count }}
  &lt;/button&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结果展示</strong></p>`,6),m={class:"demo"},b=n("p",null,[s("上面的示例展示了 Vue 的两个 "),n("strong",null,"核心功能：")],-1),h=n("ul",null,[n("li",null,[n("strong",null,"声明式渲染"),s("：Vue 基于标准 HTML 拓展了一套模板语法，可以声明式地描述最终输出的 HTML 和 JavaScript 状态之间的关系")]),n("li",null,[n("strong",null,"响应性"),s("：Vue 会自动跟踪 JavaScript 状态并在其发生变化时响应式地更新 DOM")])],-1),I={class:"hint-container tip"},V=n("p",{class:"hint-container-title"},"预备知识",-1),_=n("code",null,"HTML",-1),f=n("code",null,"CSS",-1),A=n("code",null,"JavaScript",-1),G={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"JavaScript",-1),C=a('<h2 id="渐进式框架​" tabindex="-1"><a class="header-anchor" href="#渐进式框架​" aria-hidden="true">#</a> 渐进式框架​</h2><p>Vue 是一个 <strong>框架</strong>，也是一个 <strong>生态</strong>。其功能覆盖了大部分前端开发常见的需求。但 Web 世界是十分多样化的，不同的开发者在 Web 上构建的东西可能在形式和规模上会有很大的不同。考虑到这一点，Vue 的设计非常注重 <strong>灵活性</strong> 和 <strong>可以被逐步集成</strong> 这个特点。根据您的需求场景，您可以用不同的方式使用 Vue：</p><ul><li>无需构建步骤，渐进式增强静态的 HTML</li><li>在任何页面中作为 <code>Web Components</code> 嵌入</li><li>单页应用（SPA）</li><li>全栈/服务端渲染（SSR）</li><li>Jamstack/静态站点生成（SSG）</li><li>开发桌面端、移动端、WebGL，甚至是命令行终端中的界面</li></ul><p>如果您是初学者，可能会觉得这些概念有些复杂。别担心！以下的内容只需要具备基础的 HTML 和 JavaScript 知识。即使您不是这些方面的专家，也能够跟得上。</p>',4),x=a(`<p>无论再怎么灵活，Vue 的核心知识在所有这些用例中都是通用的。即使您现在只是一个初学者，随着您的不断成长，到未来有能力实现更复杂的项目时，这一路上获得的知识依然会适用。如果您已经是一个老手，您可以根据实际场景来选择使用 Vue 的最佳方式，在各种场景下都可以保持同样的开发效率。这就是为什么将 Vue 称为 <strong>渐进式框架</strong>：它是一个可以与您共同成长、适应您不同需求的框架。</p><h2 id="单文件组件​" tabindex="-1"><a class="header-anchor" href="#单文件组件​" aria-hidden="true">#</a> 单文件组件​</h2><p>在大多数启用了构建工具的 Vue 项目中，可以使用一种类似 HTML 格式的文件来书写 Vue 组件，它被称为 <strong>单文件组件</strong>（也被称为 <code>*.vue</code> 文件，英文 Single-File Components，缩写为 <code>SFC</code>）。顾名思义，Vue 的单文件组件会将一个组件的逻辑（JavaScript），模板（HTML）和样式（CSS）封装在同一个文件里。</p><p>下面将用 <strong>单文件组件</strong> 的格式重写上面的计数器示例：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>count++<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Count is: {{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">button</span> <span class="token punctuation">{</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单文件组件是 Vue 的标志性功能。如果您的用例需要进行 <strong>构建</strong>，则推荐用它来编写 Vue 组件。您可以在后续 <a href="">单文件组件的用法及用途</a> 中了解更多。但您暂时只需要知道 Vue 会帮忙处理所有这些构建工具的配置就好。</p><h2 id="api-风格​" tabindex="-1"><a class="header-anchor" href="#api-风格​" aria-hidden="true">#</a> API 风格​</h2><p>Vue 的组件可以按两种不同的风格书写：<strong>选项式 API</strong> 和 <strong>组合式 API。</strong></p><h3 id="选项式-api-options-api" tabindex="-1"><a class="header-anchor" href="#选项式-api-options-api" aria-hidden="true">#</a> 选项式 API（Options API）</h3><p>选项式 API 可以用包含多个选项的对象来描述组件的逻辑，例如：<code>data</code>、<code>methods</code> 和 <code>mounted</code>。选项所定义的属性都会暴露在函数内部的 <code>this</code> 上，它会指向当前的组件实例。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token comment">// data() 返回的属性将会成为响应式的状态</span>
  <span class="token comment">// 并且暴露在 this 上</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// methods 是一些用来更改状态与触发更新的函数</span>
  <span class="token comment">// 它们可以在模板中作为事件监听器绑定</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// 生命周期钩子会在组件生命周期的各个不同阶段被调用</span>
  <span class="token comment">// 例如这个函数就会在组件挂载完成后被调用</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">The initial count is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Count is: {{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),P={href:"https://sfc.vuejs.org/#eyJBcHAudnVlIjoiPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLy8gcmVhY3RpdmUgc3RhdGVcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY291bnQ6IDBcbiAgICB9XG4gIH0sXG5cbiAgLy8gZnVuY3Rpb25zIHRoYXQgbXV0YXRlIHN0YXRlIGFuZCB0cmlnZ2VyIHVwZGF0ZXNcbiAgbWV0aG9kczoge1xuICAgIGluY3JlbWVudCgpIHtcbiAgICAgIHRoaXMuY291bnQrK1xuICAgIH1cbiAgfSxcblxuICAvLyBsaWZlY3ljbGUgaG9va3NcbiAgbW91bnRlZCgpIHtcbiAgICBjb25zb2xlLmxvZyhgVGhlIGluaXRpYWwgY291bnQgaXMgJHt0aGlzLmNvdW50fS5gKVxuICB9XG59XG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuICA8YnV0dG9uIEBjbGljaz1cImluY3JlbWVudFwiPkNvdW50IGlzOiB7eyBjb3VudCB9fTwvYnV0dG9uPlxuPC90ZW1wbGF0ZT4ifQ==",target:"_blank",rel:"noopener noreferrer"},S=a(`<h3 id="组合式-api-composition-api" tabindex="-1"><a class="header-anchor" href="#组合式-api-composition-api" aria-hidden="true">#</a> 组合式 API（Composition API）</h3><p>组合式 API 可以使用导入的 <strong>API 函数</strong> 来描述组件逻辑。在单文件组件中，组合式 API 通常会与 <code>&lt;script setup&gt;</code> 搭配使用。这个 <code>setup</code> 属性是一个标识，告诉 Vue 需要在编译时进行一些处理，可以更简洁地使用组合式 API。比如：<code>&lt;script setup&gt;</code> 中的导入和顶层变量/函数都能够在模板中直接使用。</p><p>下面是使用了组合式 API 与 <code>&lt;script setup&gt;</code> 改造后和上面的模板完全一样的组件：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token comment">// 响应式状态</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment">// 用来修改状态、触发更新的函数</span>
<span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  count<span class="token punctuation">.</span>value<span class="token operator">++</span>
<span class="token punctuation">}</span>

<span class="token comment">// 生命周期钩子</span>
<span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">The initial count is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Count is: {{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),X={href:"https://sfc.vuejs.org/#eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkIH0gZnJvbSAndnVlJ1xuXG4vLyByZWFjdGl2ZSBzdGF0ZVxuY29uc3QgY291bnQgPSByZWYoMClcblxuLy8gZnVuY3Rpb25zIHRoYXQgbXV0YXRlIHN0YXRlIGFuZCB0cmlnZ2VyIHVwZGF0ZXNcbmZ1bmN0aW9uIGluY3JlbWVudCgpIHtcbiAgY291bnQudmFsdWUrK1xufVxuXG4vLyBsaWZlY3ljbGUgaG9va3Ncbm9uTW91bnRlZCgoKSA9PiB7XG4gIGNvbnNvbGUubG9nKGBUaGUgaW5pdGlhbCBjb3VudCBpcyAke2NvdW50LnZhbHVlfS5gKVxufSlcbjwvc2NyaXB0PlxuXG48dGVtcGxhdGU+XG4gIDxidXR0b24gQGNsaWNrPVwiaW5jcmVtZW50XCI+Q291bnQgaXM6IHt7IGNvdW50IH19PC9idXR0b24+XG48L3RlbXBsYXRlPiJ9",target:"_blank",rel:"noopener noreferrer"},w=a('<h2 id="该选哪一个" tabindex="-1"><a class="header-anchor" href="#该选哪一个" aria-hidden="true">#</a> 该选哪一个</h2><p>两种 API 风格都能够覆盖大部分的应用场景。它们只是 <strong>同一个底层系统</strong> 所提供的 <strong>两套不同的接口</strong>。实际上，选项式 API 是在组合式 API 的 <strong>基础上</strong> 实现的！关于 Vue 的基础概念和知识在它们之间都是通用的。</p><p>选项式 API 以 <strong>组件实例</strong> 的概念为中心（即上述例子中的 <code>this</code>），对于有面向对象语言背景的用户来说，这通常与基于类的心智模型更为一致。同时，它将响应性相关的细节抽象出来，并强制按照选项来组织代码，从而对初学者而言更为友好。</p><p>组合式 API 的核心思想是直接在 <strong>函数作用域内</strong> 定义响应式状态变量，并将从多个函数中得到的状态组合起来处理复杂问题。这种形式更加自由，也需要您对 Vue 的响应式系统有更深的理解才能高效使用。相应的，它的灵活性也使得组织和重用逻辑的模式变得更加强大。</p><p>在 <a href="">组合式 API FAQ</a> 中，您可以了解更多关于这两种 API 风格的对比以及组合式 API 所带来的潜在收益。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果您是使用 Vue 的新手，这里是我的大致建议：</p><ul><li><p>在学习的过程中，推荐采用更易于自己理解的风格。再强调一下，大部分的核心概念在这两种风格之间都是通用的。熟悉了一种风格以后，您也能够很快地理解另一种风格。</p></li><li><p>在生产项目中：</p><ul><li>当您不需要使用构建工具，或者打算主要在低复杂度的场景中使用 Vue，例如：渐进增强的应用场景，推荐采用选项式 API</li><li>当您打算用 Vue 构建完整的单页应用，推荐采用组合式 API + 单文件组件</li></ul></li></ul></div>',6),H={__name:"introduction.html",setup(B){const p=u(0);return(Z,o)=>{const e=c("ExternalLinkIcon"),l=c("RouterLink");return r(),d("div",null,[g,n("div",m,[n("button",{onClick:o[0]||(o[0]=W=>p.value++)}," Count is: "+k(p.value),1)]),b,h,n("div",I,[V,n("p",null,[s("接下来的内容会假设您对 "),_,s("、"),f,s(" 和 "),A,s(" 已经基本熟悉。如果您对前端开发完全陌生，最好不要直接从一个框架开始进行入门学习——最好是掌握了基础知识再回到这里。您可以通过这篇 "),n("a",G,[s("JavaScript 概述"),t(e)]),s(" 来检验您的 "),y,s(" 知识水平。如果之前有其他框架的经验会很有帮助，但也不是必须的。")])]),C,n("p",null,[s("如果您是有经验的开发者，希望了解如何以最合适的方式在项目中引入 Vue，或者是对上述的这些概念感到好奇，在 "),t(l,{to:"/computers/framework/vue3/ways_of_using_vue.html"},{default:v(()=>[s("使用 Vue 的多种方式")]),_:1}),s(" 中讨论了有关它们的更多细节。")]),x,n("p",null,[n("a",P,[s("在演练场中尝试一下"),t(e)])]),S,n("p",null,[n("a",X,[s("在演练场中尝试一下"),t(e)])]),w])}}},R=i(H,[["__file","introduction.html.vue"]]);export{R as default};
