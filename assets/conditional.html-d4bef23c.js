import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as s,c as n,b as e,e as t,d as i,f as l}from"./app-520f8550.js";const c={},v=l(`<h2 id="v-if" tabindex="-1"><a class="header-anchor" href="#v-if" aria-hidden="true">#</a> v-if</h2><p><code>v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回真值时才被渲染。</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;h1 v-if=&quot;awesome&quot;&gt;Vue is awesome!&lt;/h1&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="v-else" tabindex="-1"><a class="header-anchor" href="#v-else" aria-hidden="true">#</a> v-else</h2><p>您也可以使用 <code>v-else</code> 为 <code>v-if</code> 添加一个 “else 区块”。</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;button @click=&quot;awesome = !awesome&quot;&gt;Toggle&lt;/button&gt;

&lt;h1 v-if=&quot;awesome&quot;&gt;Vue is awesome!&lt;/h1&gt;
&lt;h1 v-else&gt;Oh no 😢&lt;/h1&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),r={href:"https://play.vuejs.org/#eNpFjkEOgjAQRa8ydIMulLA1hegJ3LnqBskAjdA27RQXhHu4M/GEHsEiKLv5mfdf/sBOxux7j+zAuCutNAQOyZtcKNkZbQkGsFjBCJXVHcQBjYUSqtTKERR3dLpDyCZmQ9bjViiezKKgCIGwM21BGBIAv3oireBYtrK8ZYKtgmg5BctJ13WLPJnhr0YQb1Lod7JaS4G8eATpfjMinjTphC8wtg7zcwNKw/v5eC1fnvwnsfEDwaha7w==",target:"_blank",rel:"noopener noreferrer"},h=l(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>一个 <code>v-else</code> 元素必须跟在一个 <code>v-if</code> 或者 <code>v-else-if</code> 元素后面，否则它将不会被识别</p></div><h2 id="v-else-if" tabindex="-1"><a class="header-anchor" href="#v-else-if" aria-hidden="true">#</a> v-else-if</h2><p>顾名思义，<code>v-else-if</code> 提供的是相应于 <code>v-if</code> 的 “else if 区块”。它可以连续多次重复使用：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;div v-if=&quot;type === &#39;A&#39;&quot;&gt;
  A
&lt;/div&gt;
&lt;div v-else-if=&quot;type === &#39;B&#39;&quot;&gt;
  B
&lt;/div&gt;
&lt;div v-else-if=&quot;type === &#39;C&#39;&quot;&gt;
  C
&lt;/div&gt;
&lt;div v-else&gt;
  Not A/B/C
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和 <code>v-else</code> 类似，一个使用 <code>v-else-if</code> 的元素必须紧跟在一个 <code>v-if</code> 或一个 <code>v-else-if</code> 元素后面。</p><h2 id="template-上的-v-if" tabindex="-1"><a class="header-anchor" href="#template-上的-v-if" aria-hidden="true">#</a> &lt;template&gt; 上的 v-if</h2><p>因为 <code>v-if</code> 是一个指令，他必须依附于某个元素。但如果想要切换不止一个元素呢？在这种情况下可以在一个 <code>&lt;template&gt;</code> 元素上使用 <code>v-if</code>，这只是一个不可见的包装器元素，最后渲染的结果并不会包含这个 <code>&lt;template&gt;</code> 元素。</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;template v-if=&quot;ok&quot;&gt;
  &lt;h1&gt;Title&lt;/h1&gt;
  &lt;p&gt;Paragraph 1&lt;/p&gt;
  &lt;p&gt;Paragraph 2&lt;/p&gt;
&lt;/template&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>v-else</code> 和 <code>v-else-if</code> 也可以在 <code>&lt;template&gt;</code> 上使用。</p><h2 id="v-show" tabindex="-1"><a class="header-anchor" href="#v-show" aria-hidden="true">#</a> v-show</h2><p>另一个可以用来按条件显示一个元素的指令是 <code>v-show</code>。其用法基本一样：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;h1 v-show=&quot;ok&quot;&gt;Hello!&lt;/h1&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不同之处在于 <code>v-show</code> 会在 DOM 渲染中保留该元素；<code>v-show</code> 仅切换了该元素上名为 <code>display</code> 的 CSS 属性。</p><p><code>v-show</code> 不支持在 <code>&lt;template&gt;</code> 元素上使用，也不能和 <code>v-else</code> 搭配使用。</p><h2 id="v-if-vs-v-show" tabindex="-1"><a class="header-anchor" href="#v-if-vs-v-show" aria-hidden="true">#</a> v-if VS v-show</h2><p><code>v-if</code> 是 “真实的” 按条件渲染，因为它确保了在切换时，条件区块内的事件监听器和子组件都会被销毁与重建。</p><p><code>v-if</code> 也是 <strong>惰性</strong> 的：如果在初次渲染时条件值为 false，则不会做任何事。条件区块只有当条件首次变为 true 时才被渲染。</p><p>相比之下，<code>v-show</code> 简单许多，元素无论初始条件如何，始终会被渲染，只有 CSS <code>display</code> 属性会被切换。</p><p>总的来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要频繁切换，则使用 <code>v-show</code> 较好；如果在运行时绑定条件很少改变，则 <code>v-if</code> 会更合适。</p><h2 id="v-if-和-v-for" tabindex="-1"><a class="header-anchor" href="#v-if-和-v-for" aria-hidden="true">#</a> v-if 和 v-for</h2>`,20),u={class:"hint-container warning"},p=e("p",{class:"hint-container-title"},"注意",-1),m=e("code",null,"v-if",-1),f=e("code",null,"v-for",-1),g=e("strong",null,"不推荐的",-1),b={href:"https://cn.vuejs.org/style-guide/rules-essential.html#avoid-v-if-with-v-for",target:"_blank",rel:"noopener noreferrer"},_=e("p",null,[t("当 "),e("code",null,"v-if"),t(" 和 "),e("code",null,"v-for"),t(" 同时存在于一个元素上的时候，"),e("code",null,"v-if"),t(" 会首先被执行。请查看 "),e("a",{href:"list#v-for-with-v-if"},"列表渲染指南"),t(" 获取更多细节。")],-1);function w(x,q){const d=o("ExternalLinkIcon");return s(),n("div",null,[v,e("p",null,[e("a",r,[t("在演练场中尝试一下"),i(d)])]),h,e("div",u,[p,e("p",null,[t("同时使用 "),m,t(" 和 "),f,t(" 是 "),g,t("，因为这样二者的优先级不明显。请查看 "),e("a",b,[t("风格指南"),i(d)]),t(" 获得更多信息。")])]),_])}const C=a(c,[["render",w],["__file","conditional.html.vue"]]);export{C as default};
