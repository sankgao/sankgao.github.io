import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as e,f as s}from"./app-6CM8K23F.js";const a={},l=s(`<p>C 语言的每一种数据，都是有类型（type）的，编译器必须知道数据的类型，才能操作数据。所谓 “类型”，就是相似的数据所拥有的共同特征，那么一旦知道某个值的数据类型，就能知道该值的特征和操作方式。</p><p>基本数据类型有三种：字符（char）、整数（int）和浮点数（float）。复杂的类型都是基于它们构建的。</p><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><table><thead><tr><th style="text-align:left;">类型关键字</th><th style="text-align:left;">类型关键字</th><th style="text-align:left;">存储大小</th><th style="text-align:left;">值范围</th></tr></thead><tbody><tr><td style="text-align:left;">字符型</td><td style="text-align:left;">char</td><td style="text-align:left;">1 字节</td><td style="text-align:left;">-2<sup>(8-1)</sup> ~ 2<sup>(8-1)</sup> - 1 即 -128 ~ 127</td></tr><tr><td style="text-align:left;">有符号字符型</td><td style="text-align:left;">signed char</td><td style="text-align:left;">1 字节</td><td style="text-align:left;">-2<sup>(8-1)</sup> ~ 2<sup>(8-1)</sup> - 1 即 -128 ~ 127</td></tr><tr><td style="text-align:left;">无符号字符型</td><td style="text-align:left;">unsigned char</td><td style="text-align:left;">1 字节</td><td style="text-align:left;">0 ~ 2<sup>(8)</sup> - 1 即 0 ~ 255</td></tr><tr><td style="text-align:left;">整型</td><td style="text-align:left;">int</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">-2<sup>(32-1)</sup> ~ 2<sup>(32-1)</sup> - 1 即 -2,147,483,648 ~ 2,147,483,647</td></tr><tr><td style="text-align:left;">有符号整型</td><td style="text-align:left;">signed int</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">-2<sup>(32-1)</sup> ~ 2<sup>(32-1)</sup> - 1 即 -2,147,483,648 ~ 2,147,483,647</td></tr><tr><td style="text-align:left;">无符号整型</td><td style="text-align:left;">unsigned int</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">0 ~ 2<sup>(32)</sup> - 1 即 0 ~ 4,294,967,295</td></tr><tr><td style="text-align:left;">短整型</td><td style="text-align:left;">short int</td><td style="text-align:left;">2 字节</td><td style="text-align:left;">-2<sup>(16-1)</sup> ~ 2<sup>(16-1)</sup> - 1 即 -32,768 ~ 32,767</td></tr><tr><td style="text-align:left;">有符号短整型</td><td style="text-align:left;">signed short int</td><td style="text-align:left;">2 字节</td><td style="text-align:left;">-2<sup>(16-1)</sup> ~ 2<sup>(16-1)</sup> - 1 即 -32,768 ~ 32,767</td></tr><tr><td style="text-align:left;">无符号短整型</td><td style="text-align:left;">unsigned short int</td><td style="text-align:left;">2 字节</td><td style="text-align:left;">0 ~ 2<sup>(16)</sup> - 1 即 0 ~ 65,535</td></tr><tr><td style="text-align:left;">长整型</td><td style="text-align:left;">long int</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">-2<sup>(32-1)</sup> ~ 2<sup>(32-1)</sup> - 1 即 -2,147,483,648 ~ 2,147,483,647</td></tr><tr><td style="text-align:left;">有符号长整型</td><td style="text-align:left;">signed long int</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">-2<sup>(32-1)</sup> ~ 2<sup>(32-1)</sup> - 1 即 -2,147,483,648 ~ 2,147,483,647</td></tr><tr><td style="text-align:left;">无符号长整型</td><td style="text-align:left;">unsigned long int</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">0 ~ 2<sup>(32)</sup> - 1 即 0 ~ 4,294,967,295</td></tr><tr><td style="text-align:left;">长长整型</td><td style="text-align:left;">long long int</td><td style="text-align:left;">8 字节</td><td style="text-align:left;">-2<sup>(64-1)</sup> ~ 2<sup>(64-1)</sup> - 1 即 -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807</td></tr><tr><td style="text-align:left;">有符号长长整型</td><td style="text-align:left;">signed long long int</td><td style="text-align:left;">8 字节</td><td style="text-align:left;">-2<sup>(64-1)</sup> ~ 2<sup>(64-1)</sup> - 1 即 -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807</td></tr><tr><td style="text-align:left;">无符号长长整型</td><td style="text-align:left;">unsigned long long int</td><td style="text-align:left;">8 字节</td><td style="text-align:left;">0 ~ 2<sup>(64)</sup> - 1 即 0 ~ 18,446,744,073,709,551,615</td></tr><tr><td style="text-align:left;">单精度浮点数</td><td style="text-align:left;">float</td><td style="text-align:left;">4 字节</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">双精度浮点数</td><td style="text-align:left;">double</td><td style="text-align:left;">8 字节</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">长双精度浮点数</td><td style="text-align:left;">long double</td><td style="text-align:left;">10 字节</td><td style="text-align:left;"></td></tr></tbody></table><h2 id="字符类型" tabindex="-1"><a class="header-anchor" href="#字符类型" aria-hidden="true">#</a> 字符类型</h2><p>字符类型指的是单个字符，类型声明使用 <code>char</code> 关键字。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;B&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>C 语言规定，字符常量必须放在单引号里面。</p><p>在计算机内部，字符类型使用一个字节（8位）存储。C 语言将其当作整数处理，所以字符类型就是宽度为一个字节的整数。每个字符对应一个整数（由 ASCII 码确定），比如 B 对应整数 66。</p><p>字符类型在不同计算机的默认范围是不一样的。一些系统默认为 <code>-128 ~ 127</code>，另一些系统默认为 <code>0 ~ 255</code>。这两种范围正好都能覆盖 <code>0 ~ 127</code> 的 ASCII 字符范围。</p><p>只要在字符类型的范围之内，整数与字符是可以互换的，都可以赋值给字符类型的变量。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">66</span><span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;B&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个字符类型的变量可以进行数学运算，字符类型变量 a 和 b 相加，视同两个整数相加。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token char">&#39;B&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// 等同于 char a = 66;</span>
<span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token char">&#39;C&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// 等同于 char b = 67;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 133</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单引号本身也是一个字符，如果要表示这个字符常量，必须使用反斜杠转义。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> t <span class="token operator">=</span> <span class="token char">&#39;\\&#39;&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种转义的写法，主要用来表示 ASCII 码定义的一些无法打印的控制字符，它们也属于字符类型的值。</p><ul><li><strong>\\a</strong>：警报，这会使得终端发出警报声或出现闪烁，或者两者同时发生</li><li><strong>\\b</strong>：退格键，光标回退一个字符，但不删除字符</li><li><strong>\\f</strong>：换页符，光标移到下一页。在现代系统上，这已经反映不出来了，行为改成类似于 <code>\\v</code></li><li><strong>\\n</strong>：换行符</li><li><strong>\\r</strong>：回车符，光标移到同一行的开头</li><li><strong>\\t</strong>：制表符，光标移到下一个水平制表位，通常是下一个 8 的倍数</li><li><strong>\\v</strong>：垂直分隔符，光标移到下一个垂直制表位，通常是下一行的同一列</li><li><strong>\\0</strong>：null 字符，代表没有内容。注意，这个值不等于数字 0</li></ul><p>转义写法还能使用八进制和十六进制表示一个字符。</p><ul><li><strong>\\nn</strong>：字符的八进制写法，nn 为八进制值</li><li><strong>\\xnn</strong>：字符的十六进制写法，nn 为十六进制值</li></ul><p>以下四种写法都是等价的：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token char">&#39;B&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token number">66</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token char">&#39;\\102&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 八进制</span>
<span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token char">&#39;\\x42&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 十六进制</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="整数类型" tabindex="-1"><a class="header-anchor" href="#整数类型" aria-hidden="true">#</a> 整数类型</h2><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h3><p>整数类型用来表示较大的整数，类型声明使用 <code>int</code> 关键字。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不同计算机的 <code>int</code> 类型的大小是不一样的。比较常见的是使用 <code>4</code> 个字节（32位）存储一个 <code>int</code> 类型的值，但是 <code>2</code> 个字节（16 位）或 <code>8</code> 个字节（64位）也有可能使用。它们可以表示的整数范围如下：</p><ul><li><strong>16位</strong>：-32,768 ~ 32,767</li><li><strong>32位</strong>：-2,147,483,648 ~ 2,147,483,647</li><li><strong>64位</strong>：-9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807</li></ul><h3 id="signed-和-unsigned" tabindex="-1"><a class="header-anchor" href="#signed-和-unsigned" aria-hidden="true">#</a> signed 和 unsigned</h3><p>C 语言使用 <code>signed</code> 关键字，表示一个类型带有正负号，包含负值；使用 <code>unsigned</code> 关键字，表示该类型不带有正负号，只能表示零和正整数。</p><p>对于 <code>int</code> 类型，默认是带有正负号的，也就是说 <code>int</code> 等同于 <code>signed int</code>。由于这是默认情况，关键字 <code>signed</code> 一般都省略不写，但是写了也不算错。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">signed</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token keyword">int</span> a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>int</code> 类型也可以不带正负号，只表示非负整数。这时就必须使用关键字 <code>unsigned</code> 声明变量。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>整数变量声明为 <code>unsigned</code> 的好处是，同样长度的内存能够表示的最大整数值，增大了一倍。比如，16位的 <code>signed int</code> 最大值为 <code>32,767</code>，而 <code>unsigned int</code> 的最大值增大到了 <code>65,535</code>。</p><p><code>unsigned int</code> 里面的 <code>int</code> 可以省略，所以上面的变量声明也可以写成下面这样：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>字符类型 <code>char</code> 也可以设置 <code>signed</code> 和 <code>unsigned</code>。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">signed</span> <span class="token keyword">char</span> c<span class="token punctuation">;</span>  <span class="token comment">// 范围为 -128 到 127</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> c<span class="token punctuation">;</span>  <span class="token comment">// 范围为 0 到 255</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>C 语言规定 char 类型默认是否带有正负号，由当前系统决定。这就是说，<code>char</code> 不等同于 <code>signed char</code>，它有可能是 <code>signed char</code>，也有可能是 <code>unsigned char</code>。这一点与 <code>int</code> 不同，<code>int</code> 就是等同于 <code>signed int</code></p></div><h3 id="整数的子类型" tabindex="-1"><a class="header-anchor" href="#整数的子类型" aria-hidden="true">#</a> 整数的子类型</h3><p>如果 <code>int</code> 类型使用 4 个或 8 个字节表示一个整数，对于小整数，这样做很浪费空间。另一方面，某些场合需要更大的整数，8 个字节还不够。为了解决这些问题，C 语言在 <code>int</code> 类型之外，又提供了三个整数的子类型。这样有利于更精细地限定整数变量的范围，也有利于更好地表达代码的意图。</p><ul><li><strong>short int（简写为 short）</strong>：占用空间不多于 <code>int</code>，一般占用 2 个字节（整数范围为 -32768 ~ 32767）</li><li><strong>long int（简写为 long）</strong>：占用空间不少于 <code>int</code>，至少为 4 个字节</li><li><strong>long long int（简写为 long long）</strong>：占用空间多于 <code>long</code>，至少为 8 个字节</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">short</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，short、long、long long 都是带符号的（signed），即 <code>signed</code> 关键字省略了。它们也可以声明为不带符号（unsigned），使得能够表示的最大值扩大一倍。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C 语言允许省略 <code>int</code>，所以变量声明语句也可以写成下面这样：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">short</span> a<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">short</span> a<span class="token punctuation">;</span>

<span class="token keyword">long</span> b<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> b<span class="token punctuation">;</span>

<span class="token keyword">long</span> <span class="token keyword">long</span> c<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> c<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同的计算机，数据类型的字节长度是不一样的。确实需要32位整数时，应使用 <code>long</code> 类型而不是 <code>int</code> 类型，可以确保不少于 4 个字节；确实需要64位的整数时，应该使用 <code>long long</code> 类型，可以确保不少于 8 个字节。另一方面，为了节省空间，只需要16位整数时，应使用 <code>short</code> 类型；需要8位整数时，应该使用 <code>char</code> 类型。</p><h3 id="整数类型的极限值" tabindex="-1"><a class="header-anchor" href="#整数类型的极限值" aria-hidden="true">#</a> 整数类型的极限值</h3><p>有时候需要查看，当前系统不同整数类型的最大值和最小值，C 语言的头文件limits.h提供了相应的常量，比如SCHAR_MIN代表 signed char 类型的最小值-128，SCHAR_MAX代表 signed char 类型的最大值127。</p><p>为了代码的可移植性，需要知道某种整数类型的极限值时，应该尽量使用这些常量。</p>`,52),d=[l];function i(o,c){return t(),e("div",null,d)}const u=n(a,[["render",i],["__file","datatypes.html.vue"]]);export{u as default};
