import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as t,f as n}from"./app-oliGifly.js";const s={},d=n(`<h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述" aria-hidden="true">#</a> 描述</h2><p><code>git config</code> 用于获取和设置仓库或全局选项。可以使用 <code>git config</code> 来查看、添加或修改 Git 配置变量。</p><p>读取配置时，默认从系统、全局和资源库的本地配置文件中读取数值，选项 <code>--system</code>、<code>--global</code>、<code>--local</code>、<code>--worktree</code> 和 <code>--file &lt;filename&gt;</code> 可以用来告诉命令只从选定的位置读取。</p><p>写入时，新值默认写入仓库的本地配置（<code>--local</code>）文件，选项 <code>--system</code>、<code>--global</code>、<code>--worktree</code>、<code>--file &lt;filename&gt;</code> 可以用来告诉命令写到那个位置。</p><p>配置文件作用域：</p><ul><li><strong>--local</strong>：只对当前仓库生效，使用本地仓库配置文件。例如：Git 仓库根目录下的 <code>.git/config</code> 文件</li><li><strong>--global</strong>：对所有仓库生效，使用全局仓库配置文件。例如：用户家目录下的 <code>~/.gitconfig</code> 文件</li><li><strong>--system</strong>：对所有用户生效，使用系统仓库配置文件。例如：Git 安装目录下的 <code>/etc/gitconfig</code> 文件</li><li><strong>--worktree</strong>：使用每个工作区配置文件。例如：对于主工作区文件在 <code>.git/config.worktree</code>；对于其它工作区文件在 <code>.git/worktrees/&lt;id&gt;/</code>。只有在 <code>extensions.worktreeConfig</code> 配置后生效，否则该选项就是 <code>--local</code></li><li><strong>--file &lt;filename&gt;</strong>：使用指定的配置文件。例如：写到指定的文件 <code>/data/gitconfig</code> 中</li><li><strong>--blob &lt;blob&gt;</strong>：使用指定的二进制文件。例如：二进制文件 <code>.gitmodules</code> 中</li></ul><p>该命令出错时将以非零状态失败。以下是一些退出代码：</p><ul><li>该节或键无效（退出代码为 <code>1</code>）</li><li>没有提供节或键（退出值为 <code>2</code>）</li><li>配置文件无效（退出代码为 <code>3</code>）</li><li>配置文件无法写入（退出代码为 <code>4</code>）</li><li>试图取消一个不存在的选项（退出代码为 <code>5</code>）</li><li>试图取消/设置一个多行匹配的选项（退出代码为 <code>5</code>）</li><li>试图使用一个无效的正则表达式（退出代码为 <code>6</code>）</li><li>执行成功时，该命令返回退出代码 <code>0</code></li></ul><p>所有可用配置变量的列表可以通过 <code>git help --config</code> 命令获取。</p><h2 id="选项" tabindex="-1"><a class="header-anchor" href="#选项" aria-hidden="true">#</a> 选项</h2><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>-l, --list</code></td><td style="text-align:left;">列出所有当前已有的配置变量</td></tr><tr><td style="text-align:center;"><code>--add</code></td><td style="text-align:left;">在不改变任何已有的键值情况下添加一行新键值</td></tr><tr><td style="text-align:center;"><code>--get</code></td><td style="text-align:left;">获取最后一个匹配的键值</td></tr><tr><td style="text-align:center;"><code>--get-all</code></td><td style="text-align:left;">获取所有匹配的键值</td></tr><tr><td style="text-align:center;"><code>--get-regexp</code></td><td style="text-align:left;">使用正则表达式获取匹配的键值</td></tr><tr><td style="text-align:center;"><code>--unset</code></td><td style="text-align:left;">移除一个匹配的键值</td></tr><tr><td style="text-align:center;"><code>--unset-all</code></td><td style="text-align:left;">移除所有匹配的键值</td></tr><tr><td style="text-align:center;"><code>-z, --null</code></td><td style="text-align:left;">输出的键值是以 <code>null</code> 字符结束，而不是换行符，可用于对输出的安全解析</td></tr><tr><td style="text-align:center;"><code>--show-origin</code></td><td style="text-align:left;">不仅输出配置，还会输出对应配置的来源文件</td></tr></tbody></table><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><h3 id="配置用户名" tabindex="-1"><a class="header-anchor" href="#配置用户名" aria-hidden="true">#</a> 配置用户名</h3><p>例如：配置本地用户名 <code>admin</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config user.name <span class="token string">&#39;admin&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：配置全局用户名 <code>admin</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&#39;admin&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="配置邮箱" tabindex="-1"><a class="header-anchor" href="#配置邮箱" aria-hidden="true">#</a> 配置邮箱</h3><p>例如：配置本地邮箱 <code>admin@example.com</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config user.email <span class="token string">&#39;admin@example.com&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：配置全局邮箱 <code>admin@example.com</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&#39;admin@example.com&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：配置 <code>vim</code> 文本编辑器。<code>nano</code> 是默认文本编辑器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> core.editor <span class="token function">vim</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>core.editor</code> 设置命令列表：</p><table><thead><tr><th style="text-align:center;">编辑器</th><th style="text-align:left;">设置命令</th></tr></thead><tbody><tr><td style="text-align:center;">nano</td><td style="text-align:left;"><code>git config --global core.editor &quot;nano -w&quot;</code></td></tr><tr><td style="text-align:center;">Vim</td><td style="text-align:left;"><code>git config --global core.editor &quot;vim&quot;</code></td></tr><tr><td style="text-align:center;">VS Code</td><td style="text-align:left;"><code>git config --global core.editor &quot;code --wait&quot;</code></td></tr><tr><td style="text-align:center;">Notepad (Windows 64-bit)</td><td style="text-align:left;"><code>git config core.editor notepad&quot;</code></td></tr><tr><td style="text-align:center;">Notepad++ (Windows 64-bit)</td><td style="text-align:left;"><code>git config --global core.editor &quot;&#39;C:/Program Files/Notepad/notepad.exe&#39; -multiInst -notabbar -nosession -noPlugin&quot;</code></td></tr><tr><td style="text-align:center;">Emacs</td><td style="text-align:left;"><code>git config --global core.editor emacs</code></td></tr><tr><td style="text-align:center;">Atom</td><td style="text-align:left;"><code>git config --global core.editor &quot;atom --wait&quot;</code></td></tr><tr><td style="text-align:center;">BBEdit (Mac, with command line tools)</td><td style="text-align:left;"><code>git config --global core.editor &quot;bbedit -w&quot;</code></td></tr><tr><td style="text-align:center;">Gedit (Linux)</td><td style="text-align:left;"><code>git config --global core.editor &quot;gedit --wait --new-window&quot;</code></td></tr><tr><td style="text-align:center;">Sublime Text (macOS)</td><td style="text-align:left;"><code>git config --global core.editor &quot;/Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl --new-window --wait&quot;</code></td></tr><tr><td style="text-align:center;">Sublime Text (Windows 64-bit)</td><td style="text-align:left;"><code>git config --global core.editor &quot;&#39;C:/Program Files/Sublime Text 3/sublime_text.exe&#39; -w&quot;</code></td></tr><tr><td style="text-align:center;">TextEdit (macOS)</td><td style="text-align:left;"><code>git config --global --add core.editor &quot;open -W -n&quot;</code></td></tr><tr><td style="text-align:center;">Textmate</td><td style="text-align:left;"><code>git config --global core.editor &quot;mate -w&quot;</code></td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>如果您在 64 位 Windows 系统上安装了 32 位的编辑器，那么它会被安装在 <code>C:\\Program Files (x86)\\</code> 而非上表中所写的 <code>C:\\Program Files\\</code> 中。</p></div><h3 id="显示所有配置" tabindex="-1"><a class="header-anchor" href="#显示所有配置" aria-hidden="true">#</a> 显示所有配置</h3><p>例如：使用 <code>-l</code> 或 <code>--list</code> 选项，显示所有本地配置文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">-l</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：显示所有全局配置文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">-l</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="显示所有可用配置变量" tabindex="-1"><a class="header-anchor" href="#显示所有可用配置变量" aria-hidden="true">#</a> 显示所有可用配置变量</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token builtin class-name">help</span> <span class="token parameter variable">--config</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="添加一行新键值" tabindex="-1"><a class="header-anchor" href="#添加一行新键值" aria-hidden="true">#</a> 添加一行新键值</h3><p>例如：使用 <code>--add</code> 选项，在不改变任何已有的 <code>user.name</code> 键值情况下添加一行新 <code>user.name</code> 键值 <code>test</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--add</span> user.name <span class="token string">&#39;test&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="匹配指定键值" tabindex="-1"><a class="header-anchor" href="#匹配指定键值" aria-hidden="true">#</a> 匹配指定键值</h3><p>例如：使用 <code>--get</code> 选项，获取最后一个 <code>user.name</code> 的键值。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--get</span> user.name
<span class="token comment"># 或</span>
<span class="token function">git</span> config user.name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="匹配所有键值" tabindex="-1"><a class="header-anchor" href="#匹配所有键值" aria-hidden="true">#</a> 匹配所有键值</h3><p>例如：使用 <code>--get-all</code> 选项，获取所有 <code>user.name</code> 的键值。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config --get-all user.name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="匹配所有键值-1" tabindex="-1"><a class="header-anchor" href="#匹配所有键值-1" aria-hidden="true">#</a> 匹配所有键值</h3><p>例如：使用 <code>--get-regexp</code> 选项，匹配所有 <code>user.*</code> 的键值。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config --get-regexp user.name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="移除指定键值" tabindex="-1"><a class="header-anchor" href="#移除指定键值" aria-hidden="true">#</a> 移除指定键值</h3><p>例如：使用 <code>--unset</code> 选项，移除指定 <code>user.name</code> 为 <code>tset</code> 的键值。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--unset</span> user.name <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="移除所有键值" tabindex="-1"><a class="header-anchor" href="#移除所有键值" aria-hidden="true">#</a> 移除所有键值</h3><p>例如：使用 <code>--unset-all</code> 选项，移除所有匹配的键值。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config --unset-all user.name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="输出的键值是以-null-字符结束" tabindex="-1"><a class="header-anchor" href="#输出的键值是以-null-字符结束" aria-hidden="true">#</a> 输出的键值是以 null 字符结束</h3><p>例如：使用 <code>-z</code> 或 <code>--null</code> 选项，显示输出的键值是以 <code>null</code> 字符结束，而不是换行符。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">-z</span> --get-all user.name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="显示配置来源文件" tabindex="-1"><a class="header-anchor" href="#显示配置来源文件" aria-hidden="true">#</a> 显示配置来源文件</h3><p>例如：使用 <code>--show-origin</code> 选项，显示输出所有 <code>user.name</code> 的键值包括对应配置的来源文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config --show-origin --get-all user.name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="默认文本编辑器" tabindex="-1"><a class="header-anchor" href="#默认文本编辑器" aria-hidden="true">#</a> 默认文本编辑器</h3><p>例如：配置 <code>vim</code> 为默认文本编辑器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config core.editor <span class="token string">&#39;vim&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="处理换行符的转换" tabindex="-1"><a class="header-anchor" href="#处理换行符的转换" aria-hidden="true">#</a> 处理换行符的转换</h3><p><code>core.autocrlf</code> 用于控制 Git 如何处理换行符的转换，特别是在 Windows 和 Unix-like 系统（如：Linux 和 macOS）之间。</p><p>Git 默认会尝试自动转换换行符，以确保在不同操作系统之间的一致性。具体来说，当从 Git 仓库检出文件时（即当你查看或修改文件时），Git 会根据 <code>core.autocrlf</code> 的设置来决定是否将换行符从 <code>LF</code>（Unix-style，<code>\\n</code>）转换为 <code>CRLF</code>（Windows-style，<code>\\r\\n</code>）。同样地，当提交文件到 Git 仓库时，Git 会根据这个设置来决定是否将换行符从 <code>CRLF</code> 转换回 <code>LF</code>。</p><ul><li><strong>\\n</strong>：为换行符，换行相当于光标跳转到下一行的这个位置</li><li><strong>\\r</strong>：为回车符，回车相当于光标跳转到当前行的最左边的位置</li></ul><p><code>core.autocrlf</code> 可以设置为以下三个值之一：</p><ul><li><strong>true</strong>：当检出代码时，将 <code>LF</code> 转换为 <code>CRLF</code>；当提交代码时，将 <code>CRLF</code> 转换为 <code>LF</code>。这是 Windows 系统上的默认设置，以确保在 Windows 环境下编辑的文件在 Unix-like 系统上也能正确显示</li><li><strong>input</strong>：当检出代码时，不做任何转换；当提交代码时，将 <code>CRLF</code> 转换为 <code>LF</code>。这意味着无论你在什么系统上工作，提交到 Git 仓库的代码都将使用 <code>LF</code> 换行符。这是 Unix-like 系统上的默认设置</li><li><strong>false</strong>：不做任何转换。这意味着无论检出还是提交，Git 都不会更改文件中的换行符。这可能会导致在不同操作系统之间查看文件时出现换行符不一致的问题</li></ul><p>例如：要在全局范围内设置 <code>core.autocrlf</code> 为 <code>true</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> core.autocrlf <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="设置别名" tabindex="-1"><a class="header-anchor" href="#设置别名" aria-hidden="true">#</a> 设置别名</h3><p>使用 <code>alias.&lt;alias&gt; &quot;command&quot;</code> 设置别名可以简化常用命令的输入。</p><p>例如：将 <code>git commit</code> 命令简化为 <code>git ci</code>。以后要输入 <code>git commit</code> 时，只需要输入 <code>git ci</code> 即可。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> alias.ci <span class="token string">&quot;commit&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>常用的别名：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> alias.co <span class="token string">&quot;checkout&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> alias.br <span class="token string">&quot;branch&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> alias.ci <span class="token string">&quot;commit&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> alias.st <span class="token string">&quot;status&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置代理" tabindex="-1"><a class="header-anchor" href="#设置代理" aria-hidden="true">#</a> 设置代理</h3><p>有时可能会遇到无法直接连接到远程仓库的情况，这时就需要设置代理服务器来解决问题。</p><p>Git 代理设置主要用于配置 Git 使用的 <code>HTTP</code> 和 <code>HTTPS</code> 代理，代理用户名和密码可以不写。</p><p>例如：配置 Git 使用 <code>HTTP</code> 代理。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.proxy http://<span class="token operator">&lt;</span>proxy_username<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>proxy_password<span class="token operator">&gt;</span>@<span class="token operator">&lt;</span>proxy_host<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>proxy_port<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：配置 Git 使用 <code>HTTPS</code> 代理。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> https.proxy https://<span class="token operator">&lt;</span>proxy_username<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>proxy_password<span class="token operator">&gt;</span>@<span class="token operator">&lt;</span>proxy_host<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>proxy_port<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：如果不希望通过代理连接到某个特定的服务器，可以使用 <code>NO_PROXY</code> 环境变量：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">NO_PROXY</span><span class="token operator">=</span><span class="token string">&quot;&lt;domain1&gt;,&lt;domain2&gt;,...&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：取消代理设置。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> http.proxy
<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> https.proxy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,86),i=[d];function o(l,c){return a(),t("div",null,i)}const g=e(s,[["render",o],["__file","git_config.html.vue"]]);export{g as default};
