import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as l,c as i,d as a,b as n,e as s,f as e}from"./app-T6B7uwvV.js";const u="/assets/main_form-WllRkGad.jpg",d={},r=n("p",null,[n("strong",null,"网络爬虫"),s(" 可以按照指定的规则（网络爬虫的算法）自动浏览或抓取网络中的信息，通过 Python 可以很轻松地编写爬虫程序或者是脚本。")],-1),k=n("h2",{id:"网络爬虫的基本工作流",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#网络爬虫的基本工作流","aria-hidden":"true"},"#"),s(" 网络爬虫的基本工作流")],-1),m=n("p",null,[n("strong",null,"网络爬虫基本工作流程图：")],-1),v=e(`<p><strong>网络爬虫基本工作流程：</strong></p><ol><li>获取初始的 URL，该 URL 地址是用户自己制定的初始爬取的网页</li><li>爬取对应 URL 地址的网页时，获取新的 URL 地址</li><li>将新的 URL 地址放入 URL 队列中</li><li>从 URL 队列中读取新的 URL，然后依据新的 URL 爬取网页，同时从新的网页中获取新的 URL 地址，重复上述的爬取过程</li><li>设置停止条件，如果没有设置停止条件，爬虫会一直爬取下去，直到无法获取新的 URL 地址为止。设置了停止条件后，爬虫将会满足停止条件时停止爬取</li></ol><h2 id="网络爬虫的常用技术" tabindex="-1"><a class="header-anchor" href="#网络爬虫的常用技术" aria-hidden="true">#</a> 网络爬虫的常用技术</h2><h3 id="python-的网络请求" tabindex="-1"><a class="header-anchor" href="#python-的网络请求" aria-hidden="true">#</a> Python 的网络请求</h3><p><strong>URL 地址</strong> 与 <strong>下载网页</strong> 这两项是网络爬虫必备而又关键的功能，这两个功能必然会提到 HTTP，在 Python 中实现 HTTP 网络请求常见的三种方式：<code>urllib</code>、<code>urllib3</code> 和 <code>requests</code>。</p><ul><li><p><strong>urllib 模块</strong></p><p><code>urllib</code> 是 python 自带模块，该模块中提供了一个 <code>urlopen()</code> 方法，通过该方法指定 URL 发送网络请求来获取数据。</p><p><strong>urlib 子模块如下：</strong></p><table><thead><tr><th style="text-align:center;">模块名称</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>urllib.request</strong></td><td style="text-align:left;">该模块定义了打开 URL（主要是 HTTP）的方法和类。例如：身份验证、重定向、cookie 等</td></tr><tr><td style="text-align:center;"><strong>urllib.error</strong></td><td style="text-align:left;">该模块主要包含异常类，基本的异常类是 URLError</td></tr><tr><td style="text-align:center;"><strong>urllib.parse</strong></td><td style="text-align:left;">该模块定义的功能分为两大类：URL 解析和 URL 引用</td></tr><tr><td style="text-align:center;"><strong>urllib.robotparser</strong></td><td style="text-align:left;">该模块用于解析 robots.txt 文件</td></tr></tbody></table><p>通过 <code>urllib.request</code> 模块实现发送请求并读取网页内容的简单实例。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request

<span class="token comment"># 打开指定需要爬取的网页</span>
response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">&#39;http://www.baidu.com&#39;</span><span class="token punctuation">)</span>
html <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 读取网页代码</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>  <span class="token comment"># 打印读取内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述示例中，是通过 <code>get</code> 请求方式获取百度的网页内容。下面通过使用 <code>urllib.request</code> 模块的 <code>post</code> 请求实现获取网页信息的内容。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse
<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request

<span class="token comment"># 将数据使用 urlencod 编码处理后，再使用 encoding 设置为 utf-8 编码</span>
data <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;word&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 打开指定需要爬取的网页</span>
response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">&#39;http://httpbin.org/post&#39;</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
html <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 读取网页代码</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>  <span class="token comment"># 打印读取内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Urllib3 模块</strong></p><p><code>Urllib3</code> 是一个功能强大，条理清晰的 HTTP 客户端，适用于 Python。<code>Urllib3</code> 提供了很多 Python 标准库里所没有的 <strong>重要特性：</strong></p><ul><li>线程安全</li><li>连接池</li><li>客户端 SSL/TLS 验证</li><li>使用大部分编码上传文件</li><li>Helper 用于重试请求并处理 HTTP 重定向</li><li>支持 gzip 和 deflate 编码</li><li>支持 HTTP 和 SOCKS 代理</li><li>百分百的测试覆盖率</li></ul><p>通过 Urllib3 模块实现发送 <code>get</code> 网络请求。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> urllib3

<span class="token comment"># 创建 PoolManager 对象，用于处理与线程池的连接已经线程安全的所以细节</span>
http <span class="token operator">=</span> urllib3<span class="token punctuation">.</span>PoolManager<span class="token punctuation">(</span><span class="token punctuation">)</span>
response <span class="token operator">=</span> http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;https://www.baidu.com/&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 对需要爬取的网页发送请求</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token comment"># 打印读取内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>post</code> 请求实现获取网页信息的内容：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>response <span class="token operator">=</span> http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://httpbin.org/post&#39;</span><span class="token punctuation">,</span> fields<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;word&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>requests 模块</strong></p><p><code>requests</code> 是第三方模块，该模块在实现 HTTP 请求时要比 <code>urllib</code> 模块简化很多，操作更加人性化。</p><p>安装 request 模块：<code>pip install requests</code>。</p><p><strong>requests 模块的功能特性如下：</strong></p><ul><li><code>Keep-Alive</code> 和 连接池</li><li>基本或摘要式的身份认证</li><li>Unicode 响应体</li><li>国际化域名和 URL</li><li>优雅的 <code>key/value</code> Cookie</li><li>HTTP(S) 代理支持</li><li>带持久 Cookie 的会话</li><li>自动解压</li><li>文件分块上传</li><li>浏览器式的 SSL 认证</li><li>流下载</li><li>分块请求</li><li>自动内容解码</li><li>连接超时</li><li>支持 <code>.netrc</code></li></ul><p>以 <code>GET</code> 请求方式为例，打印多种请求信息。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests

response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;http://www.baidu.com&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>  <span class="token comment"># 打印状态</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token comment"># 打印请求 url</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>  <span class="token comment"># 打印头部信息</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>  <span class="token comment"># 打印 cookie 信息</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token comment"># 以文本形式打印网页源码</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 以字节流形式大于网页源码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以 <code>POST</code> 请求方式，发送 HTTP 网络请求。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests

data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;word&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">}</span>  <span class="token comment"># 表单参数</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">&#39;http://httpbin.org/post&#39;</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>  <span class="token comment"># 对需要爬取的网页发送请求</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 以字节流形式打印网页源码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>requests</code> 模块不仅提供了以上两种常用的请求方式，还提供以下多种网络请求的方式：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>requests<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">&#39;http://httpbin.org/put&#39;</span><span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment"># PUT 请求</span>
requests<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">&#39;http://httpbin.org/delete&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># DELETE 请求</span>
requests<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token string">&#39;http://httpbin.org/get&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># HEAD 请求</span>
requests<span class="token punctuation">.</span>options<span class="token punctuation">(</span><span class="token string">&#39;http://httpbin.org/get&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># OPTIONS 请求</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果发现请求的 URL 地址中参数是跟在 <code>?</code> 的后面。例如：<code>httpbin.org/get?key=val</code>。<code>requests</code> 模块提供了传递参数的方法，运行使用 <code>params</code> 关键字参数，以一个字符串字典来提供这些参数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests

payload <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;key1&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;key2&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">}</span>  <span class="token comment"># 传递参数</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;http://httpbin.org/get&#39;</span><span class="token punctuation">,</span> params<span class="token operator">=</span>payload<span class="token punctuation">)</span>  <span class="token comment"># 对需要爬取的网页发送请求</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>context<span class="token punctuation">)</span>  <span class="token comment"># 以字节流形式打印网页源码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="请求-headers-处理" tabindex="-1"><a class="header-anchor" href="#请求-headers-处理" aria-hidden="true">#</a> 请求 headers 处理</h3><p>有时在请求一个网页内容时，发现无论通过 <code>GET</code> 或者是 <code>POST</code> 以及其它请求方式，都会出现 <code>403</code> 错误，这是由于该网页为了防止恶意采集信息而使用了反爬虫设置，从而拒绝了用户的访问。此时可以通过模拟浏览器的头部信息来进行访问，这样就可以解决反爬虫设置的问题，以 <code>requests</code> 模块为例介绍请求头部 <code>headers</code> 的处理。</p><ol><li>通过浏览器的网络监视器查看头部信息</li><li>选中第一条信息（<code>200 GET</code>），右侧的信息头面板中将显示请求头部信息（<code>User-Agent</code>），然后复制该信息</li><li>实现代码，首先创建一个需要爬取的 <code>url</code> 地址，然后创建 <code>headers</code> 头部信息，再发送请求等待响应，最后打印网页的代码信息</li></ol><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">&#39;https://www.baidu.com&#39;</span>  <span class="token comment"># 创建需要爬取的网页地址</span>
<span class="token comment"># 创建头部信息</span>
headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36&#39;</span><span class="token punctuation">}</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>  <span class="token comment"># 发送网络请求</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment"># 以字节流形式打印网页源码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="网络超时" tabindex="-1"><a class="header-anchor" href="#网络超时" aria-hidden="true">#</a> 网络超时</h3><p>在访问一个网页时，如果该网页长时间未响应，系统就会判断该网页超时，所以无法打开网页。</p><p>模拟一个网络超时的现象。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests

<span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 循环发送请求 50 次</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token comment"># 捕获异常</span>
        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;https://www.baidu.com&#39;</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.04</span><span class="token punctuation">)</span>  <span class="token comment"># 设置超时为 0.04 秒</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>  <span class="token comment"># 打印状态码</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>  <span class="token comment"># 捕获异常</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;异常：&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>  <span class="token comment"># 打印异常信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>request</code> 模块同样提供了三种常见的网络异常类。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests

<span class="token keyword">from</span> requests<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ReadTimeout<span class="token punctuation">,</span> HTTPError<span class="token punctuation">,</span> RequestException  <span class="token comment"># 导入 requests.exceptions 模块中的三种异常类</span>

<span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 循环发送请求 50 次</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token comment"># 捕获异常</span>
        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;https://www.baidu.com&#39;</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.04</span><span class="token punctuation">)</span>  <span class="token comment"># 设置超时为 0.04 秒</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>  <span class="token comment"># 打印状态码</span>
    <span class="token keyword">except</span> ReadTimeout<span class="token punctuation">:</span>  <span class="token comment"># 捕获超时异常</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;timeout&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> HTTPError<span class="token punctuation">:</span>  <span class="token comment"># 捕获 HTTP 异常</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;httperror&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> RequestException<span class="token punctuation">:</span>  <span class="token comment"># 捕获请求异常</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;reqerror&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代理服务" tabindex="-1"><a class="header-anchor" href="#代理服务" aria-hidden="true">#</a> 代理服务</h3><p>在爬取网址的过程中，经常出现不久前可以爬取的网页现在无法爬取了，这是因为您的 IP 被爬取网址的服务器所屏蔽了。此时可以设置代理服务解决这个问题，首先需要找到代理地址。例如：<code>122.114.31.177</code>，对应的端口号为 <code>808</code>，完整的格式为 <code>122.114.31.177:808</code>。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests

<span class="token comment"># 设置代理 IP 与对应的端口号</span>
proxy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;122.144.31.177:808&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;https&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;122.144.31.177:8080&#39;</span><span class="token punctuation">}</span>
<span class="token comment"># 对需要爬取的网页发送请求</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;http://www.mingrisoft.com/&#39;</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxy<span class="token punctuation">)</span>

<span class="token comment"># 以字节流形式打印网页源码</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="html-解析之-beautiful-soup" tabindex="-1"><a class="header-anchor" href="#html-解析之-beautiful-soup" aria-hidden="true">#</a> HTML 解析之 Beautiful Soup</h3><p><code>Beautiful Soup</code> 是一个用于从 HTML 和 XML 文件中提取数据的 Python 库。<code>Beautiful Soup</code> 提供一些简单的、函数用来处理导航、搜索、修改分析树等功能。<code>Beautiful Soup</code> 模块中的查找提取功能非常强大，而且非常便捷，通常可以节省程序员大量的工作时间。</p><p><code>Beautiful Soup</code> 自动将输入文档转换为 <code>Unicode</code> 编码，输出文档转换为 <code>UTF-8</code> 编码。您不需要考虑编码方式，除非文档没有指定一个编码方式。</p><p><strong>Beautiful Soup 安装方式：</strong></p>`,24),b=n("li",null,[s("Debian 或 Ubuntu Linux 系统通过 "),n("code",null,"apt-get install python-bs4"),s(" 命令安装")],-1),g=n("li",null,[s("Windows 系统通过 "),n("code",null,"easy_install beautifulsoup4"),s(" 或 "),n("code",null,"pip install beautifulsoup4"),s(" 命令安装，在使用 Beautiful Soup 4 之前需要先安装 bs4 库："),n("code",null,"pip install bs4")],-1),y={href:"https://www.crummy.com/software/BeautifulSoup/bs4/download/",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"python setup.py install",-1),f=e(`<p>Beautiful Soup 支持 Python 标准库中包含的 HTML 解析器，但它也支持许多第三方 Python 解析器，其中包含 <code>lxml</code> 解析器。</p><p><strong>根据不同的操作系统使用以下命令安装 lxml：</strong></p><ul><li><strong>适用于 Linux 系统</strong>：<code>apt-get install python-lxml</code></li><li><strong>适用于 Windows 系统</strong>：<code>easy_install lxml</code> 或 <code>pip install lxml</code></li></ul><p>另一个解析器是 <code>html5lib</code>，它是一个用于解析 HTML 的 Python 库，按照 Web 浏览器的方式解析 HTML。</p><p><strong>根据不同的操作系统使用以下命令安装 html5lib：</strong></p><ul><li><strong>适用于 Linux 系统</strong>：<code>apt-get install python-html5lib</code></li><li><strong>适用于 Windows 系统</strong>：<code>easy_install html5lib</code> 或 <code>pip install html5lib</code></li></ul><p><strong>解析器的比较：</strong></p><table><thead><tr><th style="text-align:center;">解析器</th><th style="text-align:left;">用法</th><th style="text-align:left;">优点</th><th style="text-align:left;">缺点</th></tr></thead><tbody><tr><td style="text-align:center;">Python 标准库</td><td style="text-align:left;">BeautifulSoup(markup, &quot;html.parsesr&quot;)</td><td style="text-align:left;">执行速度适中</td><td style="text-align:left;">在 Python 3.2.2 之前的版本中文档容错能力差</td></tr><tr><td style="text-align:center;">lxml 的 HTML 解析器</td><td style="text-align:left;">BeautifulSoup(markup, &quot;lxml&quot;)</td><td style="text-align:left;">速度快、文档容错能力强</td><td style="text-align:left;">需要安装 C 语言库</td></tr><tr><td style="text-align:center;">lxml 的 XML 解析器</td><td style="text-align:left;">BeautifulSoup(markup, &quot;lxml-xml&quot;) 或 BeautifulSoup(markup, &quot;xml&quot;)</td><td style="text-align:left;">速度快、唯一支持 XML 的解析器</td><td style="text-align:left;">需要安装 C 语言库</td></tr><tr><td style="text-align:center;">html5lib</td><td style="text-align:left;">BeautifulSoup(markup, &quot;html5lib&quot;)</td><td style="text-align:left;">最好的容错性、以浏览器的方式解析文档、生成 HTML5 格式的文档</td><td style="text-align:left;">速度慢、不依赖外部扩展</td></tr></tbody></table><p><strong>Beautiful Soup 使用</strong></p><ol><li><p>导入 bs4 库，然后创建一个模拟 HTML 代码的字符串</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup

html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#39;s story&lt;/b&gt;&lt;/p&gt;

&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were
&lt;a href=&quot;http://examle.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,
&lt;a href=&quot;http://examle.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and
&lt;a href=&quot;http://examle.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;,
and they lived at the bottom of a well.&lt;/p&gt;

&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;
&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建 Beautiful Soup 对象，并指定解析器为 lxml，最后通过打印的方式将解析的 HTML 代码显示在控制台中</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建一个 Beautiful Soup 对象，获取页面正文</span>
soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">&#39;lxml&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">)</span>  <span class="token comment"># 打印解析的 HTML 代码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果将 <code>html_doc</code> 字符串代码保存在 <code>index.html</code> 文件中，可以通过打开 HTML 文件的方式进行代码的解析，并可以通过 <code>prettify()</code> 方法进行代码的格式化处理。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建 Beautiful Soup 对象，打开需要解析的 HTML 文件</span>
soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;lxml&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>prettify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 打印格式化后的代码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="网络爬虫开发常用框架" tabindex="-1"><a class="header-anchor" href="#网络爬虫开发常用框架" aria-hidden="true">#</a> 网络爬虫开发常用框架</h2><p>爬虫框架就是一些爬虫项目的半成品，可以将一些爬虫常用的功能写好，然后留下一些接口，在不同的爬虫项目中，调用适合自己项目的接口，再编写少量的代码实现自己需要的功能。</p>`,12),_=n("p",null,"Scrapy 爬虫框架",-1),w=n("p",null,[n("code",null,"Scrapy"),s(" 框架是一套比较成熟的、开源的 Python 爬虫框架，简单轻巧，并且非常方便，可以高效地爬取 Web 页面并从页面中提取结构化的数据。")],-1),x=n("code",null,"Scrapy",-1),q={href:"https://scrapy.org",target:"_blank",rel:"noopener noreferrer"},T=e("<p>Crawley 爬虫框架</p><p><code>Crawley</code> 也是 Python 开发出的爬虫框架，该框架致力于改变人们从互联网中提取数据的方式。<strong>具体特性如下：</strong></p><ul><li>基于 <code>Eventlet</code> 构建的高速网络爬虫框架</li><li>可以将数据存储在关系数据库中。如：<code>Postgres</code>、<code>MySQL</code>、<code>Oracle</code>、<code>SQlite</code> 等数据库</li><li>可以将爬取的数据导入为 <code>Json</code>、<code>XML</code> 格式</li><li>支持非关系数据库。例如：<code>Mongodb</code> 和 <code>Couchdb</code></li><li>支持命令行工具</li><li>可以使用您喜欢的工具进行数据的提取。例如：<code>XPath</code> 或 <code>Pyquery</code> 工具</li><li>支持使用 Cookie 登录或访问那些只要登录才可以访问的网页</li><li>简单易学</li></ul>",3),Q=n("code",null,"Crawley",-1),P={href:"http://project.crawley-cloud.com",target:"_blank",rel:"noopener noreferrer"},S=e("<p>PySpider 爬虫框架</p><p>相对于 <code>Scrapy</code> 框架而言，<code>PySpider</code> 框架还是新秀。<code>PySpider</code> 框架采用 Python 语言编写，分布式架构，支持多种数据库后端，强大的 <code>WebUI</code> 支持脚本编辑器、任务监视器、项目管理器以及结果查看器。<strong>具体特性如下：</strong></p><ul><li>Python 脚本控制，可以用任何您喜欢的 <code>HTML</code> 解析包（内置 pyquery）</li><li>WEB 界面编写调试脚本、起停脚本、监控执行状态、查看活动历史、获取结果产出</li><li>支持 <code>MySQL</code>、<code>MongoDB</code>、<code>Redis</code>、<code>SQLite</code>、<code>Elasticsearch</code>、<code>PostgreSQL</code>、<code>SQLAlchemy</code> 等数据库</li><li>支持 <code>RabbitMQ</code>、<code>Beanstalk</code>、<code>Redis</code> 和 <code>Kombu</code> 作为消息队列</li><li>支持抓取 <code>JavaScript</code> 的页面</li><li>强大的调度控制，支持超时重爬及优先级设置</li><li>组件可替换，支持单机或分布式部署，支持 <code>Docker</code> 部署</li></ul>",3),M=n("code",null,"PySpider",-1),L={href:"https://github.com/binux/pyspider/releases",target:"_blank",rel:"noopener noreferrer"},W={href:"http://docs.pysider.org/",target:"_blank",rel:"noopener noreferrer"},B=n("h2",{id:"实战项目-快手爬票",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实战项目-快手爬票","aria-hidden":"true"},"#"),s(" 实战项目：快手爬票")],-1),C=n("p",null,"如果想要知道每列车次的时间信息，都需要在各类的列车网址中进行查询。",-1),U=n("h3",{id:"搭建-qt-环境",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#搭建-qt-环境","aria-hidden":"true"},"#"),s(" 搭建 QT 环境")],-1),D={href:"https://www.qt.io/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://download.qt.io/",target:"_blank",rel:"noopener noreferrer"},E=n("p",null,[n("strong",null,"国内镜像网站：")],-1),H=n("strong",null,"中国科学技术大学",-1),G={href:"http://mirrors.ustc.edu.cn/qtproject/",target:"_blank",rel:"noopener noreferrer"},I=n("strong",null,"清华大学",-1),z={href:"https://mirrors.tuna.tsinghua.edu.cn/qt/",target:"_blank",rel:"noopener noreferrer"},V=n("strong",null,"北京理工大学",-1),F={href:"http://mirrors.bit.edu.cn/qtproject/",target:"_blank",rel:"noopener noreferrer"},j=n("strong",null,"中国互联网络信息中心",-1),O={href:"https://mirrors.cnnic.cn/qt/",target:"_blank",rel:"noopener noreferrer"},N=e('<p>QT 是 Python 开发窗体的工具之一，它不仅与 Python 有良好的兼容性，还有通过可视化拖曳的方式进行窗体的创建，提高开发人员的开发效率。由于 QT 在创建窗体项目时会自动生成后缀名为 <code>ui</code> 的文件，该文件需要转换为 <code>py</code> 文件后才可以被 python 所识别，所以需要为 QT 与 PyChar 开发工具进行配置。<strong>具体步骤如下：</strong></p><ol><li>确保 <code>Python</code>、<code>QT</code> 与 <code>PyCharm</code> 开发工具安装完成后，打开 <code>PyCharm</code> 开发工具，打开设置界面，首先选择 <code>Project Interpreter</code> 选项，然后在右侧的列表中选择 <code>Show All...</code>，然后在弹出的窗口选择 <code>Add Local</code></li><li>在弹出的窗口选择 <code>System Interpreter</code>，然后在右侧的下拉列表中默认选择 python 对应的 <strong>版本安装路径</strong>，单击 <code>OK</code> 即可</li><li>确认 python 的编译版本后，在 <strong>返回的窗口中</strong> 选中右侧的添加按钮，然后在弹出的窗口中 <strong>添加 PyQt5 模块包</strong>，点击 <code>Install Package</code> 按钮</li><li>PyQt5 模块包安装完成后返回设置窗口，在该窗口中依次单击 <code>Tools -&gt; External Tools</code> 选项，然后在右侧单击 <strong>添加按钮</strong></li><li>在弹出的窗口中添加 <strong>启动 Qt Designer 的快捷工具</strong>，首先在 <code>Name</code> 所对应的编辑框中 <strong>填写工具名称 Qt Designer</strong>，然后在 <code>Program</code> 所对应的编辑框中 <strong>填写 QT 开发工具的安装路径</strong>（尾部需要填写软件名），最后在 <code>Working directory</code> 所对应的编辑框中 <strong>填写 $ProjectFileDir$</strong>，该值代表项目文件目录，单击 <code>OK</code> 按钮完成添加</li><li>添加将 QT 生成的 <code>ui</code> 文件转换为 <code>py</code> 文件的快捷工具，在 <code>Name</code> 所对应的编辑框中 <strong>填写工具名称 PyUIC</strong>，然后在 <code>Program</code> 所对应的编辑框中 <strong>填写 Python 的安装路径</strong>（尾部需要填写软件名），再在 <code>Arguments</code> 所对应的编辑框中 <strong>填写将 ui 文件转换为 py 文件的 Python 代码</strong> <code>-m PyQt5.uic.pyuic $FileName$ -o $FileNameWithoutExtension$.py</code>，在 <code>Working directory</code> 所对应的编辑框中 <strong>填写 $FileDir$</strong>，该值为文件目录，单击 <code>OK</code> 即可</li></ol><h3 id="主窗体设计" tabindex="-1"><a class="header-anchor" href="#主窗体设计" aria-hidden="true">#</a> 主窗体设计</h3><p><code>Python</code>、<code>QT</code> 与 <code>PyCharm</code> 配置完成后，接下来需要对快手爬票的主窗体进行设计，首先需要创建主窗体外层，然后依次添加顶部图片、查询区域、选择车次类型区域、分类图片区域、信息表格区域。<strong>设计顺序如下所示：</strong></p><figure><img src="'+u+`" alt="主窗体设计" tabindex="0" loading="lazy"><figcaption>主窗体设计</figcaption></figure><ol><li><p>Qt 拖曳控件</p><p>（1）在 PyCharm 中 <strong>创建新的项目</strong>，并在右侧 <strong>指定项目名称与位置</strong></p><p>（2）项目打开完成后，在顶部的菜单栏中依次单击 <code>Tools -&gt; External Tools -&gt; Qt Designer</code></p><p>（3）单击 <code>Qt Designer</code> 快捷工具后，Qt 的窗口编辑工具将自动打开，并且会自动弹出一个新建窗体的窗口，在该窗口中 <strong>选择一个主窗体的模板</strong>，这里选择 <code>Main Window</code> 然后 <strong>单击创建按钮</strong> 即可</p><p>（4）主窗体创建完成后，自动进入到 <code>Qt Designer</code> 的设计界面，顶部区域是菜单栏与快捷菜单选项，左侧区域是各种控件与布局，中间的区域为编辑区域，该区域可以将控件拖曳至此处，也可以预览窗体的设计效果。右侧上方是对象查看器，此处列出所有控件以及彼此所属的关系层。右侧中间的位置是属性编辑器，此处可以设置控件的各种属性。右侧底部的位置分别为信号或槽编辑器、动作编辑器及资源浏览器</p><p>（5）根据自己的设计思路依次将指定的控件拖曳至主窗体中，首先添加主窗体器内的控件，再向主窗体中添加查询区域容器与控件，再向主窗体中添加选择车次类型容器与控件</p><p><strong>主窗体容器与控件如下：</strong></p><table><thead><tr><th style="text-align:center;">对象名称</th><th style="text-align:center;">控件名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>centralwidget</strong></td><td style="text-align:center;"><strong>QWidget</strong></td><td style="text-align:left;">该控件与对象名称是创建主窗体后默认生成，为主窗体外层容器</td></tr><tr><td style="text-align:center;"><strong>label_title_img</strong></td><td style="text-align:center;"><strong>QLabel</strong></td><td style="text-align:left;">该控件为与主窗体容器内，用于设置顶部图片、对象名称自定义</td></tr><tr><td style="text-align:center;"><strong>label_train_img</strong></td><td style="text-align:center;"><strong>QLabel</strong></td><td style="text-align:left;">该控件为与主窗体容器内，用于设置分类图片、对象名称自定义</td></tr><tr><td style="text-align:center;"><strong>tableView</strong></td><td style="text-align:center;"><strong>QTableView</strong></td><td style="text-align:left;">该控件为与主窗体容器内，用于显示信息表格、对象名称自定义</td></tr></tbody></table><p><strong>查询区域容器与控件：</strong></p><table><thead><tr><th style="text-align:center;">对象名称</th><th style="text-align:center;">控件名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>widget_query</strong></td><td style="text-align:center;"><strong>QWdiget</strong></td><td style="text-align:left;">该控件位于查询区域的容器内，用于显示查询区域，对象名称自定义，该控件为查询区域的容器</td></tr><tr><td style="text-align:center;"><strong>label</strong></td><td style="text-align:center;"><strong>QLabel</strong></td><td style="text-align:left;">该控件位于查询区域的容器内，用于显示 <strong>出发地：</strong> 文字、对象名称自定义</td></tr><tr><td style="text-align:center;"><strong>label_2</strong></td><td style="text-align:center;"><strong>QLabel</strong></td><td style="text-align:left;">该控件位于查询区域的容器内，用于显示 <strong>目的地：</strong> 文字、对象名称自定义</td></tr><tr><td style="text-align:center;"><strong>label_3</strong></td><td style="text-align:center;"><strong>QLabel</strong></td><td style="text-align:left;">该控件位于查询区域的容器内，用于显示 <strong>出发日：</strong> 文字、对象名称自定义</td></tr><tr><td style="text-align:center;"><strong>pushButton</strong></td><td style="text-align:center;"><strong>QPushButton</strong></td><td style="text-align:left;">该控件位于查询区域的容器内，用于显示 <strong>查询按钮</strong>，对象名称自定义</td></tr><tr><td style="text-align:center;"><strong>textEdit</strong></td><td style="text-align:center;"><strong>QTextEdit</strong></td><td style="text-align:left;">该控件位于查询区域的容器内，用于显示 <strong>出发地：</strong> 所对应的编辑框、对象名称自定义</td></tr><tr><td style="text-align:center;"><strong>textEdit_2</strong></td><td style="text-align:center;"><strong>QTextEdit</strong></td><td style="text-align:left;">该控件位于查询区域的容器内，用于显示 <strong>目的地：</strong> 所对应的编辑框、对象名称自定义</td></tr><tr><td style="text-align:center;"><strong>textEdit_3</strong></td><td style="text-align:center;"><strong>QTextEdit</strong></td><td style="text-align:left;">该控件位于查询区域的容器内，用于显示 <strong>出发日：</strong> 所对应的编辑框、对象名称自定义</td></tr></tbody></table><p><strong>选择车次类型容器与控件：</strong></p><table><thead><tr><th style="text-align:center;">对象名称</th><th style="text-align:center;">控件名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>widget_checkBox</strong></td><td style="text-align:center;"><strong>QWidget</strong></td><td style="text-align:left;">该控件用于显示选择车次类型区域、对象名称自定义，该控件为选择车次类型区域的容器</td></tr><tr><td style="text-align:center;"><strong>checkBox_D</strong></td><td style="text-align:center;"><strong>QCheckBox</strong></td><td style="text-align:left;">该控件位于选择车次类型的容器内，用于选择动车类型、对象名自定义</td></tr><tr><td style="text-align:center;"><strong>checkBox_G</strong></td><td style="text-align:center;"><strong>QCheckBox</strong></td><td style="text-align:left;">该控件位于选择车次类型的容器内，用于选择高铁类型、对象名自定义</td></tr><tr><td style="text-align:center;"><strong>checkBox_K</strong></td><td style="text-align:center;"><strong>QCheckBox</strong></td><td style="text-align:left;">该控件位于选择车次类型的容器内，用于选择快车类型、对象名自定义</td></tr><tr><td style="text-align:center;"><strong>checkBox_T</strong></td><td style="text-align:center;"><strong>QCheckBox</strong></td><td style="text-align:left;">该控件位于选择车次类型的容器内，用于选择特快类型、对象名自定义</td></tr><tr><td style="text-align:center;"><strong>checkBox_Z</strong></td><td style="text-align:center;"><strong>QCheckBox</strong></td><td style="text-align:left;">该控件位于选择车次类型的容器内，用于选择直达类型、对象名自定义</td></tr><tr><td style="text-align:center;"><strong>label_type</strong></td><td style="text-align:center;"><strong>QLabel</strong></td><td style="text-align:left;">该控件位于选择车次类型的容器内，用于显示 <strong>车次类型：</strong> 文字、对象名自定义</td></tr></tbody></table><p>（6）窗体设置完成后，按下 <kbd>Ctrl</kbd> + <kbd>S</kbd> 快捷键保存窗体设计文件名称为 <code>window.ui</code>，然后需要将该文件保存在当前项目的目录当中，再选中该文件右键依次选择 <code>External Tools -&gt; PyUIC</code> 选项，将窗体设置的 <code>ui</code> 文件转换为 <code>py</code> 文件</p></li><li><p>代码调试</p><p>打开 <code>window.py</code> 文件后，自动生成的代码中已经导入了 <code>PyQt5</code> 以及其内部的常用模块。<code>PyQt5</code> 的类别分为多个模块，<strong>常见的模块与概述如下：</strong></p><table><thead><tr><th style="text-align:center;">模块名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>QtCore</strong></td><td style="text-align:left;">此模块应用处理时间、文件和目录、各种数据类型、流、URL、MIME 类型、线程或进程</td></tr><tr><td style="text-align:center;"><strong>QtGui</strong></td><td style="text-align:left;">此模块包含类窗口系统集成、事件处理、二维图像、基本成像、字体和文本，以及一套完整的 OpenGL 和 OpenGL ES 的绑定</td></tr><tr><td style="text-align:center;"><strong>QtWidgets</strong></td><td style="text-align:left;">此模块中包含的类，提供了一组用于创建经典桌面风格用户界面的 UI 元素</td></tr><tr><td style="text-align:center;"><strong>QtMulimedia</strong></td><td style="text-align:left;">此模块中包含的类，用于处理多媒体内容和 API 来访问的相机、收音机功能</td></tr><tr><td style="text-align:center;"><strong>QtNetwork</strong></td><td style="text-align:left;">此模块中包含网络编程的类，通过这些类使用网络编程更简单，更便携，便于 TCP/IP 和 UDP 客户端和服务器的编码</td></tr><tr><td style="text-align:center;"><strong>QtPositioning</strong></td><td style="text-align:left;">此模块中包含的类，利用各种可能的来源，确定位置，包括卫星、Wi-Fi</td></tr><tr><td style="text-align:center;"><strong>QtWebSockets</strong></td><td style="text-align:left;">此模块中包含实现 WebSocket 协议的类</td></tr><tr><td style="text-align:center;"><strong>QtXml</strong></td><td style="text-align:left;">此模块中包含用于处理 XML 文件中的类，该模块为 SAX 和 DOM API 提供了解决方法</td></tr><tr><td style="text-align:center;"><strong>QtSvg</strong></td><td style="text-align:left;">此模块中提供了用于显示 SVG 文件内容的类，SVG 是可缩放矢量图形，用于描述 XML 中的二维图形的一种格式</td></tr><tr><td style="text-align:center;"><strong>QtSql</strong></td><td style="text-align:left;">此模块提供了用于处理数据库的类</td></tr><tr><td style="text-align:center;"><strong>QtTest</strong></td><td style="text-align:left;">此模块包含的功能为 pyqt5 应用程序的单元测试</td></tr></tbody></table><p>通过代码来调试主窗体中各种控件的细节处理，以及相应的属性。<strong>具体步骤如下：</strong></p><p>（1）打开 <code>window.py</code> 文件，在右侧代码区域的 <code>setupUi()</code> 方法中修改主窗体的最大值与最小值，用于保持主窗体大小不变无法扩大或缩小。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>MainWindow<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">&#39;MainWindow&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 设置窗体对象名称</span>
MainWindow<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">960</span><span class="token punctuation">,</span> <span class="token number">786</span><span class="token punctuation">)</span>  <span class="token comment"># 设置窗体大小</span>
MainWindow<span class="token punctuation">.</span>setMinimumSize<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QSize<span class="token punctuation">(</span><span class="token number">960</span><span class="token punctuation">,</span> <span class="token number">786</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 主窗体最小值</span>
MainWindow<span class="token punctuation">.</span>setMaximumSize<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QSize<span class="token punctuation">(</span><span class="token number">960</span><span class="token punctuation">,</span> <span class="token number">786</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 主窗体最大值</span>
self<span class="token punctuation">.</span>centralwidget <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QWidget<span class="token punctuation">(</span>MainWindow<span class="token punctuation">)</span>  <span class="token comment"># 主窗体的 widget 控件</span>
self<span class="token punctuation">.</span>centralwidget<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">&#39;centralwidget&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 设置对象名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）将图片资源 img 文件夹复制到该项目中，然后导入 <code>PyQt5.QtGui</code> 模块中的 QPalette、QPixmap、QColor 用于对控件设置背景图片，为对象名 <code>label_title_img</code> 的 Label 控件设置背景图片，该控件用于显示顶部图片。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> QPalette<span class="token punctuation">,</span> QPixmap<span class="token punctuation">,</span> QColor

self<span class="token punctuation">.</span>label_title_img <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QLabel<span class="token punctuation">(</span>self<span class="token punctuation">.</span>centralwidget<span class="token punctuation">)</span>  <span class="token comment"># 通过 label 控件显示顶部图片</span>
self<span class="token punctuation">.</span>label_title_img<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">960</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>label_title_img<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">&#39;label_title_img&#39;</span><span class="token punctuation">)</span>
title_img <span class="token operator">=</span> QPixmap<span class="token punctuation">(</span><span class="token string">&#39;img/bg1.png&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 打开顶部位图</span>
self<span class="token punctuation">.</span>label_title_img<span class="token punctuation">.</span>setPixmap<span class="token punctuation">(</span>title_img<span class="token punctuation">)</span>  <span class="token comment"># 设置调色板</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）设置查询部分 widget 控件的背景图片，该控件起到容器的作用，在设置背景图片时并没有 Label 控件那么简单，首先需要为该控件开启自动填充背景功能，然后创建调色板对象，指定调色板背景图片，最后为控件设置对应的调色板即可。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>self<span class="token punctuation">.</span>widget_query <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>centralwidget<span class="token punctuation">)</span>  <span class="token comment"># 查询部分的 widget</span>
self<span class="token punctuation">.</span>widget_query<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">960</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>widget_query<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">&#39;widget_query&#39;</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>widget_query<span class="token punctuation">.</span>setAutoFillBackground<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 开启自动填充背景</span>

palette <span class="token operator">=</span> QPalette<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 调色板类</span>
palette<span class="token punctuation">.</span>setBrush<span class="token punctuation">(</span>QPalette<span class="token punctuation">.</span>Background<span class="token punctuation">,</span> QtGui<span class="token punctuation">.</span>QBrush<span class="token punctuation">(</span>QtGui<span class="token punctuation">.</span>QPixmap<span class="token punctuation">(</span><span class="token string">&#39;img/bg2.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>widget_query<span class="token punctuation">.</span>setPalete<span class="token punctuation">(</span>palette<span class="token punctuation">)</span>  <span class="token comment"># 为控件设置对应的调色板即可</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注</p><p>根据以上两种设置背景图片的方法，分别为选择车次类型的 widget 控件与显示火车信息图片的 Label 控件设置背景图片</p></div><p>（4）通过代码修改窗体或控件文字时，需要在 <code>retranslateUi()</code> 方法中进行设置。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>MainWindow<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">&#39;MainWindow&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;车票查询&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>checkBox_T<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">&#39;MainWindow&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;T-特快&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>checkBox_K<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">&#39;MainWindow&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;K-快速&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>checkBox_Z<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">&#39;MainWindow&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;Z-直达&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>checkBox_D<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">&#39;MainWindow&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;D-动车&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>checkBox_G<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">&#39;MainWindow&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;G-高铁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>label_type<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">&#39;MainWindow&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;车次类型：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">&#39;MainWindow&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;出发地：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>label_3<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">&#39;MainWindow&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;目的地：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>label_4<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">&#39;MainWindow&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;出发日：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">&#39;MainWindow&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;查询&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（5）导入 sys 模块，然后在代码块的最外层创建 <code>show_MainWindow()</code> 方法，该方法用于显示窗体。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">show_MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    app <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>  <span class="token comment"># 实例化 QApplication 类，作为 GUI 主程序入口</span>
    MainWindow <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QMainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建 MainWindow 类</span>
    ui <span class="token operator">=</span> Ui_MainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 实例化 UI 类</span>
    ui<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>MainWindow<span class="token punctuation">)</span>  <span class="token comment"># 设置窗体 UI</span>
    MainWindow<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 显示窗体</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 当窗体创建完成，需要结束主循环过程</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（6）在代码块的最外层模拟 Python 的程序入口，然后调用显示窗体的 <code>show_MainWindow()</code> 方法。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    show_MainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="分析网页请求参数" tabindex="-1"><a class="header-anchor" href="#分析网页请求参数" aria-hidden="true">#</a> 分析网页请求参数</h3><p>通过 12306 客户服务中心所提供的查票请求地址获取火车票的相关信息。在发送请求时，地址中需要填写必要的参数否则后台将无法返回前台所需要的正确信息。</p>`,8),K={href:"http://www.12306.cn/mormhweb",target:"_blank",rel:"noopener noreferrer"},A=e(`<p>（2）单击网络请求将显示请求细节的窗口，在该窗口中默认会显示消息头的相关数据，此处可以获取完整的请求地址</p><p>（3）在请求地址的上方选择参数选项，将显示该请求地址中的必要参数。如：出发地名、目的地名、出发日期、车票类型</p><h3 id="下载站名文件" tabindex="-1"><a class="header-anchor" href="#下载站名文件" aria-hidden="true">#</a> 下载站名文件</h3><p>得到请求地址与请求参数后，可以发现请求参数中的出发地与目的地均为车站名的英文缩写。而这个英文缩写的字母是通过输入中文车站名转换而来的，所有需要在网页中仔细查找是否有将车站名自动转换为英文缩写的请求信息。</p><p>（1）关闭并重新打开网络监视器，然后对余票查询网页进行刷新，此时在网络监视器中选择类型为 js 的网络请求。在文件类型中仔细分析文件内容是否有与车站名相关的信息</p><p>（2）选中与车站名相关的网络请求，在请求细节中找到该请求的完整地址。然后在网页中打开该地址测试返回数据</p><p>（3）打开 Pycharm 开发工具，在 <code>cheek tickets</code> 目录中右键菜单依次选则 <code>New -&gt; Python File</code>，创建一个名称为 <code>get_stations.py</code> 文件，然后安装 request 模块</p><p>（4）在 <code>get_stations.py</code> 文件中分别导入 requests 模块、re 模块及 os 模块，然后创建 <code>getStaion()</code> 方法，该方法用于发送获取地址信息的网络请求，并将返回的数据转换为需要的类型</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">getStation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 发送请求获取所有车站名称，通过输入的站名转换为查询地址的参数</span>
    url <span class="token operator">=</span> <span class="token string">&#39;https://kyfw.12306.cn/otn/resources/js/framework/station_name.js?station_version=1.9242&#39;</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 请求并进行验证</span>
    stations <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">u&#39;([\\u4e00-\\u9fa5]+)\\|([A-Z]+)&#39;</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token comment"># 获取需要的车站名称</span>
    stations <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">(</span>stations<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 转换为字典类型</span>
    stations <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>stations<span class="token punctuation">)</span>  <span class="token comment"># 转换为字符串类型否则无法写入文件</span>
    write<span class="token punctuation">(</span>stations<span class="token punctuation">)</span>  <span class="token comment"># 调用写入方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（5）分别创建 write() 方法、read() 方法及 isStations() 方法，分别用于写入文件、读取文件及判断车站文件是否存在</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>stations<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;stations.text&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf_8_sig&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 以写入模式打开文件</span>
    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>stations<span class="token punctuation">)</span>  <span class="token comment"># 写入文件</span>
    <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关闭文件</span>


<span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;stations.text&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf_8_sig&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 以读模式打开文件</span>
    data <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readine<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 读取文件</span>
    <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关闭文件</span>
    <span class="token keyword">return</span> data


<span class="token keyword">def</span> <span class="token function">isStations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    isStations <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">&#39;stations.text&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 判断车站文件是否存在</span>
    <span class="token keyword">return</span> isStations
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（6）打开 window.py 文件，首先导入 get_stations 文件下的所有方法，然后在模拟 python 的程序入口处修改代码。接下来判断是否存在所有车站信息的文件，如果没有该文件就下载车站信息的文件然后显示窗体，如果存在将直接显示窗体即可</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> get_stations <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> isStations<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>  <span class="token comment"># 判断是否存在所有车站的文件，没有就下载，有就直接显示窗体</span>
        getStation<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 下载所有车站文件</span>
        show_MainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 调用显示窗体的方法</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        show_MainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（7）在 window.py 文件下，单击右键菜单选择 <code>Run ‘window’</code> 菜单运行主窗体，主窗体界面显示后在 check tickets 目录下将自动下载 stations.text 文件</p><h3 id="车票信息的请求与显示" tabindex="-1"><a class="header-anchor" href="#车票信息的请求与显示" aria-hidden="true">#</a> 车票信息的请求与显示</h3><ol><li><p>发送与分析车票信息的查询请求</p><p>得到了获取车票信息的网络请求地址，然后又分析出请求地址的必要参数以及车站名称转换的文件，接下来就需要将主窗体中输入的出发地、目的地及出发日期三个重要的参数配置到查票的请求地址中，然后分析并接收所查询车票的对应信息。</p><p>（1）在浏览器中查询请求地址，然后在浏览器中将以 json 的方式返回车票的查询信息</p><p>（2）发现可用数据后，在项目中创建 <code>query_request.py</code> 文件，在该文件中首先导入 <code>get_stations</code> 文件下的所有方法，然后分别创建名为 data 与 type_data 的列表分别用于保存整理好的车次信息与分类后的车次信息</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> get_stations <span class="token keyword">import</span> <span class="token operator">*</span>

data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 用于保存整理好的车次信息</span>
type_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 保存分类后车次信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）创建 <code>query()</code> 方法，在调用该方法时需要三个参数，分别为出发日期、出发地以及目的地；然后创建查询请求的完整地址，并通过 <code>format()</code> 方法格式化地址；再将返回的 json 数据转换为字典类型；最后通过字典类型键值的方法取出对应的数据并进行整理与分类</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">query</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> from_station<span class="token punctuation">,</span> to_station<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 清空数据</span>
    type_data<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 清空车次分类保存的数据</span>

    <span class="token comment"># 请求查询地址</span>
    url <span class="token operator">=</span> <span class="token string">&#39;https://kyfw.12306.cn/otn/leftTicket/query?leftTicketDTO.train_date=2022-11-29&amp;leftTicketDTO.from_station=SHH&amp;leftTicketDTO.to_station=NFF&amp;purpose_codes=ADULT&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> from_station<span class="token punctuation">,</span> to_station<span class="token punctuation">)</span>

    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token comment"># 发送请求</span>
    result <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 将 json 数据转换为字典类型，通过键值对取数据</span>
    result <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;result&#39;</span><span class="token punctuation">]</span>

    <span class="token keyword">if</span> isStations<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment"># 判断车站文件是否存在</span>
        stations <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 读取所有车站并转换为 dic 类型</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 判断返回数据是否为空</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> result<span class="token punctuation">:</span>
                tmp_list <span class="token operator">=</span> i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;|&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 分割数据并添加到列表中</span>
                <span class="token comment"># 查询结果中出发点和目的地均为缩写字母，需要在车站库中找到对应的车站名称</span>
                from_station <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>stations<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">(</span>stations<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>tmp_list<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
                to_station <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>stations<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">(</span>stations<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>tmp_lis<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

                <span class="token comment"># 创建座位数组，由于返回的座位数据中含有空（&#39;&#39;），所以将空改为 “--”</span>
                seat <span class="token operator">=</span> <span class="token punctuation">[</span>
                    tmp_list<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> from_station<span class="token punctuation">,</span> to_station<span class="token punctuation">,</span> tmp_list<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
                    tmp_list<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tmp_list<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tmp_list<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tmp_list<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
                    tmp_list<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tmp_list<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tmp_list<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tmp_list<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
                    tmp_list<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tmp_list<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tmp_list<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tmp_list<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span>
                <span class="token punctuation">]</span>
                newSeat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

                <span class="token keyword">for</span> s <span class="token keyword">in</span> seat<span class="token punctuation">:</span>  <span class="token comment"># 循环将座位信息中的空（&#39;&#39;），改成 “--”</span>
                    <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">:</span>
                        s <span class="token operator">=</span> <span class="token string">&#39;--&#39;</span>
                    <span class="token keyword">else</span><span class="token punctuation">:</span>
                        s <span class="token operator">=</span> s
                    newSeat<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">)</span>  <span class="token comment"># 保存新的座位信息</span>
                data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>newSeat<span class="token punctuation">)</span>
        <span class="token keyword">return</span> data  <span class="token comment"># 返回整理好的车次信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）依次创建获取高铁信息、移除高铁信息、获取动车信息、移除动车信息、获取直达信息、移除直达信息、获取特快信息、移除特快信息、获取快速信息及移除快速信息的方法，用于车次分类数据的处理</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">g_vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 获取高铁信息</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> g <span class="token keyword">in</span> data<span class="token punctuation">:</span>  <span class="token comment"># 循环所有火车数据</span>
            i <span class="token operator">=</span> g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;G&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 判断车次首字母是不是高铁</span>
            <span class="token keyword">if</span> i<span class="token punctuation">:</span>  <span class="token comment"># 如果是将该信息添加到高铁数据中</span>
                type_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>g<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">r_g_vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 移除高铁信息</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token number">0</span> <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>type_data<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> g <span class="token keyword">in</span> data<span class="token punctuation">:</span>
            i <span class="token operator">=</span> g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;G&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> i<span class="token punctuation">:</span>
                type_data<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>g<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">d_vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 获取动车信息</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">:</span>  <span class="token comment"># 循环所有火车数据</span>
            i <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 判断车次首字母是不是动车</span>
            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment"># 如果是将该信息添加到动车数据中</span>
                type_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">r_d_vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 移除动车信息</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> d <span class="token keyword">in</span> data<span class="token punctuation">:</span>
            i <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
                type_data<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>d<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">z_vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 获取直达信息</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> z <span class="token keyword">in</span> data<span class="token punctuation">:</span>  <span class="token comment"># 循环所有火车数据</span>
            i <span class="token operator">=</span> z<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;Z&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 判断车次首字母是不是直达</span>
            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment"># 如果是将该信息添加到直达数据中</span>
                type_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>z<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">r_z_vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 移除直达信息</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> z <span class="token keyword">in</span> data<span class="token punctuation">:</span>
            i <span class="token operator">=</span> z<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;Z&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
                type_data<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>z<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">t_vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 获取特快信息</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> t <span class="token keyword">in</span> data<span class="token punctuation">:</span>  <span class="token comment"># 循环所有火车数据</span>
            i <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;T&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 判断车次首字母是不是特快</span>
            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment"># 如果是将该信息添加到特快数据中</span>
                type_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">r_t_vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 移除特快信息</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> t <span class="token keyword">in</span> data<span class="token punctuation">:</span>
            i <span class="token operator">=</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;T&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
                type_data<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>t<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">k_vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 获取快速信息</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> k <span class="token keyword">in</span> data<span class="token punctuation">:</span>  <span class="token comment"># 循环所有火车数据</span>
            i <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;K&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 判断车次首字母是不是快速</span>
            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment"># 如果是将该信息添加到快速数据中</span>
                type_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">r_k_vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 移除快速信息</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> k <span class="token keyword">in</span> data<span class="token punctuation">:</span>
            i <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;K&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
                type_data<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>k<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在窗体中显示查票信息</p><p>完成了车票信息查询请求的文件后，接下来需要将获取的车票信息显示在快手爬票的主窗体中。</p><p>（1）打开 <code>window.py</code> 文件，导入 <code>PyQt5.QtCore</code> 模块中的 Qt 类，然后导入 <code>PyQt5.QtWidgets</code> 模块与 <code>PyQt5.QtGui</code> 模块下的所有方法，再导入 <code>query_request</code> 文件中的所有方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Qt
<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> query_request
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）在 <code>setupUi()</code> 方法中找到用于显示车票信息的 <code>tableView</code> 表格控件。然后为该控件设置相关属性</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>self<span class="token punctuation">.</span>tableView <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QTableView<span class="token punctuation">(</span>self<span class="token punctuation">.</span>centralwidget<span class="token punctuation">)</span>  <span class="token comment"># 显示车次信息的列表</span>
self<span class="token punctuation">.</span>tableView<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">960</span><span class="token punctuation">,</span> <span class="token number">440</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>tableView<span class="token punctuation">.</span>setQbjectName<span class="token punctuation">(</span><span class="token string">&#39;tableView&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 创建存储数据的模式</span>

self<span class="token punctuation">.</span>model <span class="token operator">=</span> QStandardItemModel<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 根据空间自动改变列宽度并且不可修改列宽度</span>
self<span class="token punctuation">.</span>tableView<span class="token punctuation">.</span>horizontalHeader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setSectionResizeMode<span class="token punctuation">(</span>QHeaderView<span class="token punctuation">.</span>Stretch<span class="token punctuation">)</span>
self<span class="token punctuation">.</span>tableView<span class="token punctuation">.</span>horizontalHeader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setVisible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># 设置表头不可见</span>
self<span class="token punctuation">.</span>tableView<span class="token punctuation">.</span>verticalHeader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setVisible<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># 设置纵向表头不可见</span>

font <span class="token operator">=</span> QtGui<span class="token punctuation">.</span>QFont<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 设置表格内容文字大小</span>
font<span class="token punctuation">.</span>setPointSize<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>tableView<span class="token punctuation">.</span>setFont<span class="token punctuation">(</span>font<span class="token punctuation">)</span>
self<span class="token punctuation">.</span>tableView<span class="token punctuation">.</span>setEditTriggers<span class="token punctuation">(</span>QAbstractItemView<span class="token punctuation">.</span>NoEditTriggers<span class="token punctuation">)</span>  <span class="token comment"># 设置表格内容不可编辑</span>
self<span class="token punctuation">.</span>tableView<span class="token punctuation">.</span>setVerticalScrollBarPolicy  <span class="token comment"># 垂直滚动条始终开启</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）导入 time 模块，该模块提供了用于处理时间的各种方法。然后在代码块的最外层创建 get_time() 方法用于获取系统的当前日期，再创建 is_valid_date() 方法用于判断输入的日期是否是一个有效的日期字符串</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time


<span class="token keyword">def</span> <span class="token function">get_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 获取系统当前时间并转换请求数据所需要的格式</span>
    now <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 获取当前时间的时间戳</span>
    timeStruct <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>now<span class="token punctuation">)</span>  <span class="token comment"># 转换格式为：%Y-%m-%d %H:%M:%S</span>
    strTime <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%Y-%m-%d&#39;</span><span class="token punctuation">,</span> timeStruct<span class="token punctuation">)</span>
    <span class="token keyword">return</span> strTime


<span class="token keyword">def</span> <span class="token function">is_valid_date</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>  <span class="token comment"># 判断是否是一个有效的日期字符串</span>
        time<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token string">&#39;%Y-%m-%d&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）依次创建 change_G、change_D、change_Z、change_T、change_K() 方法，以上方法均为车次分类复选框的事件处理</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">change_G</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 高铁复选框事件处理</span>
    <span class="token keyword">if</span> state <span class="token operator">==</span> QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>Checked<span class="token punctuation">:</span>  <span class="token comment"># 选中将高铁信息添加到最后要显示的数据当中</span>
        g_vehicle<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取高铁信息</span>
        self<span class="token punctuation">.</span>displayTable<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>type_data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> type_data<span class="token punctuation">)</span>  <span class="token comment"># 通过表格显示该车型数据</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        r_g_vehicle<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 取消选中状态将移除该数据</span>
        self<span class="token punctuation">.</span>displayTable<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>type_data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> type_data<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">change_D</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 动车复选框事件处理</span>
    <span class="token keyword">if</span> state <span class="token operator">==</span> QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>Checked<span class="token punctuation">:</span>  <span class="token comment"># 选中将动车信息添加到最后要显示的数据当中</span>
        d_vehicle<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取动车信息</span>
        self<span class="token punctuation">.</span>displayTable<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>type_data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> type_data<span class="token punctuation">)</span>  <span class="token comment"># 通过表格显示该车型数据</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        r_d_vehicle<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 取消选中状态将移除该数据</span>
        self<span class="token punctuation">.</span>displayTable<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>type_data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> type_data<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">change_Z</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 直达复选框事件处理</span>
    <span class="token keyword">if</span> state <span class="token operator">==</span> QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>Checked<span class="token punctuation">:</span>  <span class="token comment"># 选中将直达信息添加到最后要显示的数据当中</span>
        z_vehicle<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取直达信息</span>
        self<span class="token punctuation">.</span>displayTable<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>type_data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> type_data<span class="token punctuation">)</span>  <span class="token comment"># 通过表格显示该车型数据</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        r_z_vehicle<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 取消选中状态将移除该数据</span>
        self<span class="token punctuation">.</span>displayTable<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>type_data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> type_data<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">change_T</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 特快复选框事件处理</span>
    <span class="token keyword">if</span> state <span class="token operator">==</span> QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>Checked<span class="token punctuation">:</span>  <span class="token comment"># 选中将特快信息添加到最后要显示的数据当中</span>
        t_vehicle<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取特快信息</span>
        self<span class="token punctuation">.</span>displayTable<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>type_data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> type_data<span class="token punctuation">)</span>  <span class="token comment"># 通过表格显示该车型数据</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        r_t_vehicle<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 取消选中状态将移除该数据</span>
        self<span class="token punctuation">.</span>displayTable<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>type_data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> type_data<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">change_K</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 快速复选框事件处理</span>
    <span class="token keyword">if</span> state <span class="token operator">==</span> QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>Checked<span class="token punctuation">:</span>  <span class="token comment"># 选中将快速信息添加到最后要显示的数据当中</span>
        k_vehicle<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取快速信息</span>
        self<span class="token punctuation">.</span>displayTable<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>type_data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> type_data<span class="token punctuation">)</span>  <span class="token comment"># 通过表格显示该车型数据</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        r_k_vehicle<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 取消选中状态将移除该数据</span>
        self<span class="token punctuation">.</span>displayTable<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>type_data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> type_data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（5）创建 <code>checkBox_default()</code> 方法，该方法用于将所有车次分类复选框取消勾选</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">checkBox_default</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>checkBx_G<span class="token punctuation">.</span>setChecked<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>checkBx_D<span class="token punctuation">.</span>setChecked<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>checkBx_Z<span class="token punctuation">.</span>setChecked<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>checkBx_T<span class="token punctuation">.</span>setChecked<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>checkBx_K<span class="token punctuation">.</span>setChecked<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（6）创建 <code>messageDialog()</code> 方法，用于显示主窗体非法操作的消息提示框；创建 <code>displayTable()</code> 方法，用于显示车次信息的表格与内容</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">messageDialog</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> title<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 显示消息提示框，参数 title 为提示框标题文字，message 为提示消息</span>
    msg_box <span class="token operator">=</span> QMessageBox<span class="token punctuation">(</span>QMessageBox<span class="token punctuation">.</span>Warning<span class="token punctuation">,</span> title<span class="token punctuation">,</span> message<span class="token punctuation">)</span>
    msg_box<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">displayTable</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> train<span class="token punctuation">,</span> info<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 显示车次信息表格；train 为共有多少列车，作为表格的行；info 为该列车的具体信息，作为表格的列</span>
    self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">:</span>
        item <span class="token operator">=</span> QStandardItem<span class="token punctuation">(</span>data<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 添加表格内容</span>
        self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>setItem<span class="token punctuation">(</span>row<span class="token punctuation">,</span> column<span class="token punctuation">,</span> item<span class="token punctuation">)</span>  <span class="token comment"># 向表格存储模式中添加表格具体信息</span>
    self<span class="token punctuation">.</span>tableView<span class="token punctuation">.</span>setModel<span class="token punctuation">(</span>self<span class="token punctuation">.</span>model<span class="token punctuation">)</span>  <span class="token comment"># 设置表格存储数据的模式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（7）创建 <code>on_click()</code> 方法，该方法是查询按钮的单击事件。在该方法中首先获取出发地、目的地与出发日期三个编辑框的输入内容，然后对三个编辑框中输入的内容进行合法检测，符合规范后调用 <code>query()</code> 方法提交车票查询的请求并且将返回的数据赋值给 data，最后通过调用 <code>displayTable()</code> 方法实现在表格中显示车票查询的全部信息</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">on_click</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    get_from <span class="token operator">=</span> self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>toPlainText<span class="token punctuation">(</span><span class="token punctuation">)</span>
    get_to <span class="token operator">=</span> self<span class="token punctuation">.</span>textEdit_2<span class="token punctuation">.</span>toPlainText<span class="token punctuation">(</span><span class="token punctuation">)</span>
    get_date <span class="token operator">=</span> self<span class="token punctuation">.</span>textEdit_3<span class="token punctuation">.</span>toPlainText<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> isStations<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        stations <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> get_from <span class="token operator">!=</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">and</span> get_to <span class="token operator">!=</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">and</span> get_date <span class="token operator">!=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> get_from <span class="token keyword">in</span> stations <span class="token keyword">and</span> get_to <span class="token keyword">in</span> stations <span class="token keyword">and</span> is_valid_date<span class="token punctuation">(</span>get_date<span class="token punctuation">)</span><span class="token punctuation">:</span>
                inputYearDay <span class="token operator">=</span> time<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>get_date<span class="token punctuation">,</span> <span class="token string">&#39;%Y-%m%d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tm_yday
                yearTody <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tm_yday
                timeDifference <span class="token operator">=</span> inputYearDay <span class="token operator">-</span> yearTody

                <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> timeDifference <span class="token operator">&lt;=</span> <span class="token number">28</span><span class="token punctuation">:</span>
                    from_station <span class="token operator">=</span> stations<span class="token punctuation">[</span>get_from<span class="token punctuation">]</span>
                    to_station <span class="token operator">=</span> stations<span class="token punctuation">[</span>get_to<span class="token punctuation">]</span>
                    data <span class="token operator">=</span> query<span class="token punctuation">(</span>get_date<span class="token punctuation">,</span> from_station<span class="token punctuation">,</span> to_station<span class="token punctuation">)</span>
                    self<span class="token punctuation">.</span>checkBox_default<span class="token punctuation">(</span><span class="token punctuation">)</span>

                    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                        self<span class="token punctuation">.</span>displayTable<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
                    <span class="token keyword">else</span><span class="token punctuation">:</span>
                        self<span class="token punctuation">.</span>messageDialog<span class="token punctuation">(</span><span class="token string">&quot;警告&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;没有返回的网络数据！&quot;</span><span class="token punctuation">)</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    self<span class="token punctuation">.</span>messageDialog<span class="token punctuation">(</span><span class="token string">&quot;警告&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;超出查询日期的范围内&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;不可查询昨天的车票信息，以及 29 天以后的车票信息！&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>messageDialog<span class="token punctuation">(</span><span class="token string">&quot;警告&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;输入的站名不存在或日期格式不正确！&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>messageDialog<span class="token punctuation">(</span><span class="token string">&quot;警告&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;请填写车站名称！&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>messageDialog<span class="token punctuation">(</span><span class="token string">&quot;警告&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;未下载车站查询文件！&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（8）在 <code>retranslateUi()</code> 方法中，首先设置出发日期的编辑框中显示系统的当前日期，然后设置查询按钮的单击事件，最后分别设置高铁、动车、直达、特快及快速复选框选中与取消事件</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>self<span class="token punctuation">.</span>textEdit_3<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>get_time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 出发日期显示当天日期</span>
self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>on_click<span class="token punctuation">)</span>  <span class="token comment"># 查询按钮指定单击事件的方法</span>
self<span class="token punctuation">.</span>checkBox_G<span class="token punctuation">.</span>stateChanged<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>change_G<span class="token punctuation">)</span>  <span class="token comment"># 高铁选中与取消事件</span>
self<span class="token punctuation">.</span>checkBox_D<span class="token punctuation">.</span>stateChanged<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>change_D<span class="token punctuation">)</span>  <span class="token comment"># 动车选中与取消事件</span>
self<span class="token punctuation">.</span>checkBox_Z<span class="token punctuation">.</span>stateChanged<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>change_Z<span class="token punctuation">)</span>  <span class="token comment"># 直达选中与取消事件</span>
self<span class="token punctuation">.</span>checkBox_T<span class="token punctuation">.</span>stateChanged<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>change_T<span class="token punctuation">)</span>  <span class="token comment"># 特快选中与取消事件</span>
self<span class="token punctuation">.</span>checkBox_K<span class="token punctuation">.</span>stateChanged<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>change_K<span class="token punctuation">)</span>  <span class="token comment"># 快速选中与取消事件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（9）在 <code>window.py</code> 文件下，单击邮件，选择 <code>Run ‘window’</code> 菜单运行主窗体，然后输入符号规范的出发地、目的地与出发日期</p></li></ol>`,16);function X(Z,Y){const o=p("Mermaid"),t=p("ExternalLinkIcon");return l(),i("div",null,[r,k,m,a(o,{id:"mermaid-9",code:"eJxLy8kvT85ILCpRCHHiUgACR43oF33bn/ZPe9ox9+nyboXQIJ9YTQVdXTsFJ0ON5x1rgDIvF259OXcRRNWzaRuez2oBqdIEa3cyhKg10njWtRdFXuHZlH1PW5eCmS9nzH/aMf3JjrWaChDlxhov1u9GVf5kR/eLvXuf750ItA5qtjFYsXP1sxnrn05Y9mz3whfbNj9tnPNs7aJncxc+2b2tFqzMGahKITK1GKzYRSMaoiIWYgZY0i8f6iEuAJnocQQ="}),v,n("ul",null,[b,g,n("li",null,[s("通过下载源码的方式进行安装，地址为："),n("a",y,[s("https://www.crummy.com/software/BeautifulSoup/bs4/download/"),a(t)]),s("，然后在 CMD（控制台）中打开源码的指定路径输入命令 "),h,s(" 即可")])]),f,n("ol",null,[n("li",null,[_,w,n("p",null,[x,s(" 官网地址为："),n("a",q,[s("https://scrapy.org"),a(t)])])]),n("li",null,[T,n("p",null,[Q,s(" 的官网地址为："),n("a",P,[s("http://project.crawley-cloud.com"),a(t)])])]),n("li",null,[S,n("p",null,[M,s(" 源码地址为："),n("a",L,[s("https://github.com/binux/pyspider/releases"),a(t)])]),n("p",null,[s("开发文档地址为："),n("a",W,[s("http://docs.pysider.org/"),a(t)])])])]),B,C,U,n("p",null,[s("QT 工具官网地址："),n("a",D,[s("https://www.qt.io/"),a(t)]),s("。")]),n("p",null,[s("Qt 官网有一个专门的资源下载网站，所有的开发环境和相关工具都可以从这里下载，具体地址是："),n("a",R,[s("https://download.qt.io/"),a(t)]),s("。")]),E,n("ul",null,[n("li",null,[H,s("："),n("a",G,[s("http://mirrors.ustc.edu.cn/qtproject/"),a(t)])]),n("li",null,[I,s("："),n("a",z,[s("https://mirrors.tuna.tsinghua.edu.cn/qt/"),a(t)])]),n("li",null,[V,s("："),n("a",F,[s("http://mirrors.bit.edu.cn/qtproject/"),a(t)])]),n("li",null,[j,s("："),n("a",O,[s("https://mirrors.cnnic.cn/qt/"),a(t)])])]),N,n("p",null,[s("（1）打开 12306 官方网站（"),n("a",K,[s("http://www.12306.cn/mormhweb"),a(t)]),s("），单击右侧导航栏中的余票查询，然后输入出发地与目的地，出发日期默认即可。打开网络监视器，然后单击网页中的查询按钮，在网络监视器中将显示查询按钮所对应的网络请求")]),A])}const nn=c(d,[["render",X],["__file","web_crawler.html.vue"]]);export{nn as default};
