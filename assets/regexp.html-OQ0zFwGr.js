import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-BaNiyK9Z.js";const e={},o=t(`<p>正则表达式就是记录文本规则的代码。在处理字符串时，用于查找符合某些复杂规则的字符串的需求。</p><h2 id="行定位符" tabindex="-1"><a class="header-anchor" href="#行定位符" aria-hidden="true">#</a> 行定位符</h2><p>用于描述字符串的边界。</p><ul><li><strong>^</strong>：表示行的开始。例如：<code>^H</code>，表示匹配以 <code>H</code> 字符开头的行</li><li><strong>$</strong>：表示行的结尾。例如：<code>!$</code>，表示匹配以 <code>!</code> 号结尾的行</li></ul><h2 id="元字符" tabindex="-1"><a class="header-anchor" href="#元字符" aria-hidden="true">#</a> 元字符</h2><p>常用的元字符如下所示：</p><table><thead><tr><th style="text-align:center;">元字符</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>.</strong></td><td style="text-align:left;">匹配除换行符以外的任意字符。例如：<code>.</code> 在 <code>mr\\nM\\tR</code> 中匹配 <code>m</code>、<code>r</code>、<code>M</code>、<code>\\t</code>、<code>R</code></td></tr><tr><td style="text-align:center;"><strong>\\w</strong></td><td style="text-align:left;">匹配字母、数字、下划线和汉字。例如：<code>\\w</code> 在 <code>m_af\\n7在</code> 中匹配 <code>m</code>、<code>_</code>、<code>a</code>、<code>f</code>、<code>7</code>、<code>在</code></td></tr><tr><td style="text-align:center;"><strong>\\W</strong></td><td style="text-align:left;">匹配除字母、数字、下划线和汉字以外的字符。例如：<code>\\W</code> 在 <code>m_af\\n7在</code> 中匹配 <code>\\n</code></td></tr><tr><td style="text-align:center;"><strong>\\s</strong></td><td style="text-align:left;">匹配单个的空白符（包括 Tab 键和换行符）。例如：<code>\\s</code> 在 <code>mr\\nM\\tR</code> 中匹配 <code>\\n</code>、<code>\\t</code></td></tr><tr><td style="text-align:center;"><strong>\\S</strong></td><td style="text-align:left;">匹配除单个的空白符（包括 Tab 键和换行符）以外的所有字符。例如：<code>\\S</code> 在 <code>mr\\nM\\tR</code> 中匹配 <code>m</code>、<code>r</code>、<code>M</code>、<code>R</code></td></tr><tr><td style="text-align:center;"><strong>\\b</strong></td><td style="text-align:left;">匹配单词的开始或结束，单词的分界符通常是空格，标点符号或者换行。例如：<code>\\bm</code> 在 <code>mr\\nM\\tRm</code> 中匹配 <code>m</code></td></tr><tr><td style="text-align:center;"><strong>\\d</strong></td><td style="text-align:left;">匹配数字。例如：<code>\\d</code> 在 <code>m_af\\n7在</code> 中匹配 <code>7</code></td></tr></tbody></table><h2 id="限定符" tabindex="-1"><a class="header-anchor" href="#限定符" aria-hidden="true">#</a> 限定符</h2><p>常用的限定符如下所示：</p><table><thead><tr><th style="text-align:center;">限定符</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>?</strong></td><td style="text-align:left;">匹配前面的字符零次或一次。例如：<code>colou?r</code> 可以匹配 <code>colour</code>、<code>color</code></td></tr><tr><td style="text-align:center;"><strong>+</strong></td><td style="text-align:left;">匹配前面的字符一次或多次。例如：<code>colou+r</code> 可以匹配 <code>colour</code>、<code>colouu...ur</code></td></tr><tr><td style="text-align:center;"><strong>*</strong></td><td style="text-align:left;">匹配前面的字符零次或多次。例如：<code>colou*r</code> 可以匹配 <code>color</code>、<code>colouu..ur</code></td></tr><tr><td style="text-align:center;"><strong>{n}</strong></td><td style="text-align:left;">匹配前面的字符 n 次。例如：<code>colou{2}r</code> 可以匹配 <code>colouur</code></td></tr><tr><td style="text-align:center;"><strong>{n,}</strong></td><td style="text-align:left;">匹配前面的字符最少 n 次。例如：<code>colou{2,}r</code> 可以匹配 <code>colouur</code>、<code>colouu..ur</code></td></tr><tr><td style="text-align:center;"><strong>{n,m}</strong></td><td style="text-align:left;">匹配前面的字符最少 n 次，最多 m 次。例如：<code>colou{2,4}r</code> 可以匹配 <code>colouur</code>、<code>colouuur</code>、<code>colouuuur</code></td></tr></tbody></table><h2 id="字符类" tabindex="-1"><a class="header-anchor" href="#字符类" aria-hidden="true">#</a> 字符类</h2><ul><li><strong>[]</strong>：表示匹配指定字符。例如：<code>[bc]</code> 在 <code>abcd</code> 中匹配 <code>b</code>、<code>c</code></li></ul><h2 id="排除字符" tabindex="-1"><a class="header-anchor" href="#排除字符" aria-hidden="true">#</a> 排除字符</h2><ul><li><strong>[^]</strong>：将 <code>^</code> 放到 <code>[]</code> 里面表示不匹配指定字符。例如：<code>[^a]</code> 在 <code>abcd</code> 中匹配 <code>b</code>、<code>c</code>、<code>d</code></li></ul><h2 id="选择字符" tabindex="-1"><a class="header-anchor" href="#选择字符" aria-hidden="true">#</a> 选择字符</h2><ul><li><strong>(|)</strong>：表示选择指定字符匹配。例如：<code>([a-z]|[0-9])</code> 在 <code>abcd1234ABCD</code> 中匹配 <code>a</code>、<code>b</code>、<code>c</code>、<code>d</code>、<code>1</code>、<code>2</code>、<code>3</code>、<code>4</code></li></ul><h2 id="转义字符" tabindex="-1"><a class="header-anchor" href="#转义字符" aria-hidden="true">#</a> 转义字符</h2><ul><li><strong>\\</strong>：表示在匹配指定字符时将特殊字符以普通字符匹配。例如：<code>[0-9]\\\\.[0-9]</code> 在 <code>12.34</code> 中匹配 <code>2.3</code></li></ul><h2 id="分组" tabindex="-1"><a class="header-anchor" href="#分组" aria-hidden="true">#</a> 分组</h2><p>分组有两个作用：</p><ul><li><strong>第一个作用</strong>：改变限定符的作用范围。如 <code>|</code>、<code>*</code>、<code>^</code> 等。例如：<code>([a-z]|[0-9])</code> 在 <code>abcd1234ABCD</code> 中匹配 <code>a</code>、<code>b</code>、<code>c</code>、<code>d</code>、<code>1</code>、<code>2</code>、<code>3</code>、<code>4</code></li><li><strong>第二个作用</strong>：分组，也就是子表达式。如 <code>(\\.[0-9]{1,3}){3}</code>，就是对分组 <code>(\\.[0-9]{1,3})</code> 进行重复操作</li></ul><h2 id="在-python-中使用正则表达式" tabindex="-1"><a class="header-anchor" href="#在-python-中使用正则表达式" aria-hidden="true">#</a> 在 Python 中使用正则表达式</h2><p>在 Python 中使用正则表达式时，是将其作为模式字符串使用的，由于模式字符串中可能包含大量的特殊字符和反斜杠，所以在模式字符前面加 <code>r</code> 或 <code>R</code>。例如：<code>r&#39;\\bm\\w*\\b&#39;</code></p><h2 id="使用-re-模块" tabindex="-1"><a class="header-anchor" href="#使用-re-模块" aria-hidden="true">#</a> 使用 re 模块</h2><h3 id="match" tabindex="-1"><a class="header-anchor" href="#match" aria-hidden="true">#</a> match()</h3><p>使用 re 模块的 <code>match()</code> 方法从字符串的开始处进行匹配，如果在开始位置匹配成功则返回 Match 对象，否则返回 None。</p><p><strong>语法格式</strong>：<code>re.match(pattern, string[, flags])</code></p><ul><li><strong>pattern</strong>：表示模式字符串</li><li><strong>string</strong>：表示要匹配的字符串</li><li><strong>flags</strong>：表示标志位，用于控制匹配方式。如：是否区分字母大小写</li></ul><p><strong>常用的标志如下所示：</strong></p><table><thead><tr><th style="text-align:center;">标志位</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>A</strong> 或 <strong>ASCII</strong></td><td style="text-align:left;">对于 <code>\\w</code>、<code>\\W</code>、<code>\\b</code>、<code>\\B</code>、<code>\\d</code>、<code>\\D</code>、<code>\\s</code> 和 <code>\\S</code> 只进行 ASCII 匹配</td></tr><tr><td style="text-align:center;"><strong>I</strong> 或 <strong>IGNORECASE</strong></td><td style="text-align:left;">执行不区分字母大小写的匹配</td></tr><tr><td style="text-align:center;"><strong>M</strong> 或 <strong>MULTILINE</strong></td><td style="text-align:left;">将 <code>^</code> 和 <code>$</code> 用于包括整个字符串的开始和结尾的每一行（默认情况下，仅适用于整个字符串的开始和结尾处）</td></tr><tr><td style="text-align:center;"><strong>S</strong> 或 <strong>DOTALL</strong></td><td style="text-align:left;">使用（<code>.</code>）字符匹配所有字符，包括换行符</td></tr><tr><td style="text-align:center;"><strong>X</strong> 或 <strong>VERBOSE</strong></td><td style="text-align:left;">忽略模式字符串中未转义的空格和注释</td></tr></tbody></table><p>例如：判断字符是否以 “Hel” 开头。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re

pattern <span class="token operator">=</span> <span class="token string">r&#39;Hel\\w+&#39;</span>
pattern01 <span class="token operator">=</span> <span class="token string">r&#39;Wor\\w+&#39;</span>
mystr <span class="token operator">=</span> <span class="token string">&#39;Hello, World! Hello, Python!&#39;</span>
<span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> mystr<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>
match01 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>pattern01<span class="token punctuation">,</span> mystr<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;re.Match object; span=(0, 5), match=&#39;Hello&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>match01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Match 对象中包含了匹配值的位置和匹配数据。其中，Match 对象的常用方法或属性如下：</p><ul><li><strong>start() 方法</strong>：可以获取匹配值的起始位置</li><li><strong>end() 方法</strong>：可以获取匹配值的结束位置</li><li><strong>span() 方法</strong>：可以返回匹配位置的元组</li><li><strong>group() 方法</strong>：可以返回指定匹配的数据</li><li><strong>string 属性</strong>：可以获取要匹配的字符串</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re


pattern <span class="token operator">=</span> <span class="token string">r&#39;Hel\\w+&#39;</span>
mystr <span class="token operator">=</span> <span class="token string">&#39;Hello, World! Hello, Python!&#39;</span>
<span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> mystr<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;re.Match object; span=(0, 5), match=&#39;Hello&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;匹配值的起始位置：&quot;</span><span class="token punctuation">,</span> <span class="token keyword">match</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：匹配值的起始位置： 0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;匹配值的结束位置：&quot;</span><span class="token punctuation">,</span> <span class="token keyword">match</span><span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：匹配值的结束位置： 5</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;匹配值的元组：&quot;</span><span class="token punctuation">,</span> <span class="token keyword">match</span><span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：匹配值的元组： (0, 5)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;要匹配的字符串：&quot;</span><span class="token punctuation">,</span> <span class="token keyword">match</span><span class="token punctuation">.</span>string<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：要匹配的字符串： Hello, World! Hello, Python!</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;匹配数据：&quot;</span><span class="token punctuation">,</span> <span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：匹配数据： Hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="search" tabindex="-1"><a class="header-anchor" href="#search" aria-hidden="true">#</a> search()</h3><p>使用 <code>search()</code> 方法用于在整个字符串中搜索第一个匹配的值，如果在起始位置匹配成功则返回 Match 对象，否则返回 None。</p><p><strong>语法格式</strong>：<code>re.search(pattern, string[, flags])</code></p><ul><li><strong>pattern</strong>：表示模式字符串</li><li><strong>string</strong>：表示要匹配的字符串</li><li><strong>flags</strong>：表示标志位，用于控制匹配方式。如：是否区分字母大小写</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re

pattern <span class="token operator">=</span> <span class="token string">r&#39;hel\\w+&#39;</span>
mystr <span class="token operator">=</span> <span class="token string">&#39;Hello, World! Hello, Python!&#39;</span>
mystr01 <span class="token operator">=</span> <span class="token string">&#39;World! Hello Hello, Python!&#39;</span>
<span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> mystr<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>
match01 <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> mystr01<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;re.Match object; span=(0, 5), match=&#39;Hello&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>match01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;re.Match object; span=(7, 12), match=&#39;Hello&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>search()</code> 方法不仅仅是在字符串的起始位置搜索，其它位置有符合的匹配也可以进行搜索</p></div><h3 id="findall" tabindex="-1"><a class="header-anchor" href="#findall" aria-hidden="true">#</a> findall()</h3><p>使用 <code>findall()</code> 方法用于在整个字符串中搜索所有符合正则表达式的字符串，并以列表的形式返回。如果匹配成功，则返回包含匹配结构的列表，否则返回空列表。</p><p><strong>语法格式</strong>：<code>re.findall(pattern, string[, flags])</code></p><ul><li><strong>pattern</strong>：表示模式字符串</li><li><strong>string</strong>：表示要匹配的字符串</li><li><strong>flags</strong>：表示标志位，用于控制匹配方式。如：是否区分字母大小写</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re

pattern <span class="token operator">=</span> <span class="token string">r&#39;hel\\w+&#39;</span>
mystr <span class="token operator">=</span> <span class="token string">&#39;Hello, World! Hello, Python!&#39;</span>
mystr01 <span class="token operator">=</span> <span class="token string">&#39;World! Hello Hello, Python!&#39;</span>
<span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> mystr<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>
match01 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> mystr01<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;Hello&#39;, &#39;Hello&#39;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>match01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;Hello&#39;, &#39;Hello&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在指定的模式字符串中包含分组，则返回与分组匹配的文本列表。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re

pattern <span class="token operator">=</span> <span class="token string">r&#39;[1-9]{1,3}(\\.[0-9]{1,3}){3}&#39;</span>
num <span class="token operator">=</span> <span class="token string">&#39;127.0.0.1 192.168.10.11&#39;</span>
<span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> num<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;.1&#39;, &#39;.11&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并没有得到匹配的 IP 地址，这是因为在模式字符串中出现了分组，所以得到的结果是根据分组进行匹配的结果，即 “<code>(\\.[0-9]{1,3}){3}</code>” 匹配的结果。如果要获取整个模式字符串的匹配，可以将整个模式字符串使用一对小括号进行分组，然后在获取结果时，只取返回值列表的每个元素的第一个元素。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re

pattern <span class="token operator">=</span> <span class="token string">r&#39;([1-9]{1,3}(\\.[0-9]{1,3}){3})&#39;</span>
num <span class="token operator">=</span> <span class="token string">&#39;127.0.0.1 192.168.10.11&#39;</span>
<span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> num<span class="token punctuation">)</span>

<span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token keyword">match</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>
<span class="token number">192.168</span><span class="token number">.10</span><span class="token number">.11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sub" tabindex="-1"><a class="header-anchor" href="#sub" aria-hidden="true">#</a> sub()</h3><p>使用 re 模块的 <code>sub()</code> 方法用于替换字符串。</p><p><strong>语法格式</strong>：<code>re.sub(pattern, repl, string[, count[, flags]])</code></p><ul><li><strong>pattern</strong>：表示模式字符串</li><li><strong>repl</strong>：表示替换的字符串</li><li><strong>string</strong>：表示要被查找替换的原始字符串</li><li><strong>count</strong>：表示模式匹配后替换的最大次数，默认为 0 表示替换所有的匹配</li><li><strong>flags</strong>：表示标志位，用于控制匹配方式</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re

pattern <span class="token operator">=</span> <span class="token string">r&#39;1[34578]\\d{9}&#39;</span>
mystr <span class="token operator">=</span> <span class="token string">&quot;中奖号码为 4568，联系电话为：13645238965&quot;</span>
result <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token string">&#39;136xxxxxxxx&#39;</span><span class="token punctuation">,</span> mystr<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：中奖号码为 4568，联系电话为：136xxxxxxxx</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="split" tabindex="-1"><a class="header-anchor" href="#split" aria-hidden="true">#</a> split()</h3><p>使用 <code>split()</code> 方法用于实现根据正则表达式分割字符串，并以列表的形式返回。</p><p><strong>语法格式</strong>：<code>re.split(pattern, string[, maxsplit[, flags]])</code></p><ul><li><strong>pattern</strong>：表示模式字符串</li><li><strong>string</strong>：表示要匹配的字符串</li><li><strong>maxsplit</strong>：表示最大的拆分次数</li><li><strong>flags</strong>：表示标志位，用于控制匹配方式</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re

pattern <span class="token operator">=</span> <span class="token string">r&#39;[?|&amp;]&#39;</span>
url <span class="token operator">=</span> <span class="token string">&#39;asfa?fdgsdg&amp;agg&#39;</span>
result <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> url<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;asfa&#39;, &#39;fdgsdg&#39;, &#39;agg&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,65),c=[o];function l(p,r){return s(),a("div",null,c)}const u=n(e,[["render",l],["__file","regexp.html.vue"]]);export{u as default};
