import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as t}from"./app-pi3g2Iwn.js";const e={},p=t(`<p>为了实现某项功能，经常需要对某些字符串进行特殊处理，如：拼接字符串、截取字符串、格式化字符串等。</p><h2 id="拼接字符串" tabindex="-1"><a class="header-anchor" href="#拼接字符串" aria-hidden="true">#</a> 拼接字符串</h2><p>使用 “<code>+</code>” 运算符可完成对多个字符串的拼接，“<code>+</code>” 运算符可以连接多个字符串并产生一个字符串对象。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mot_en <span class="token operator">=</span> <span class="token string">&#39;Time is money&#39;</span>
mot_cn <span class="token operator">=</span> <span class="token string">&quot;时间就是金钱&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mot_en <span class="token operator">+</span> <span class="token string">&#39;——&#39;</span> <span class="token operator">+</span> mot_cn<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：Time is money——时间就是金钱</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串不允许直接与其它类型的数据拼接。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr <span class="token operator">=</span> <span class="token string">&quot;我今天走了&quot;</span>
num <span class="token operator">=</span> <span class="token number">1234</span>
mystr01 <span class="token operator">=</span> <span class="token string">&quot;步&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mystr <span class="token operator">+</span> num <span class="token operator">+</span> mystr01<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
TypeError<span class="token punctuation">:</span> can only concatenate <span class="token builtin">str</span> <span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">)</span> to <span class="token builtin">str</span>。只能将 <span class="token builtin">str</span> 类型的连接到 <span class="token builtin">str</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将整数转换为字符串的方法输出。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr <span class="token operator">=</span> <span class="token string">&quot;我今天走了&quot;</span>
num <span class="token operator">=</span> <span class="token number">1234</span>
mystr01 <span class="token operator">=</span> <span class="token string">&quot;步&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mystr <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">+</span> mystr01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我今天走了1234步</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="计算字符串的长度" tabindex="-1"><a class="header-anchor" href="#计算字符串的长度" aria-hidden="true">#</a> 计算字符串的长度</h2><p>不同的字符所占字节数不同，在 Python 中，数字、英文、小数点、下划线和空格各占一个字节；一个汉字可能会占 <code>2~4</code> 个字节，占几个字节取决于采用的编码，汉字在 <code>GBK/GB2312</code> 编码中占 <code>2</code> 个字节，在 <code>UTF-8/unicode</code> 编码中一般占用 <code>3</code> 个字节。</p><p>使用 <code>len()</code> 函数计算字符串的长度。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr <span class="token operator">=</span> <span class="token string">&quot;我喜欢用 Python&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>mystr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>默认情况下通过 <code>len()</code> 函数计算字符串的长度时，不区分英文、数字和汉字，所有字符都按一个字符计算</p></div><p>有时需要获取字符串实际所占的字节数，可以使用 <code>encode()</code> 方法，进行编码后再进行获取，默认是 <code>UTF-8</code> 编码。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr <span class="token operator">=</span> <span class="token string">&quot;我喜欢用 Python&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：19。使用 UTF-8 编码</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;GBK&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：15。使用 GBK 编码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="截取字符串" tabindex="-1"><a class="header-anchor" href="#截取字符串" aria-hidden="true">#</a> 截取字符串</h2><p>字符串也属于序列，所以要截取字符串可以使用切片的方法实现，语法格式：</p><p><code>string[start:end:step]</code></p><ul><li><strong>string</strong>：表示要截取的字符串</li><li><strong>start</strong>：表示要截取的第一个字符的索引（包括该索引）</li><li><strong>end</strong>：表示要截取的最后一个字符的所有（不包括该索引）</li><li><strong>step</strong>：表示切片的步长，默认为 1</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr <span class="token operator">=</span> <span class="token string">&quot;我喜欢用 Python&quot;</span>
submystr01 <span class="token operator">=</span> mystr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
submystr02 <span class="token operator">=</span> mystr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
submystr03 <span class="token operator">=</span> mystr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
submystr04 <span class="token operator">=</span> mystr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span>
submystr05 <span class="token operator">=</span> mystr<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>submystr01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：用</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>submystr02<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：用 Python</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>submystr03<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我喜欢</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>submystr04<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：喜欢用 Py</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>submystr05<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：IndexError: string index out of range。索引超出范围</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在进行截取字符串时，指定索引不存在报错，可以使用 <code>try···except</code> 语句捕获异常。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr <span class="token operator">=</span> <span class="token string">&quot;我喜欢用 Python&quot;</span>

<span class="token keyword">try</span><span class="token punctuation">:</span>
    submystr01 <span class="token operator">=</span> mystr<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span>
<span class="token keyword">except</span> IndexError<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;指定的索引不存在&quot;</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
指定的索引不存在
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分割、合并字符串" tabindex="-1"><a class="header-anchor" href="#分割、合并字符串" aria-hidden="true">#</a> 分割、合并字符串</h2><p>分割字符串是把字符串分割为列表，而合并字符串是把列表合并为字符串。分割和合并字符串可以看作是互逆操作。</p><h3 id="分割字符串" tabindex="-1"><a class="header-anchor" href="#分割字符串" aria-hidden="true">#</a> 分割字符串</h3><p>使用 <code>split()</code> 分割字符串，将一个字符串按指定的分隔符分割为字符串列表，该列表元素中不包括分隔符。</p><p><strong>语法格式</strong>：<code>str.split(sep[, maxsplit])</code></p><ul><li><strong>str</strong>：表示对 <code>split</code> 输入的对象</li><li><strong>sep</strong>：指定分隔符，默认为 None（即所有空格、换行 <code>\\n</code>、制表符 <code>\\t</code>）</li><li><strong>maxsplit</strong>：指定分割的次数，如果不指定或者为 <code>-1</code>，则分割次数没有限制，否则返回结果列表的元素个数，个数最多为 maxsplit+1</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr <span class="token operator">=</span> <span class="token string">&quot;Hello, World! Hello, Python!&quot;</span>
mylist01 <span class="token operator">=</span> mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
mylist02 <span class="token operator">=</span> mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>
mylist03 <span class="token operator">=</span> mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span>
mylist04 <span class="token operator">=</span> mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
mylist05 <span class="token operator">=</span> mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;Hello,&#39;, &#39;World!&#39;, &#39;Hello,&#39;, &#39;Python!&#39;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mylist02<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;Hello&#39;, &#39; World! Hello&#39;, &#39; Python!&#39;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mylist03<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;Hell&#39;, &#39;, W&#39;, &#39;rld! Hell&#39;, &#39;, Pyth&#39;, &#39;n!&#39;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mylist04<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;Hello,&#39;, &#39;World!&#39;, &#39;Hello,&#39;, &#39;Python!&#39;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mylist05<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;He&#39;, &#39;&#39;, &#39;o, Wor&#39;, &#39;d! He&#39;, &#39;&#39;, &#39;o, Python!&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>使用 <code>split()</code> 方法时，如果不指定参数，默认采用空格进行分割，无论有几个空格都将作为一个分隔符进行分割；如果分隔符连续出现多个，每分割一次将会得到一个空元素</p></div><h3 id="合并字符串" tabindex="-1"><a class="header-anchor" href="#合并字符串" aria-hidden="true">#</a> 合并字符串</h3><p>使用 <code>join()</code> 方法合并字符串。</p><p><strong>语法格式</strong>：<code>strnew = string.join(iterable)</code></p><ul><li><strong>strnew</strong>：表示合并后生成的字符串名称</li><li><strong>string</strong>：字符串类型，指定合并时的分隔符</li><li><strong>iterable</strong>：可迭代的对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wangwu&#39;</span><span class="token punctuation">]</span>
mystr01 <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>
mystr02 <span class="token operator">=</span> <span class="token string">&#39;@&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mystr01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：zhangsan lisi wangwu</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;@&#39;</span> <span class="token operator">+</span> mystr02<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：@zhangsan@lisi@wangwu</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="检索字符串" tabindex="-1"><a class="header-anchor" href="#检索字符串" aria-hidden="true">#</a> 检索字符串</h2><h3 id="检索字符串次数" tabindex="-1"><a class="header-anchor" href="#检索字符串次数" aria-hidden="true">#</a> 检索字符串次数</h3><p>使用 <code>count()</code> 方法检索指定字符串在另一个字符串中出现的次数，如果要检索的字符串不存在，则返回 0。</p><p><strong>语法格式</strong>：<code>str.count(sub[, start[, end=len(string)]])</code></p><ul><li><strong>str</strong>：表示对 <code>count</code> 输入的对象</li><li><strong>sub</strong>：搜索的子字符串</li><li><strong>start</strong>：字符串开始搜索的位置。默认为第一个字符，第一个字符索引值为 0</li><li><strong>end</strong>：字符串中结束搜索的位置。默认为字符串的最后一个位置</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&#39;Hello, World! Hello, Python!&#39;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;I&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检索字符串索引" tabindex="-1"><a class="header-anchor" href="#检索字符串索引" aria-hidden="true">#</a> 检索字符串索引</h3><p>使用 <code>find()</code> 方法检索是否包含指定的子字符串，如果检索的字符串不存在，则返回 <code>-1</code>；如果存在，则返回首次出现该字符串时的索引。</p><p><strong>语法格式</strong>：<code>str.find(sub[, start[, end=len(string)]])</code></p><ul><li><strong>str</strong>：表示对 <code>find</code> 输入的对象</li><li><strong>sub</strong>：搜索的子字符串</li><li><strong>start</strong>：字符串开始搜索的位置。默认为第一个字符，第一个字符索引值为 0</li><li><strong>end</strong>：字符串中结束搜索的位置。默认为字符串的最后一个位置</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&#39;Hello, World! Hello, Python!&#39;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;I&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：-1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：14</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>index()</code> 方法与 <code>find()</code> 方法类似，也是用于检索是否包含指定的子字符串，只不过使用 <code>index()</code> 方法当指定的字符串不存在，将会报错。</p><p><strong>语法格式</strong>：<code>str.index(sub[, start[, end=len(string)]])</code></p><ul><li><strong>str</strong>：表示对 <code>index</code> 输入的对象</li><li><strong>sub</strong>：搜索的子字符串</li><li><strong>start</strong>：字符串开始搜索的位置。默认为第一个字符，第一个字符索引值为 0</li><li><strong>end</strong>：字符串中结束搜索的位置。默认为字符串的最后一个位置</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&#39;Hello, World! Hello, Python!&#39;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;I&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：ValueError: substring not found。没有找到字符串</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：14</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检索字符串开头" tabindex="-1"><a class="header-anchor" href="#检索字符串开头" aria-hidden="true">#</a> 检索字符串开头</h3><p>使用 <code>startswith()</code> 方法检索字符串是否以指定子字符串开头，如果是则返回 True，否则返回 False。</p><p><strong>语法格式</strong>：<code>str.startswith(prefix[, start[, end=len(string)]])</code></p><ul><li><strong>str</strong>：表示对 <code>startswith</code> 输入的对象</li><li><strong>prefix</strong>：搜索的子字符串</li><li><strong>start</strong>：字符串开始搜索的位置。默认为第一个字符，第一个字符索引值为 0</li><li><strong>end</strong>：字符串中结束搜索的位置。默认为字符串的最后一个位置</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&#39;Hello, World! Hello, Python!&#39;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;I&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检索字符串结尾" tabindex="-1"><a class="header-anchor" href="#检索字符串结尾" aria-hidden="true">#</a> 检索字符串结尾</h3><p>使用 <code>endswith()</code> 方法检索字符串是否以指定子字符串结尾，如果是则返回 True，否则返回 False。</p><p><strong>语法格式</strong>：<code>str.endswith(suffix[, start[, end=len(string)]])</code></p><ul><li><strong>str</strong>：表示对 <code>endswith</code> 输入的对象</li><li><strong>suffix</strong>：搜索的子字符串</li><li><strong>start</strong>：字符串开始搜索的位置。默认为第一个字符，第一个字符索引值为 0</li><li><strong>end</strong>：字符串中结束搜索的位置。默认为字符串的最后一个位置</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&#39;Hello, World! Hello, Python!&#39;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;I&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字母的大小写转换" tabindex="-1"><a class="header-anchor" href="#字母的大小写转换" aria-hidden="true">#</a> 字母的大小写转换</h2><h3 id="小写转换字母" tabindex="-1"><a class="header-anchor" href="#小写转换字母" aria-hidden="true">#</a> 小写转换字母</h3><p>使用 <code>lower()</code> 方法将字符串的大写字母转换为小写字母。</p><p><strong>语法格式</strong>：<code>str.lower()</code></p><ul><li><strong>str</strong>：表示对 <code>lower</code> 输入的对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：hello, world!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="大写转换字母" tabindex="-1"><a class="header-anchor" href="#大写转换字母" aria-hidden="true">#</a> 大写转换字母</h3><p>使用 <code>upper()</code> 方法将字符串中的小写字母转换为大写字母。</p><p><strong>语法格式</strong>：<code>str.upper()</code></p><ul><li><strong>str</strong>：表示对 <code>upper</code> 输入的对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：HELLO, WORLD!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删除空格和特殊字符" tabindex="-1"><a class="header-anchor" href="#删除空格和特殊字符" aria-hidden="true">#</a> 删除空格和特殊字符</h2><h3 id="删除左右两侧" tabindex="-1"><a class="header-anchor" href="#删除左右两侧" aria-hidden="true">#</a> 删除左右两侧</h3><p>使用 <code>strip()</code> 方法去除字符串左右两侧的空格和特殊字符。</p><p><strong>语法格式</strong>：<code>str.strip(&quot;object&quot;)</code></p><ul><li><strong>str</strong>：表示对 <code>strip</code> 输入的对象</li><li><strong>object</strong>：表示要删除的对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr <span class="token operator">=</span> <span class="token string">&quot; Hello, World!  &quot;</span>
mystr01 <span class="token operator">=</span> <span class="token string">&quot;, Hello, World!  &quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：Hello, World!</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mystr01<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果： Hello, World!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除左侧" tabindex="-1"><a class="header-anchor" href="#删除左侧" aria-hidden="true">#</a> 删除左侧</h3><p>使用 <code>lstrip()</code> 方法去掉字符串左侧的空格和特殊字符。</p><p><strong>语法格式</strong>：<code>str.lstrip(&quot;object&quot;)</code></p><ul><li><strong>str</strong>：表示对 <code>strip</code> 输入的对象</li><li><strong>object</strong>：表示要删除的对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr <span class="token operator">=</span> <span class="token string">&quot; Hello, World!  &quot;</span>
mystr01 <span class="token operator">=</span> <span class="token string">&quot;, Hello, World!  &quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：Hello, World!  </span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mystr01<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果： Hello, World!  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除右侧" tabindex="-1"><a class="header-anchor" href="#删除右侧" aria-hidden="true">#</a> 删除右侧</h3><p>使用 <code>rstrip()</code> 方法去掉字符串右侧的空格和特殊字符。</p><p><strong>语法格式</strong>：<code>str.rstrip(&quot;object&quot;)</code></p><ul><li><strong>str</strong>：表示对 <code>strip</code> 输入的对象</li><li><strong>object</strong>：表示要删除的对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr <span class="token operator">=</span> <span class="token string">&quot; Hello, World!  &quot;</span>
mystr01 <span class="token operator">=</span> <span class="token string">&quot;, Hello, World!&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果： Hello, World!</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mystr01<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：, Hello, World</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="格式化字符串" tabindex="-1"><a class="header-anchor" href="#格式化字符串" aria-hidden="true">#</a> 格式化字符串</h2><p>格式化字符串是指先指定一个模板，在这个模板中预留几个空位，然后再根据需要填上相应的内容，这些空位需要通过指定的符号标记（占位符），而这些符号不会显示出来。</p><h3 id="使用-号操作符" tabindex="-1"><a class="header-anchor" href="#使用-号操作符" aria-hidden="true">#</a> 使用 % 号操作符</h3><p><strong>语法格式</strong>：<code>&quot;%[-][+][0][m][.n]格式化字符&quot; % exp</code></p><ul><li><strong>-</strong>：用于指定左对齐，正数前方无符号，负数前面加负号</li><li><strong>+</strong>：用于指定右对齐，正数前方无符号，负数前方加负号</li><li><strong>0</strong>：表示右对齐，正数前方无符号，负数前方加负号，用 0 填充空白处（一般与 m 参数一起使用）</li><li><strong>m</strong>：表示占有宽度</li><li><strong>.n</strong>：表示小数点后保留的位数</li><li><strong>格式化字符</strong>：用于指定类型</li><li><strong>exp</strong>：要转换的项，如果要指定的项有多个，需要通过元组的形式进行指定，但不能使用列表</li></ul><p><strong>常用的格式化字符如下：</strong></p><table><thead><tr><th style="text-align:center;">格式化字符</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>%s</strong></td><td style="text-align:left;">字符串（用 <code>str()</code> 显示）</td></tr><tr><td style="text-align:center;"><strong>%c</strong></td><td style="text-align:left;">单个字符</td></tr><tr><td style="text-align:center;"><strong>%d</strong> 或者 <strong>%i</strong></td><td style="text-align:left;">十进制整数</td></tr><tr><td style="text-align:center;"><strong>%x</strong></td><td style="text-align:left;">十六进制整数</td></tr><tr><td style="text-align:center;"><strong>%f</strong> 或者 <strong>%F</strong></td><td style="text-align:left;">浮点数</td></tr><tr><td style="text-align:center;"><strong>%r</strong></td><td style="text-align:left;">字符串（用 <code>repr()</code> 显示）</td></tr><tr><td style="text-align:center;"><strong>%o</strong></td><td style="text-align:left;">八进制整数</td></tr><tr><td style="text-align:center;"><strong>%e</strong></td><td style="text-align:left;">指数（基底写为 <code>e</code>）</td></tr><tr><td style="text-align:center;"><strong>%E</strong></td><td style="text-align:left;">指数（基底写为 <code>E</code>）</td></tr><tr><td style="text-align:center;"><strong>%%</strong></td><td style="text-align:left;">字符 <code>%</code></td></tr></tbody></table><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr <span class="token operator">=</span> <span class="token string">&quot;id：%02d\\t name：%s\\t age：%d&quot;</span>
context01 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>
context02 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>
context03 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mystr <span class="token operator">%</span> context01<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mystr <span class="token operator">%</span> context02<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mystr <span class="token operator">%</span> context03<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;id：%02d\\t name：%s\\t age：%d&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;wangwu&#39;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token builtin">id</span>：<span class="token number">01</span>	 name：zhangsan	 age：<span class="token number">24</span>
<span class="token builtin">id</span>：<span class="token number">02</span>	 name：lisi	 age：<span class="token number">21</span>
TypeError<span class="token punctuation">:</span> <span class="token operator">%</span>d <span class="token builtin">format</span><span class="token punctuation">:</span> a real number <span class="token keyword">is</span> required<span class="token punctuation">,</span> <span class="token keyword">not</span> <span class="token builtin">list</span>。找不到子字符串格式，需要元组，不是列表
<span class="token builtin">id</span>：<span class="token number">03</span>	 name：wangwu	 age：<span class="token number">24</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;wangwu&#39;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> my_list <span class="token keyword">in</span> my_lists<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;id：%d name：%s age：%d&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>my_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> my_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> my_list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 左对齐输出</span>
<span class="token keyword">for</span> my_list <span class="token keyword">in</span> my_lists<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;id：%-5s name：%-10s age：%-5s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>my_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> my_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> my_list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 右对齐输出</span>
<span class="token keyword">for</span> my_list <span class="token keyword">in</span> my_lists<span class="token punctuation">:</span>
    <span class="token comment"># print(&#39;id：%+5s name：%+10s age：%+5s&#39; % (my_list[0], my_list[1], my_list[2]))</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;id：%5s name：%10s age：%5s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>my_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> my_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> my_list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 省略 “+” 号</span>


<span class="token comment"># 输出结果</span>
<span class="token builtin">id</span>：<span class="token number">1</span> name：zhangsan age：<span class="token number">24</span>
<span class="token builtin">id</span>：<span class="token number">2</span> name：lisi age：<span class="token number">21</span>
<span class="token builtin">id</span>：<span class="token number">3</span> name：wangwu age：<span class="token number">24</span>
<span class="token builtin">id</span>：<span class="token number">1</span>     name：zhangsan   age：<span class="token number">24</span>
<span class="token builtin">id</span>：<span class="token number">2</span>     name：lisi       age：<span class="token number">21</span>
<span class="token builtin">id</span>：<span class="token number">3</span>     name：wangwu     age：<span class="token number">24</span>
<span class="token builtin">id</span>：    <span class="token number">1</span> name：  zhangsan age：   <span class="token number">24</span>
<span class="token builtin">id</span>：    <span class="token number">2</span> name：      lisi age：   <span class="token number">21</span>
<span class="token builtin">id</span>：    <span class="token number">3</span> name：    wangwu age：   <span class="token number">24</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-format-方法进行字符串格式化" tabindex="-1"><a class="header-anchor" href="#使用-format-方法进行字符串格式化" aria-hidden="true">#</a> 使用 format() 方法进行字符串格式化</h3><p><strong>语法格式</strong>：<code>str.format(args)</code></p><ul><li><strong>str</strong>：指定字符串的显示样式（模板）</li><li><strong>args</strong>：指定要转换的项，如果有多项使用 <code>,</code> 号分隔</li></ul><p>在创建模板时，需要使用 <code>{}</code> 和 <code>:</code> 指定占位符。</p><p><strong>语法格式</strong>：<code>{[index][:[[fill]align][#][width][.precision][type]]}</code></p><ul><li><strong>index</strong>：指定要设置格式的对象在参数列表中的索引位置，索引值从 0 开始</li><li><strong>fill</strong>：指定空白处填充的字符</li><li><strong>align</strong>：指定对齐方式（值为 “<code>&lt;</code>” 时表示内容左对齐；值为 “<code>&gt;</code>” 时表示内容右对齐；值为 “<code>=</code>” 时表示内容右对齐，将符号放在填充内容的最左侧，且只对数字类型有效；值为 “<code>^</code>” 时表示内容居中），需要配合 <code>width</code> 一起使用</li><li><strong>sign</strong>：指定有无符号数（值为 “<code>+</code>” 时表示正数加正号，负数加负号；值为 “<code>-</code>” 时表示正数不变，负数加负号；值为 “<code></code>”（空格）时表示正数加空格，负数加负号）</li><li><strong>#</strong> ：对于二进制、八进制和十六进制数，如果加上 “<code>#</code>”，表示会显示 <code>0b/0o/0X</code> 前缀，否则不显示前缀</li><li><strong>width</strong>：指定所占宽度</li><li><strong>.precision</strong>：指定保留的小数位数</li><li><strong>type</strong>：指定类型</li></ul><p><strong>format() 方法中常用的格式化字符：</strong></p><table><thead><tr><th style="text-align:center;">格式化字符</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>s</strong></td><td style="text-align:left;">对字符串类型格式化</td></tr><tr><td style="text-align:center;"><strong>d</strong></td><td style="text-align:left;">十进制整数</td></tr><tr><td style="text-align:center;"><strong>c</strong></td><td style="text-align:left;">将十进制整数自动转换成对应的 Unicode 字符</td></tr><tr><td style="text-align:center;"><strong>e</strong> 或者 <strong>E</strong></td><td style="text-align:left;">转换为科学计数法表示再格式</td></tr><tr><td style="text-align:center;"><strong>g</strong> 或者 <strong>G</strong></td><td style="text-align:left;">自动在 e 和 f 或者 E 和 F 中切换</td></tr><tr><td style="text-align:center;"><strong>b</strong></td><td style="text-align:left;">将十进制整数自动转换成二进制表示再格式化</td></tr><tr><td style="text-align:center;"><strong>o</strong></td><td style="text-align:left;">将十进制整数自动转换成八进制表示再格式化</td></tr><tr><td style="text-align:center;"><strong>x</strong> 或者 <strong>X</strong></td><td style="text-align:left;">将十进制整数自动转换成十六进制表示再格式化</td></tr><tr><td style="text-align:center;"><strong>f</strong> 或者 <strong>F</strong></td><td style="text-align:left;">转换为浮点数（默认小数点后保留 6 位）再格式化</td></tr><tr><td style="text-align:center;"><strong>%</strong></td><td style="text-align:left;">显示百分比（默认显示小数点后 6 位）</td></tr></tbody></table><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr <span class="token operator">=</span> <span class="token string">&quot;id：{:0&gt;2}\\t name：{:s}\\t age：{:d}&quot;</span>
context01 <span class="token operator">=</span> mystr<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>
context02 <span class="token operator">=</span> mystr<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>
context03 <span class="token operator">=</span> mystr<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>context01<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>context02<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>context03<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;id: {:0&gt;2}\\t name: {:s}\\t age: {:d}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;wangwu&#39;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token builtin">id</span>：<span class="token number">01</span>	 name：zhangsan	 age：<span class="token number">24</span>
<span class="token builtin">id</span>：<span class="token number">02</span>	 name：lisi	 age：<span class="token number">21</span>
TypeError<span class="token punctuation">:</span> <span class="token string">&#39;builtin_function_or_method&#39;</span> <span class="token builtin">object</span> <span class="token keyword">is</span> <span class="token keyword">not</span> subscriptable。对象不可调用
<span class="token builtin">id</span><span class="token punctuation">:</span> <span class="token number">03</span>	 name<span class="token punctuation">:</span> wangwu	 age<span class="token punctuation">:</span> <span class="token number">24</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将数值格式化为不同的形式。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> math

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;1234 + 4321 的结果是（以货币的形式显示）：￥{:,.2f} 元&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">1234</span> <span class="token operator">+</span> <span class="token number">4321</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{0:.1f} 用科学计数法表示：{0:E}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">120000.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;π 取 5 位小数：{:.5f}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{0:d} 的十六进制结果是：{0:#x}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;天才是由 {:.0%} 的灵感，加上 {:.0%} 的汗水&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">0.99</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token number">1234</span> <span class="token operator">+</span> <span class="token number">4321</span> 的结果是（以货币的形式显示）：￥<span class="token number">5</span><span class="token punctuation">,</span><span class="token number">555.00</span> 元
<span class="token number">120000.1</span> 用科学计数法表示：<span class="token number">1.200001E+05</span>
π 取 <span class="token number">5</span> 位小数：<span class="token number">3.14159</span>
<span class="token number">100</span> 的十六进制结果是：<span class="token number">0x64</span>
天才是由 <span class="token number">1</span><span class="token operator">%</span> 的灵感，加上 <span class="token number">99</span><span class="token operator">%</span> 的汗水
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>*args</code> 表示任何多个无名参数，它是一个 <code>tuple</code> 或 <code>list</code>；<code>**kwargs</code> 表示关键字参数，它是一个 <code>dict</code>。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;，&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;。&quot;</span><span class="token punctuation">]</span>
kwargs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;20&quot;</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;我叫{name}{}今年{age}岁了{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我叫张三，今年20岁了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="转换符" tabindex="-1"><a class="header-anchor" href="#转换符" aria-hidden="true">#</a> 转换符</h3><ul><li><strong>!s</strong>：调用 <code>str()</code> 转换求值结果，是面向用户的，目的是可读性</li><li><strong>!r</strong>：调用 <code>repr()</code> 转换求值结果，带有引号</li><li><strong>!a</strong>：调用 <code>ascii()</code> 转换求值结果，是面向 Python 解析器的，返回值表示在 python 内部的含义，返回 <code>ascii</code> 编码</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{!s}好&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;您&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：您好</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{!r}好&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;您&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&quot;您&quot;好</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{!a}好&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;您&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&quot;\\u4f60&quot;好</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串编码转换" tabindex="-1"><a class="header-anchor" href="#字符串编码转换" aria-hidden="true">#</a> 字符串编码转换</h2><p>最早的字符串编码是美国标准信息交换码（即 ASCII 码）。它仅对 10 个数字、26 个大写英文字母、26 个小写英文字母及一些其它符号进行编码。ASCII 码最多只能表示 256 个符号，每个字符占一个字节。随着信息技术的发展，出现了 GBK、GB2312、UTF-8 编码等，其中 GBK 和 GB2312 是我国制定的中文编码标准，使用一个字节表示英文字母；两个字节表示中文字符，而 UTF-8 是国际通用的编码，对全世界所有国家需要用到的字符都进行了编码，UTF-8 采用一个字节表示英文字符；三个字节表示中文字符。</p><p>在 Python 中，有两种常用的字符串类型，分别为 <code>str</code> 和 <code>bytes</code>。其中 str 表示 Unicode 字符（ASCII 或者其它）；bytes 表示二进制数据（包括编码的文本）。这两种类型的字符串不能拼接在一起使用。通常情况下，str 在内存中以 Unicode 表示，一个字符对应若干个字节，但是在网络上传输或者保存到磁盘中，就需要把 str 转换位字节类型（即 bytes 类型）</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>bytes 类型的数据是带有 b 前缀的字符串（用单引号或双引号表示）。例如：<code>b&#39;\\xd2\\xb0&#39;</code>、<code>b&#39;mr&#39;</code> 都是 bytes 类型的数据</p></div><h3 id="字符串转换为二进制数据" tabindex="-1"><a class="header-anchor" href="#字符串转换为二进制数据" aria-hidden="true">#</a> 字符串转换为二进制数据</h3><p>使用 <code>encode()</code> 方法将字符串转换为二进制数据（即 bytes）。</p><p><strong>语法格式</strong>：<code>str.encode([encoding=&quot;utf-8&quot;][, error=&quot;strict&quot;])</code></p><ul><li><strong>str</strong>：表示对 <code>encode</code> 输入的字符串</li><li><strong>encoding=&quot;utf-8&quot;</strong>：用于指定进行转码时采用的字符编码，默认为 UTF-8，如果使用简体中文，则设置为 GB2312</li><li><strong>error</strong>：指定错误处理方式，值为 strict 时，遇到非法字符就抛出异常；值为 ignore 时，忽略非法字符；值为 replace 时，用 “？” 替换非法字符；值为 xmlcharrefreplace 时，使用 XML 的字符引用等，默认为 strict</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr <span class="token operator">=</span> <span class="token string">&quot;我喜欢用 Python&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;UTF-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;GB2312&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;GBK&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token string">b&#39;\\xe6\\x88\\x91\\xe5\\x96\\x9c\\xe6\\xac\\xa2\\xe7\\x94\\xa8 Python&#39;</span>
<span class="token string">b&#39;\\xce\\xd2\\xcf\\xb2\\xbb\\xb6\\xd3\\xc3 Python&#39;</span>
<span class="token string">b&#39;\\xce\\xd2\\xcf\\xb2\\xbb\\xb6\\xd3\\xc3 Python&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二进制数据转换为字符串" tabindex="-1"><a class="header-anchor" href="#二进制数据转换为字符串" aria-hidden="true">#</a> 二进制数据转换为字符串</h3><p>使用 <code>decode()</code> 方法将二进制数据转换为字符串，将 <code>encode()</code> 方法转换的结果再转换为字符串，也称为 “解码”。</p><p><strong>语法格式</strong>：<code>bytes.decode([encoding=&quot;utf-8&quot;][, error=&quot;strict&quot;])</code></p><ul><li><strong>bytes</strong>：表示对 <code>decode</code> 输入的二进制数据</li><li><strong>encoding=&quot;utf-8&quot;</strong>：用于指定进行转码时采用的字符编码，默认为 UTF-8，如果使用简体中文，则设置为 GB2312</li><li><strong>error</strong>：指定错误处理方式，值为 strict 时，遇到非法字符就抛出异常；值为 ignore 时，忽略非法字符；值为 replace 时，用 “？” 替换非法字符；值为 xmlcharrefreplace 时，使用 XML 的字符引用等，默认为 strict</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在设置解码采用的字符编码时，需要与编码时采用的字符编码一致</p></div><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mybytes01 <span class="token operator">=</span> <span class="token string">b&#39;\\xe6\\x88\\x91\\xe5\\x96\\x9c\\xe6\\xac\\xa2\\xe7\\x94\\xa8 Python&#39;</span>
mybytes02 <span class="token operator">=</span> <span class="token string">b&#39;\\xce\\xd2\\xcf\\xb2\\xbb\\xb6\\xd3\\xc3 Python&#39;</span>
mybytes03 <span class="token operator">=</span> <span class="token string">b&#39;\\xce\\xd2\\xcf\\xb2\\xbb\\xb6\\xd3\\xc3 Python&#39;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mybytes01<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;UTF-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mybytes01<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;GB2312&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mybytes02<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;GB2312&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mybytes03<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;GBK&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
我喜欢用 Python
UnicodeDecodeError<span class="token punctuation">:</span> <span class="token string">&#39;gb2312&#39;</span> codec can&#39;t decode byte <span class="token number">0xe6</span> <span class="token keyword">in</span> position <span class="token number">0</span><span class="token punctuation">:</span> illegal multibyte sequence。GB2312 解码器无法解码
我喜欢用 Python
我喜欢用 Python
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,144),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","strings.html.vue"]]);export{d as default};
