import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as l,b as n,e as s,d as t,f as e}from"./app-09c8ddb8.js";const i={},r=n("p",null,"Python 内置和第三方模块的使用。",-1),u=n("h2",{id:"内置模块",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#内置模块","aria-hidden":"true"},"#"),s(" 内置模块")],-1),d=n("h3",{id:"random",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#random","aria-hidden":"true"},"#"),s(" random")],-1),k={href:"https://docs.python.org/zh-cn/3/library/random.html#module-random",target:"_blank",rel:"noopener noreferrer"},m=e(`<p><code>random</code> 内置模块，用于生成随机数。</p><ul><li><strong>random.random()</strong>：返回随机生成的浮点数，范围在 <code>[0, 1]</code> 之间（不包括结束数字 <code>1</code>）</li><li><strong>random.uniform(a, b)</strong>：返回随机生成的一个浮点数，范围在 <code>[a, b]</code> 之间（不包括结束数字 <code>b</code>）</li><li><strong>random.randint(a, b)</strong>：生成指定范围内的整数，范围在 <code>[a, b]</code> 之间（包括开始数字 <code>a</code> 和结束数字 <code>b</code>）</li><li><strong>random.randrange(a, b)</strong>：生成指定范围内的整数，范围在 <code>[a, b]</code> 之间（包括开始数字 <code>a</code>，不包括结束数字 <code>b</code>）</li><li><strong>random.seed(a)</strong>：用于固定随机生成的字符，<code>a</code> 可以是 str、bytes、float、int、bytearray</li><li><strong>random.choice()</strong>：从指定序列中获取一个随机元素</li><li><strong>random.sample(sequence, k)</strong>：用于从指定序列中随机获取指定长度的片段，<code>sample()</code> 函数不会修改原有序列，<code>sequence</code> 指定序列，<code>k</code> 指定要输出元素的个数</li></ul><p>例如：显示 1 到 100 之间的一个随机数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random

<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0.201879620585662</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：7.9777317888163894</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：8</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：4</span>

random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token string">&quot;af&quot;</span><span class="token punctuation">)</span>
x <span class="token operator">=</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0.26588175145144166</span>

random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0.5714025946899135</span>

random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
z <span class="token operator">=</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0.5714025946899135</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token string">&#39;Hello, World!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：r</span>


mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>mylist<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="keyword" tabindex="-1"><a class="header-anchor" href="#keyword" aria-hidden="true">#</a> keyword</h3>`,5),g={href:"https://docs.python.org/zh-cn/3/library/keyword.html#module-keyword",target:"_blank",rel:"noopener noreferrer"},b=e(`<p><code>keyword</code> 内置模块，用于返回 Python 中所有关键字的列表，避免变量名冲突。</p><ul><li><strong>keyword.kwlist</strong>：返回 Python 中所有关键字列表</li><li><strong>keyword.iskeyword(&quot;variable&quot;)</strong>：判断变量名是否为内置关键字</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> keyword

<span class="token keyword">print</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">)</span>  <span class="token comment"># 返回所有关键字</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>iskeyword<span class="token punctuation">(</span><span class="token string">&quot;break&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 判断给定的变量名是否为内置关键字</span>


<span class="token comment"># 输出结果</span>
<span class="token punctuation">[</span><span class="token string">&#39;False&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;None&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;True&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;and&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;as&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;assert&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;async&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;await&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;break&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;class&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;continue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;def&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;del&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;elif&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;else&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;except&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;finally&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;for&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;from&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;global&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;if&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;import&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;in&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;is&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lambda&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nonlocal&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;not&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;or&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pass&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;raise&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;return&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;try&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;while&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;with&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;yield&#39;</span><span class="token punctuation">]</span>
<span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="datetime" tabindex="-1"><a class="header-anchor" href="#datetime" aria-hidden="true">#</a> datetime</h3>`,4),v={href:"https://docs.python.org/zh-cn/3/library/datetime.html#module-datetime",target:"_blank",rel:"noopener noreferrer"},h=e(`<p><code>datetime</code> 内置模块，用于获取日期时间。</p><ul><li><strong>datetime.date(year, month, day)</strong>：用于指定日期</li><li><strong>datetime.date.today()</strong>：用于获取当前日期</li><li><strong>datetime.date.fromtimestamp(timestamp)</strong>：<code>timestamp</code> 是时间戳，返回 <strong>年-月-日</strong></li><li><strong>datetime.date.fromordinal(ordinal)</strong>：<code>ordinal</code> 是对应于预期格列高利历序号的日期，其中公元 1 年 1 月 1 日的序号为 1，返回 <strong>年-月-日</strong></li><li><strong>datetime.date.fromisoformat(date_string)</strong>：<code>date_string</code> 是日期字符串，返回 <strong>年-月-日</strong></li><li><strong>datetime.date.fromisocalendar(year, week, day)</strong>：返回 <strong>年-月-日</strong></li><li><strong>datetime.date.replace([year=year[, month=month[, day=day]]])</strong>：修改为指定 <strong>年-月-日</strong></li><li><strong>datetime.date.timetuple()</strong>：将获取的当前日期转换为元组对象</li><li><strong>datetime.date.toordinal()</strong>：将获取的当前日期转换为预期格列高利历序号的日期</li><li><strong>datetime.date.weekday()</strong>：用于从当前日期对象中获取星期。值为 <code>0-6</code> 中的一个，<code>0</code> 为周一，<code>1</code> 为周二，以此类推</li><li><strong>datetime.date.isoweekday()</strong>：用于从当前日期对象中获取星期。值为 <code>1-7</code> 中的一个，<code>1</code> 为周一，<code>2</code> 为周二，以此类推</li><li><strong>datetime.date.isocalendar()</strong>：把日期对象返回一个带有年月日的元组</li><li><strong>datetime.date.isoformat()</strong>：将获取的当前日期转换为字符串</li><li><strong>datetime.datetime(year, month, day[, hour[, minute[, second[, microsecond[, tzinfo]]]]])</strong>：用于指定日期时间</li><li><strong>datetime.datetime.today()</strong>：用于获取当前日期和时间</li><li><strong>datetime.datetime.now()</strong>：用于获取当前日期和时间</li><li><strong>datetime.datetime.now().weekday()</strong>：用于从当前日期对象中获取星期。值为 <code>0-6</code> 中的一个，<code>0</code> 为周一，<code>1</code> 为周二，以此类推</li><li><strong>datetime.datetime.now().date()</strong>：用于从当前日期对象中获取年月日</li><li><strong>datetime.datetime.now().day</strong>：用于从当前日期对象中获取日</li><li><strong>datetime.datetime.strptime(&#39;2014-03-16 12:21:21&#39;, &#39;%Y-%m-%d %H:%M:%S&#39;)</strong>：将字符串转为 datetime 对象</li><li><strong>datetime.datetime.strftime(datetime.datetime.now(), &#39;%Y-%m-%d %H:%M:%S&#39;)</strong>：将 datetime 对象转换为 str 表示形式</li><li><strong>datetime.time(hour[, minute[, second[, microsecond[, tzinfo]]]])</strong>：用于指定时间</li><li><strong>datetime.timedelta([days[, second[, microsecond[, milliseconds[, minute[, hour[, weeks]]]]]]])</strong>：用于计算时间跨度</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> datetime

<span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2022-11-04</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2022-11-04</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span><span class="token number">1672196826.5001976</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2022-12-28</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>fromordinal<span class="token punctuation">(</span><span class="token number">738517</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2022-12-28</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>fromisoformat<span class="token punctuation">(</span><span class="token string">&#39;2022-12-28&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2022-12-28</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>fromisocalendar<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2022-12-28</span>

mydate <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mydate<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>year<span class="token operator">=</span><span class="token number">2023</span><span class="token punctuation">,</span> month<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> day<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2023-1-23</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mydate<span class="token punctuation">.</span>timetuple<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：time.struct_time(tm_year=2022, tm_mon=12, tm_mday=28, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=2, tm_yday=362, tm_isdst=-1)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mydate<span class="token punctuation">.</span>toordinal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：738517</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mydate<span class="token punctuation">.</span>weekday<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mydate<span class="token punctuation">.</span>isoweekday<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mydate<span class="token punctuation">.</span>isocalendar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：datetime.IsoCalendarDate(year=2022, week=52, weekday=3)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mydate<span class="token punctuation">.</span>isoformat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2022-12-28</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2022-11-04 00:00:00</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2022-11-15 13:42:00.713318</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2022-10-27 11:27:10.632539</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>weekday<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2022-10-27</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>day<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：27</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">&#39;2022-12-28 12:21:21&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;%Y-%m-%d %H:%M:%S&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2022-12-28 12:21:21</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;%Y-%m-%d %H:%M:%S&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2022-12-28 14:16:20</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：09:15:30</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2022-11-12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="time" tabindex="-1"><a class="header-anchor" href="#time" aria-hidden="true">#</a> time</h3>`,5),y={href:"https://docs.python.org/zh-cn/3/library/time.html#module-time",target:"_blank",rel:"noopener noreferrer"},f=e(`<p><code>time</code> 内置模块，用于返回当前时间。</p><ul><li><strong>time.asctime()</strong>：返回时间字符串。如：Wed Dec 28 14:21:02 2022 形式</li><li><strong>time.gmtime()</strong>：返回当前 UTC 时间转换为元组对象</li><li><strong>time.localtime</strong>：返回当前时间转换为元组对象</li><li><strong>time.mktime(timetuple)</strong>：将 <code>datetime</code> 元组对象转为时间戳</li><li><strong>time.perf_counter()</strong>：以小数表示的秒为单位，返回一个性能计数器的值，即用于测量较短持续时间的具有最高有效精度的时钟。它会包括睡眠状态所消耗的时间并且作用于全系统范围。返回值的参考点未被定义，因此只有两次调用之间的差值才是有效的</li><li><strong>time.sleep()</strong>：在给定的秒数内暂停调用线程的执行。参数可以是一个浮点数，以指示更精确的睡眠时间</li><li><strong>time.time()</strong>：当前时间戳</li><li><strong>time.strftime(format[, t])</strong>：将 <code>time</code> 对象转换为 <code>str</code> 表示形式。<code>format</code> 参数指定的字符串；<code>t</code> 默认为 <code>localtime()</code> 返回的当前时间</li></ul><p><strong>format 参数指定字符串：</strong></p><table><thead><tr><th style="text-align:center;">参数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>%a</strong></td><td style="text-align:left;">缩写星期名称。例如：Wed</td></tr><tr><td style="text-align:center;"><strong>%A</strong></td><td style="text-align:left;">完整星期名称。例如：Wednesday</td></tr><tr><td style="text-align:center;"><strong>%b</strong></td><td style="text-align:left;">缩写月名称。例如：Dec</td></tr><tr><td style="text-align:center;"><strong>%B</strong></td><td style="text-align:left;">完整月名称。例如：December</td></tr><tr><td style="text-align:center;"><strong>%c</strong></td><td style="text-align:left;">日期和时间表示。例如：Wed Dec 28 15:00:36 2022</td></tr><tr><td style="text-align:center;"><strong>%d</strong></td><td style="text-align:left;">十进制数 [01,31] 表示的月中日。例如：28</td></tr><tr><td style="text-align:center;"><strong>%H</strong></td><td style="text-align:left;">十进制数 [00,23] 表示的小时（24小时制）。例如：15</td></tr><tr><td style="text-align:center;"><strong>%I</strong></td><td style="text-align:left;">十进制数 [01,12] 表示的小时（12小时制）。例如：03</td></tr><tr><td style="text-align:center;"><strong>%j</strong></td><td style="text-align:left;">十进制数 [001,366] 表示的年中日。例如：362</td></tr><tr><td style="text-align:center;"><strong>%m</strong></td><td style="text-align:left;">十进制数 [01,12] 表示的月。例如：12</td></tr><tr><td style="text-align:center;"><strong>%M</strong></td><td style="text-align:left;">十进制数 [00,59] 表示的分钟。例如：00</td></tr><tr><td style="text-align:center;"><strong>%p</strong></td><td style="text-align:left;">本地化的 <code>AM</code> 或 <code>PM</code>。例如：PH</td></tr><tr><td style="text-align:center;"><strong>%S</strong></td><td style="text-align:left;">十进制数 [00,61] 表示的秒。例如：36</td></tr><tr><td style="text-align:center;"><strong>%U</strong></td><td style="text-align:left;">十进制数 [00,53] 表示的一年中的周数（星期日作为一周的第一天）。在第一个星期日之前的新年中的所有日子都被认为是在第 <code>0</code> 周。例如：52</td></tr><tr><td style="text-align:center;"><strong>%w</strong></td><td style="text-align:left;">十进制数 [0（星期日）,6] 表示的周中日。例如：3</td></tr><tr><td style="text-align:center;"><strong>%W</strong></td><td style="text-align:left;">十进制数 [00,53] 表示的一年中的周数（星期一作为一周的第一天）。在第一个星期一之前的新年中的所有日子被认为是在第 <code>0</code> 周。例如：52</td></tr><tr><td style="text-align:center;"><strong>%x</strong></td><td style="text-align:left;">本地化的适当日期表示。例如：12/28/22</td></tr><tr><td style="text-align:center;"><strong>%X</strong></td><td style="text-align:left;">本地化的适当时间表示。例如：15:00:36</td></tr><tr><td style="text-align:center;"><strong>%y</strong></td><td style="text-align:left;">十进制数 [00,99] 表示的没有世纪的年份。例如：22</td></tr><tr><td style="text-align:center;"><strong>%Y</strong></td><td style="text-align:left;">十进制数表示的带世纪的年份。例如：2022</td></tr><tr><td style="text-align:center;"><strong>%z</strong></td><td style="text-align:left;">时区偏移以格式 <code>+HHMM</code> 或 <code>-HHMM</code> 形式的 <code>UTC/GMT</code> 的正或负时差指示，其中 <code>H</code> 表示十进制小时数字，<code>M</code> 表示小数分钟数字 [-23:59, +23:59]。例如：<code>+0800</code></td></tr><tr><td style="text-align:center;"><strong>%Z</strong></td><td style="text-align:left;">时区名称（如果不存在时区，则不包含字符），已弃用。例如：中国标准时间</td></tr><tr><td style="text-align:center;"><strong>%%</strong></td><td style="text-align:left;">字面的 <code>%</code> 字符。例如：%</td></tr></tbody></table><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：Wed Dec 28 14:21:02 2022</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>gmtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：time.struct_time(tm_year=2022, tm_mon=12, tm_mday=28, tm_hour=6, tm_min=29, tm_sec=1, tm_wday=2, tm_yday=362, tm_isdst=0)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：time.struct_time(tm_year=2022, tm_mon=12, tm_mday=28, tm_hour=14, tm_min=31, tm_sec=1, tm_wday=2, tm_yday=362, tm_isdst=0)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>mktime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：1672209845.0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：187313.1646997</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：1672209877.5045297</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%Y-%m-%d %H:%M:%S&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2022-12-28 14:54:22</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="re" tabindex="-1"><a class="header-anchor" href="#re" aria-hidden="true">#</a> re</h3>`,7),_={href:"https://docs.python.org/zh-cn/3/library/re.html#module-re",target:"_blank",rel:"noopener noreferrer"},w=e(`<p><code>re</code> 内置模块，用于通过正则表达式对字符串进⾏匹配、替换、分割等。</p><ul><li><p><strong>re.match(pattern, string[, flags])</strong>：用于从字符串的开始处进行匹配。如果在开始位置匹配成功则返回 Match 对象，否则返回 None</p></li><li><p><strong>re.search(pattern, string[, flags])</strong>：用于在整个字符串中搜索第一个匹配的值。如果在起始位置匹配成功则返回 Match 对象，否则返回 None</p></li><li><p><strong>re.findall(pattern, string[, flags])</strong>：用于在整个字符串中搜索所有符合正则表达式的字符串，并以列表的形式返回。如果匹配成功，则返回包含匹配结构的列表，否则返回空列表</p><ul><li><strong>pattern</strong>：表示模式字符串</li><li><strong>string</strong>：表示要匹配的字符串</li><li><strong>flags</strong>：表示标志位，用于控制匹配方式。如：是否区分字母大小写</li></ul></li><li><p><strong>re.sub(pattern, repl, string[, count[, flags]])</strong>：用于替换字符串</p><ul><li><strong>pattern</strong>：表示模式字符串</li><li><strong>repl</strong>：表示替换的字符串</li><li><strong>string</strong>：表示要被查找替换的原始字符串</li><li><strong>count</strong>：表示模式匹配后替换的最大次数，默认为 0 表示替换所有的匹配</li><li><strong>flags</strong>：表示标志位，用于控制匹配方式</li></ul></li><li><p><strong>re.split(pattern, string[, maxsplit[, flags]])</strong>：用于实现根据正则表达式分割字符串，并以列表的形式返回</p><ul><li><strong>pattern</strong>：表示模式字符串</li><li><strong>string</strong>：表示要匹配的字符串</li><li><strong>maxsplit</strong>：表示最大的拆分次数</li><li><strong>flags</strong>：表示标志位，用于控制匹配方式</li></ul></li></ul><p><strong>正则表达式：</strong></p><table><thead><tr><th style="text-align:center;">特殊字符</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>.</strong></td><td style="text-align:left;">匹配除换行符以外的任意字符。例如：<code>.</code> 在 <code>mr\\nM\\tR</code> 中匹配 <code>m</code>、<code>r</code>、<code>M</code>、<code>\\t</code>、<code>R</code></td></tr><tr><td style="text-align:center;"><strong>^</strong></td><td style="text-align:left;">表示行的开始。例如：<code>^H</code>，表示匹配以 <code>H</code> 字符开头的行</td></tr><tr><td style="text-align:center;"><strong>$</strong></td><td style="text-align:left;">表示行的结尾。例如：<code>!$</code>，表示匹配以 <code>!</code> 号结尾的行</td></tr><tr><td style="text-align:center;"><strong>?</strong></td><td style="text-align:left;">匹配前面的字符零次或一次。例如：<code>colou?r</code> 可以匹配 <code>colour</code>、<code>color</code></td></tr><tr><td style="text-align:center;"><strong>+</strong></td><td style="text-align:left;">匹配前面的字符一次或多次。例如：<code>colou+r</code> 可以匹配 <code>colour</code>、<code>colouu...ur</code></td></tr><tr><td style="text-align:center;"><strong>*</strong></td><td style="text-align:left;">匹配前面的字符零次或多次。例如：<code>colou*r</code> 可以匹配 <code>color</code>、<code>colouu...ur</code></td></tr><tr><td style="text-align:center;"><strong>{n}</strong></td><td style="text-align:left;">匹配前面的字符 n 次。例如：<code>colou{2}r</code> 可以匹配 <code>colouur</code></td></tr><tr><td style="text-align:center;"><strong>{n,}</strong></td><td style="text-align:left;">匹配前面的字符最少 n 次。例如：<code>colou{2,}r</code> 可以匹配 <code>colouur</code>、<code>colouu...ur</code></td></tr><tr><td style="text-align:center;"><strong>{n,m}</strong></td><td style="text-align:left;">匹配前面的字符最少 n 次，最多 m 次。例如：<code>colou{2,4}r</code> 可以匹配 <code>colouur</code>、<code>colouuur</code>、<code>colouuuur</code></td></tr><tr><td style="text-align:center;"><strong>\\</strong></td><td style="text-align:left;">表示在匹配指定字符时将特殊字符以普通字符匹配。例如：<code>[0-9]\\\\.[0-9]</code> 在 <code>12.34</code> 中匹配 <code>2.3</code></td></tr><tr><td style="text-align:center;"><strong>[]</strong></td><td style="text-align:left;">表示匹配指定字符。例如：<code>[bc]</code> 在 <code>abcd</code> 中匹配 <code>b</code>、<code>c</code></td></tr><tr><td style="text-align:center;"><strong>[^]</strong></td><td style="text-align:left;">将 <code>^</code> 放到 <code>[]</code> 里面表示不匹配指定字符。例如：<code>[^a]</code> 在 <code>abcd</code> 中匹配 <code>b</code>、<code>c</code>、<code>d</code></td></tr><tr><td style="text-align:center;"><strong>|</strong></td><td style="text-align:left;">从左到右进行匹配。例如：\`b</td></tr><tr><td style="text-align:center;"><strong>()</strong></td><td style="text-align:left;">第一个作用：可以改变限定符的作用范围，如：\`</td></tr><tr><td style="text-align:center;"><strong>\\A</strong></td><td style="text-align:left;">只匹配字符串开始。例如：<code>\\Aa</code> 在 <code>abcd1234ABCD</code> 中匹配 <code>a</code></td></tr><tr><td style="text-align:center;"><strong>\\b</strong></td><td style="text-align:left;">匹配空字符串，但只在单词的开始或结束，单词的分界符通常是空格，标点符号或者换行。例如：<code>\\bm</code> 在 <code>mr\\nM\\tRm</code> 中匹配 <code>m</code></td></tr><tr><td style="text-align:center;"><strong>\\B</strong></td><td style="text-align:left;">匹配空字符串，但不能在单词的开始或结束。例如：<code>\\Bm</code> 在 <code>r\\nM\\tRm</code> 中匹配 <code>m</code></td></tr><tr><td style="text-align:center;"><strong>\\d</strong></td><td style="text-align:left;">匹配数字。例如：<code>\\d</code> 在 <code>m_af\\n7在</code> 中匹配 <code>7</code></td></tr><tr><td style="text-align:center;"><strong>\\D</strong></td><td style="text-align:left;">匹配非数字。例如：<code>\\D</code> 在 <code>m_af\\n7在</code> 中匹配 <code>m</code>、<code>_</code>、<code>a</code>、<code>f</code>、<code>\\n</code></td></tr><tr><td style="text-align:center;"><strong>\\s</strong></td><td style="text-align:left;">匹配空白符（包括 Tab 键和换行符）。例如：<code>\\s</code> 在 <code>mr\\nM\\tR</code> 中匹配 <code>\\n</code>、<code>\\t</code></td></tr><tr><td style="text-align:center;"><strong>\\S</strong></td><td style="text-align:left;">匹配非空白符（包括 Tab 键和换行符）以外的所有字符。例如：<code>\\S</code> 在 <code>mr\\nM\\tR</code> 中匹配 <code>m</code>、<code>r</code>、<code>M</code>、<code>R</code></td></tr><tr><td style="text-align:center;"><strong>\\w</strong></td><td style="text-align:left;">匹配字母、数字、下划线和汉字。例如：<code>\\w</code> 在 <code>m_af\\n7在</code> 中匹配 <code>m</code>、<code>_</code>、<code>a</code>、<code>f</code>、<code>7</code>、<code>在</code></td></tr><tr><td style="text-align:center;"><strong>\\W</strong></td><td style="text-align:left;">匹配除字母、数字、下划线和汉字以外的字符。例如：<code>\\W</code> 在 <code>m_af\\n7在</code> 中匹配 <code>\\n</code></td></tr><tr><td style="text-align:center;"><strong>\\Z</strong></td><td style="text-align:left;">匹配字符串结尾。例如：<code>在\\Z</code> 在 <code>m_af\\n7在</code> 中匹配 <code>在</code></td></tr></tbody></table><p><strong>标志：</strong></p><table><thead><tr><th style="text-align:center;">标志</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>re.A</strong> 或 <strong>re.ASCII</strong></td><td style="text-align:left;">对于 <code>\\w</code>、<code>\\W</code>、<code>\\b</code>、<code>\\B</code>、<code>\\d</code>、<code>\\D</code>、<code>\\s</code> 和 <code>\\S</code> 只进行 ASCII 匹配</td></tr><tr><td style="text-align:center;"><strong>re.I</strong> 或 <strong>re.IGNORECASE</strong></td><td style="text-align:left;">执行不区分字母大小写的匹配</td></tr><tr><td style="text-align:center;"><strong>re.M</strong> 或 <strong>re.MULTILINE</strong></td><td style="text-align:left;">将 <code>^</code> 和 <code>$</code> 用于包括整个字符串的开始和结尾的每一行（默认情况下，仅适用于整个字符串的开始和结尾处）</td></tr><tr><td style="text-align:center;"><strong>re.S</strong> 或 <strong>re.DOTALL</strong></td><td style="text-align:left;">使用（<code>.</code>）字符匹配所有字符，包括换行符</td></tr><tr><td style="text-align:center;"><strong>re.X</strong> 或 <strong>re.VERBOSE</strong></td><td style="text-align:left;">忽略模式字符串中未转义的空格和注释</td></tr></tbody></table><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re

pattern <span class="token operator">=</span> <span class="token string">r&#39;Hel\\w+&#39;</span>
mystr <span class="token operator">=</span> <span class="token string">&#39;Hello, World! Hello, Python!&#39;</span>
<span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> mystr<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;re.Match object; span=(0, 5), match=&#39;Hello&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;匹配值的起始位置：&quot;</span><span class="token punctuation">,</span> <span class="token keyword">match</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：匹配值的起始位置： 0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;匹配值的结束位置：&quot;</span><span class="token punctuation">,</span> <span class="token keyword">match</span><span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：匹配值的结束位置： 5</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;匹配值的元组：&quot;</span><span class="token punctuation">,</span> <span class="token keyword">match</span><span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：匹配值的元组： (0, 5)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;要匹配的字符串：&quot;</span><span class="token punctuation">,</span> <span class="token keyword">match</span><span class="token punctuation">.</span>string<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：要匹配的字符串： Hello, World! Hello, Python!</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;匹配数据：&quot;</span><span class="token punctuation">,</span> <span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：匹配数据： Hello</span>


pattern <span class="token operator">=</span> <span class="token string">r&#39;hel\\w+&#39;</span>
mystr <span class="token operator">=</span> <span class="token string">&#39;Hello, World! Hello, Python!&#39;</span>
mystr01 <span class="token operator">=</span> <span class="token string">&#39;World! Hello Hello, Python!&#39;</span>
<span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> mystr<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>
match01 <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> mystr01<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;re.Match object; span=(0, 5), match=&#39;Hello&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>match01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;re.Match object; span=(7, 12), match=&#39;Hello&#39;&gt;</span>


pattern <span class="token operator">=</span> <span class="token string">r&#39;hel\\w+&#39;</span>
mystr <span class="token operator">=</span> <span class="token string">&#39;Hello, World! Hello, Python!&#39;</span>
mystr01 <span class="token operator">=</span> <span class="token string">&#39;World! Hello Hello, Python!&#39;</span>
<span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> mystr<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>
match01 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> mystr01<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;Hello&#39;, &#39;Hello&#39;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>match01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;Hello&#39;, &#39;Hello&#39;]</span>


pattern <span class="token operator">=</span> <span class="token string">r&#39;1[34578]\\d{9}&#39;</span>
mystr <span class="token operator">=</span> <span class="token string">&quot;中奖号码为 4568，联系电话为：13645238965&quot;</span>
result <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token string">&#39;136xxxxxxxx&#39;</span><span class="token punctuation">,</span> mystr<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：中奖号码为 4568，联系电话为：136xxxxxxxx</span>


pattern <span class="token operator">=</span> <span class="token string">r&#39;[?|&amp;]&#39;</span>
url <span class="token operator">=</span> <span class="token string">&#39;asfa?fdgsdg&amp;agg&#39;</span>
result <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> url<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;asfa&#39;, &#39;fdgsdg&#39;, &#39;agg&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="decimal" tabindex="-1"><a class="header-anchor" href="#decimal" aria-hidden="true">#</a> decimal</h3>`,9),x={href:"https://docs.python.org/zh-cn/3/library/decimal.html#module-decimal",target:"_blank",rel:"noopener noreferrer"},q=e(`<p><code>decimal</code> 内置模块，用于完全精确的十进制定点和浮点运算。</p><p>该模块的设计以三个概念为中心：<code>decimal</code> 数值、算术上下文和信号。</p><p><strong>decimal 数值</strong>：是不可变对象。它由符号，系数和指数位组成。为了保持有效位，系数位不会截去末尾零。<code>decimal</code> 数值也包括特殊值例如：<code>Infinity</code>、<code>-Infinity</code> 和 <code>NaN</code>。该标准还区分 <code>-0</code> 和 <code>+0</code>。</p><p><strong>算术的上下文</strong>：是指定精度、舍入规则、指数限制、指示操作结果的标志以及确定符号是否被视为异常的陷阱启用器的环境。<strong>舍入选项包括</strong>：<code>ROUND_CEILING</code>、<code>ROUND_DOWN</code>、<code>ROUND_FLOOR</code>、<code>ROUND_HALF_DOWN</code>、<code>ROUND_HALF_EVEN</code>、<code>ROUND_HALF_UP</code>、<code>ROUND_UP</code> 以及 <code>ROUND_05UP</code>。</p><p><strong>信号</strong>：是在计算过程中出现的异常条件组。十进制模块中的信号有：<code>Clamped</code>、<code>InvalidOperation</code>、<code>DivisionByZero</code>、<code>Inexact</code>、<code>Rounded</code>、<code>Subnormal</code>、<code>Overflow</code>、<code>Underflow</code> 以及 <code>FloatOperation</code>。</p><p>对于每个信号，都有一个标志和一个陷阱启动器。遇到信号时，其标志设置为 <code>1</code>，如果陷阱启用器设置为 1，则引发异常。标志是粘性的，因此用户需要在监控计算之前重置它们。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>上下文精度和舍入仅在算术运算期间发挥作用</p></div><ul><li><strong>decimal.Decimal(obejct)</strong>：可以基于整数、字符串、浮点数或元组构造 Decimal 实例，Decimal 数字包括特殊值。例如：<code>NaN</code> 表示 “非数字”，正的和负的 <code>Infinity</code> 和 <code>-0</code></li><li><strong>getcontext().prec</strong>：设定有效数字</li><li><strong>decimal.Decimal(obejct).quantize(exp[, rounding=None[, context=None]])</strong>：将数字舍入为固定指数。此方法对于将结果舍入到固定的位置的货币应用程序非常有用</li></ul><p><strong>舍入模式：</strong></p><table><thead><tr><th style="text-align:center;">模式</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>decimal.ROUND_CEILING</strong></td><td style="text-align:left;">舍入方向为正无穷大。如果为正数，保留位最后一位为 <code>0~9</code>，且保留位的后一位是 <code>0</code> 不进位，<code>1~9</code> 均进位；如果为负数，保留位最后一位为 <code>0~9</code>，且保留位的后一位为 <code>0~9</code> 均不进位</td></tr><tr><td style="text-align:center;"><strong>decimal.ROUND_DOWN</strong></td><td style="text-align:left;">舍入方向为零。保留位最后一位为 <code>0~9</code>，且保留位的后一位为 <code>0~9</code> 均不进位</td></tr><tr><td style="text-align:center;"><strong>decimal.ROUND_FLOOR</strong></td><td style="text-align:left;">舍入方向为负无穷大。如果为正数，保留位最后一位为 <code>0~9</code>，且保留位的后一位为 <code>0~9</code> 均不进位；如果为负数，保留位最后一位为 <code>0~9</code>，且保留位的后一位是 <code>0</code> 不进位，<code>1~9</code> 均进位</td></tr><tr><td style="text-align:center;"><strong>decimal.ROUND_HALF_DOWN</strong></td><td style="text-align:left;">舍入到最接近的数，同样接近则舍入方向为零。保留位最后一位为 <code>0~9</code>，且保留位的后一位为 <code>0~5</code> 均不进位，<code>6~9</code> 均进位</td></tr><tr><td style="text-align:center;"><strong>decimal.ROUND_HALF_EVEN</strong></td><td style="text-align:left;">舍入到最接近的数，同样接近则舍入到最接近的偶数。如果保留位最后一位为偶数，且保留位的后一位为 <code>0~4</code> 均不进位，<code>5~9</code> 均进位；如果保留位最后一位为奇数，且保留位的后一位为 <code>0~4</code> 均不进位，<code>5~9</code> 均进位</td></tr><tr><td style="text-align:center;"><strong>decimal.ROUND_HALF_UP</strong></td><td style="text-align:left;">舍入到最接近的数，同样接近则舍入到零的反方向。保留位最后一位为 <code>0~9</code>，且保留位的后一位为 <code>0~4</code> 均不进位，<code>5~9</code> 均进位</td></tr><tr><td style="text-align:center;"><strong>decimal.ROUND_UP</strong></td><td style="text-align:left;">舍入到零的反方向。保留位最后一位为 <code>0~9</code>，且保留位的后一位是 <code>0</code> 不进位；<code>1~9</code> 均进位</td></tr><tr><td style="text-align:center;"><strong>decimal.ROUND_05UP</strong></td><td style="text-align:left;">如果最后一位朝零的方向舍入后为 <code>0</code> 或 <code>5</code> 则舍入到零的反方向；否则舍入方向为零。如果保留位最后一位为 <code>0</code> 或 <code>5</code>，且保留位的后一位为 <code>0</code> 不进位，为 <code>1~9</code> 均进位；如果保留位最后一位为 <code>1~4</code> 或 <code>6~9</code>，且保留位的后一位为 <code>0~9</code> 均不进位</td></tr></tbody></table><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> decimal <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">&#39;3.14654&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：3.14654</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：3.140000000000000124344978758017532527446746826171875</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span> <span class="token operator">+</span> Decimal<span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：4.399999999999999911182158030</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token number">1.1</span> <span class="token operator">+</span> <span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：4.4000000000000003552713678800500929355621337890625</span>


getcontext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>prec <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span> <span class="token operator">/</span> Decimal<span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0.33</span>


<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span> <span class="token operator">/</span> Decimal<span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>quantize<span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">&#39;0.00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0.33</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>quantize<span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">&#39;0.00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：1.10</span>


<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">&#39;1.23465689&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>quantize<span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">&#39;0.00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：1.23</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>decimal<span class="token punctuation">.</span>Decimal<span class="token punctuation">(</span><span class="token string">&#39;3.1490&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>quantize<span class="token punctuation">(</span>decimal<span class="token punctuation">.</span>Decimal<span class="token punctuation">(</span><span class="token string">&#39;0.000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> decimal<span class="token punctuation">.</span>ROUND_CEILING<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：3.149</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="math" tabindex="-1"><a class="header-anchor" href="#math" aria-hidden="true">#</a> math</h3>`,13),N={href:"https://docs.python.org/zh-cn/3/library/math.html#module-math",target:"_blank",rel:"noopener noreferrer"},T=e(`<p><code>math</code> 内置模块，用于解决数学中的运算，提供了内置数学类函数库，因为复数类型常用于科学计算，一般计算并不常用，因此 <code>math</code> 库不支持复数类型，仅支持整数和浮点数运算。</p><ul><li><strong>math.ceil(x)</strong>：返回大于或等于 x 最小整数</li><li><strong>math.flool(x)</strong>：返回小于或等于 x 最大整数</li><li><strong>math.pi</strong>：圆周率，数学常数 <code>π = 3.141592...</code>，精确到 15 位</li><li><strong>math.sqrt(x)</strong>：返回 x 的平方根</li><li><strong>math.pow(x, y)</strong>：返回 x 的 y 次幂的值</li><li><strong>math.log(x[, base])</strong>：返回以 base 为底的 x 对数，若省略底数 base，则计算 x 自然对数</li><li><strong>math.sin(x)</strong>：返回弧度 x 的三角正弦</li><li><strong>math.cos(x)</strong>：返回弧度 x 的三角余弦</li><li><strong>math.tan(x)</strong>：返回弧度 x 的三角正切</li><li><strong>math.degrees(x)</strong>：将弧度 x 转换为角度</li><li><strong>math.radians(x)</strong>：将角度 x 转换为弧度</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> math

<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：3.141592653589793</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：-2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：-3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：125.0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：3.0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：3.0000000000000004</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：4.8283137373023015</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>degrees<span class="token punctuation">(</span><span class="token number">0.5</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：90.0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>radians<span class="token punctuation">(</span><span class="token number">180</span> <span class="token operator">/</span> math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：1.0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0.8414709848078965</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0.5403023058681398</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：1.5574077246549023</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="functools" tabindex="-1"><a class="header-anchor" href="#functools" aria-hidden="true">#</a> functools</h3>`,5),P={href:"https://docs.python.org/zh-cn/3/library/functools.html#module-functools",target:"_blank",rel:"noopener noreferrer"},S=e(`<p><code>functools</code> 内置模块，用于高阶函数，即参数或返回值为其他函数的函数。通常来说，此模块的功能适用于所有可调用对象。</p><ul><li><strong>@functools.cache(user_function)</strong>：简单轻量级未绑定函数缓存，有时称为 <code>memoize</code>。返回值与 <code>lru_cache(maxsize=None)</code> 相同，创建一个查找函数参数的字典的简单包装器。因为它不需要移出旧值，所以比带有大小限制的 <code>lru_cache()</code> 更小更快</li><li><strong>functools.cmp_to_key(func)</strong>：将旧式的比较函数转换为新式的 <code>key</code> 函数。在类似于 <code>sort()</code>、<code>sorted()</code>、<code>min()</code>、<code>max()</code>、<code>heapq.nlargest()</code>、<code>heapq.nsmallest()</code>、<code>itertools.groupby()</code> 等函数的 <code>key</code> 参数中使用</li><li><strong>@functools.lru_cache(maxsize=128, typed=False)</strong>：一个为函数提供缓存功能的装饰器，缓存 <code>maxsize</code> 组传入参数，在下次以相同参数调用时直接返回上一次的结果。用以节约高开销或 <code>I/O</code> 函数的调用时间。如果 <code>typed</code> 被设置为 <code>true</code>，不同类型的函数参数将被分别缓存。如果 <code>typed</code> 为 <code>false</code>，通常会将它们视为等价的调用，只缓存一个结果</li><li><strong>functools.partial(func, *args, **keywords)</strong>：返回一个新的部分对象，当被调用时其行为类似于 <code>func</code> 附带位置参数 <code>args</code> 和关键字参数 <code>keywords</code> 被调用</li><li><strong>functools.partialmethod(func, *args, **keywords)</strong>：返回一个新的 <code>partialmethod</code> 描述器，其行为类似 <code>partial</code> 但它被设计用作方法定义而非直接用作可调用对象</li><li><strong>functools.reduce(function, iterable[, initializer])</strong>：将两个参数的 <code>function</code> 从左至右积累地应用到 <code>iterable</code> 的条目，以便将该可迭代对象缩减为单一的值</li><li><strong>@functools.singledispatch</strong>：将一个函数转换为单分派 <code>generic function</code>。要定义一个泛型函数，用装饰器 <code>@singledispatch</code> 来装饰它</li><li><strong>functools.update_wrapper(wrapper, wrapped, *, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)</strong>：更新一个 <code>wrapper</code> 函数以使其类似于 <code>wrapped</code> 函数。可选参数为指明原函数的哪些属性要直接被赋值给 <code>wrapper</code> 函数的匹配属性的元组，并且这些 <code>wrapper</code> 函数的属性将使用原函数的对应属性来更新</li><li><strong>@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)</strong>：这是一个便捷函数，用于在定义包装器函数时发起调用 <code>update_wrapper()</code> 作为函数装饰器</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> functools

x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;worl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ni&#39;</span><span class="token punctuation">]</span>
x<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;ni&#39;, &#39;worl&#39;, &#39;hello&#39;]</span>


int2 <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>int2<span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：83</span>


my_sum <span class="token operator">=</span> functools<span class="token punctuation">.</span><span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token operator">+</span>y<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>my_sum<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sys" tabindex="-1"><a class="header-anchor" href="#sys" aria-hidden="true">#</a> sys</h3>`,5),C={href:"https://docs.python.org/zh-cn/3/library/sys.html#module-sys",target:"_blank",rel:"noopener noreferrer"},D=e(`<p><code>sys</code> 内置模块，提供了许多函数和变量来处理 Python 运行时环境的不同部分。</p><ul><li><strong>sys.argv[number]</strong>：用于获取当前正在执行的命令行参数的参数列表。一个列表，其中包含了被传递给 Python 脚本的命令行参数。<code>argv[0]</code> 为脚本的名称（是否是完整的路径名取决于操作系统）</li><li><strong>sys.path</strong>：一个由字符串组成的列表，用于指定模块的搜索路径。初始化自环境变量 <code>PYTHONPATH</code>，再加上一条与安装有关的默认路径</li><li><strong>sys.exit([arg])</strong>：用于退出程序。可选参数 arg 可以是表示退出状态的整数（默认为 0），也可以是其他类型的对象。如果它是整数，则 shell 等将 <code>0</code> 视为 “成功终止”，非零值视为 “异常终止”</li><li><strong>sys.platform</strong>：用于获取当前系统平台</li><li><strong>sys.modules</strong>：用于加载模块的字典，每当程序员导入新的模块时，<code>sys.modules</code> 将自动记录该模块，<code>key</code> 是模块名，<code>value</code> 是模块。当相同模块第二次导入时 Python 将从该字典中进行查询，从而加快程序的运行速度</li><li><strong>sys.modules.keys()</strong>：返回所有已经导入的模块列表</li><li><strong>sys.exc_info()</strong>：获取当前正在处理的异常类，<code>exc_type</code>、<code>exc_value</code>、<code>exc_traceback</code> 当前处理的异常详细信息</li><li><strong>sys.hexversion</strong>：获取 Python 解释程序的版本值，16 进制格式如：<code>0x020403F0</code></li><li><strong>sys.version</strong>：获取 Python 解释程序的版本信息</li><li><strong>sys.stdout</strong>：标准输出</li><li><strong>sys.stdout.write(str)</strong>：标准输出指定内容等于 <code>print()</code>。<code>str</code> 要输出的内容</li><li><strong>sys.stdout.writelines(str)</strong>：标准输出指定行内容，行末尾多个 None 字符。<code>str</code> 要输出的内容</li><li><strong>sys.stdout.writable()</strong>：是否可写标准输出</li><li><strong>sys.stdin</strong>：标准输入</li><li><strong>sys.stdin.read([int])</strong>：标准输入读取内容。如果不指定 <code>int</code> 将一直读取内容；如果指定 <code>int</code> 且输入指定 <code>int</code> 个字符串，<code>sys.stdin.read(int)</code> 等于 <code>input()</code></li><li><strong>sys.stdin.readline([int])</strong>：标准输入读取行内容，读取每行后多个 <code>\\n</code>，<code>int</code> 指定输入多少个字符串</li><li><strong>sys.stdin.readable()</strong>：是否可读标准输入</li><li><strong>sys.stderr</strong>：错误输出</li><li><strong>sys.stderr.write([str])</strong>：错误输出指定内容，<code>str</code> 要输出的内容</li><li><strong>sys.stderr.writelines([str])</strong>：错误输出指定行内容，<code>str</code> 要输出的内容</li><li><strong>sys.stderr.writable()</strong>：是否可写错误输出</li><li><strong>sys.exec_prefix</strong>：返回平台独立的 python 文件安装的位置</li><li><strong>sys.byteorder</strong>：本地字节顺序的指示符。在大端序（最高有效位优先）操作系统上值为 <code>big</code>，在小端序（最低有效位优先）操作系统上为 <code>little</code></li><li><strong>sys.copyright</strong>：记录 python 版权相关的东西</li><li><strong>sys.api_version</strong>：解释器的 C 的 API 版本</li><li><strong>sys.version_info</strong>：一个包含版本号五部分的元组: <code>major</code>、<code>minor</code>、<code>micro</code>、<code>releaselevel</code> 和 <code>serial</code>。除 <code>releaselevel</code> 外的所有值均为整数；发布级别值则为 <code>alpha</code>、<code>beta</code>、<code>candidate</code> 或 <code>final</code></li><li><strong>sys.getdefaultencoding()</strong>：返回当前您所用的默认的字符编码格式</li><li><strong>sys.getfilesystemencoding()</strong>：返回将 Unicode 文件名转换成系统文件名的编码的名字</li><li><strong>sys.builtin_module_names</strong>：Python 解释器导入的内建模块列表</li><li><strong>sys.executable</strong>：Python 解释程序路径</li><li><strong>sys.getwindowsversion()</strong>：获取 Windows 的版本</li><li><strong>sys.setdefaultencoding(name)</strong>：用来设置当前默认的字符编码（详细使用参考文档）</li><li><strong>sys.displayhook(value)</strong>：如果 <code>value</code> 非空，这个函数会把他输出到 <code>sys.stdout</code>（详细使用参考文档）</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> sys

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;script name is&quot;</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;there are&quot;</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;arguments:&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> arg <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;there are no arguments!&quot;</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
script name <span class="token keyword">is</span> E<span class="token punctuation">:</span><span class="token operator">/</span>SourceCode<span class="token operator">/</span>Python<span class="token operator">/</span>PythonProject<span class="token operator">/</span>test<span class="token punctuation">.</span>py
there are no arguments!


<span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;E:\\\\SourceCode\\\\Python\\\\PythonProject&#39;, &#39;E:\\\\SourceCode\\\\Pytho....]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="os" tabindex="-1"><a class="header-anchor" href="#os" aria-hidden="true">#</a> os</h3>`,5),E={href:"https://docs.python.org/zh-cn/3/library/os.html#module-os",target:"_blank",rel:"noopener noreferrer"},F=e(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>一定要使用 <code>import os</code> 而不是 <code>from os import *</code>。这将避免内建的 <code>open()</code> 函数被 <code>os.open()</code> 隐式替换掉，因为它们的使用方式大不相同</p></div><p><code>os</code> 内置模块，用于处理文件和目录。</p><ul><li><strong>os.access(path, mode)</strong>：判断文件或目录权限，<code>mode</code> 参数为：<code>os.F_OK</code>、<code>os.R_OK</code>、<code>os.W_OK</code>、<code>os.X_OK</code>，分别测试 <code>path</code> 的存在性、可读性、可写性和可执行性</li><li><strong>os.chdir(path)</strong>：改变当前工作目录为 <code>path</code></li><li><strong>os.chmod(path, mode)</strong>：修改文件或目录权限。将 <code>path</code> 的 <code>mode</code> 更改为其他由数字表示的 <code>mode</code></li><li><strong>os.chown(path, uid, gid)</strong>：将 <code>path</code> 的用户和组 ID 分别修改为数字形式的 <code>uid</code> 和 <code>gid</code></li><li><strong>os.chroot(path)</strong>：将当前进程的根目录更改为 <code>path</code></li><li><strong>os.close(fd)</strong>：关闭文件或目录</li><li><strong>os.isatty(fd)</strong>：如果文件或目录描述符打开且已连接至 <code>tty</code> 设备（或类 <code>tty</code> 设备），返回 <code>True</code>，否则返回 <code>False</code></li><li><strong>os.getcwd()</strong>：返回表示当前工作目录的字符串</li><li><strong>os.getenv(key)</strong>：如果环境变量键存在，则将其值作为字符串返回；如果不存在，则返回默认值 <code>None</code>。<code>key</code> 是字符串。注意，由于 <code>getenv()</code> 使用 <code>os.environ</code>，因此在导入时也会捕获 <code>getenv()</code> 的映射，并且该函数可能不会反映未来的环境变化</li><li><strong>os.link(src, dst)</strong>：创建一个指向 <code>src</code> 的硬链接，名为 <code>dst</code></li><li><strong>os.listdir(path)</strong>：列出指定目录下所有文件和目录，以列表的形成输出，默认为当前目录</li><li><strong>os.mkdir(path)</strong>：创建名为 <code>path</code> 的目录。如果目录存在，则会报错</li><li><strong>os.makedirs(path)</strong>：递归创建目录。如果目录存在，则会报错</li><li><strong>os.name</strong>：获取操作系统标识。如果是 <code>posix</code>，说明系统是 <code>Linux</code>、<code>Unix</code> 或 <code>Mac OS X</code>；如果是 <code>nt</code>，就是 <code>Windows</code> 系统</li><li><strong>os.open(file, flags[, mode])</strong>：用于打开一个文件。并且设置需要的打开选项（标志位），多个使用 <code>|</code> 隔开。模式参数 <code>mode</code> 参数是可选的，默认为 <code>0777</code></li></ul><p><strong>flags 标志位：</strong></p><table><thead><tr><th style="text-align:center;">标志位</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>os.O_RDONLY</strong></td><td style="text-align:left;">以只读的方式打开</td></tr><tr><td style="text-align:center;"><strong>os.O_WRONLY</strong></td><td style="text-align:left;">以只写的方式打开</td></tr><tr><td style="text-align:center;"><strong>os.O_RDWR</strong></td><td style="text-align:left;">以读写的方式打开</td></tr><tr><td style="text-align:center;"><strong>os.O_APPEND</strong></td><td style="text-align:left;">以追加的方式打开</td></tr><tr><td style="text-align:center;"><strong>os.O_CREAT</strong></td><td style="text-align:left;">创建并打开一个新文件</td></tr><tr><td style="text-align:center;"><strong>os.O_TRUNC</strong></td><td style="text-align:left;">打开一个文件并截断它的长度为零（必须有写权限）</td></tr><tr><td style="text-align:center;"><strong>os.O_EXCL</strong></td><td style="text-align:left;">如果指定的文件存在，返回错误</td></tr><tr><td style="text-align:center;"><strong>os.O_NONBLOCK</strong></td><td style="text-align:left;">打开时不阻塞</td></tr><tr><td style="text-align:center;"><strong>os.O_SHLOCK</strong></td><td style="text-align:left;">自动获取共享锁</td></tr><tr><td style="text-align:center;"><strong>os.O_EXLOCK</strong></td><td style="text-align:left;">自动获取独立锁</td></tr><tr><td style="text-align:center;"><strong>os.O_DIRECT</strong></td><td style="text-align:left;">消除或减少缓存效果</td></tr><tr><td style="text-align:center;"><strong>os.O_FSYNC</strong></td><td style="text-align:left;">同步写入</td></tr><tr><td style="text-align:center;"><strong>os.O_NOFOLLOW</strong></td><td style="text-align:left;">不追踪软链接</td></tr></tbody></table><p><strong>mode 权限设置：</strong></p><table><thead><tr><th style="text-align:center;">权限</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>4（r）</strong></td><td style="text-align:left;">打开读取（默认）</td></tr><tr><td style="text-align:center;"><strong>2（w）</strong></td><td style="text-align:left;">打开以进行写入，首先截断文件</td></tr><tr><td style="text-align:center;"><strong>1（x）</strong></td><td style="text-align:left;">创建一个新文件并打开它进行写入</td></tr><tr><td style="text-align:center;"><strong>a</strong></td><td style="text-align:left;">打开以进行写入。如果文件存在，则附加到文件末尾</td></tr><tr><td style="text-align:center;"><strong>b</strong></td><td style="text-align:left;">二进制模式</td></tr><tr><td style="text-align:center;"><strong>t</strong></td><td style="text-align:left;">文本模式（默认）</td></tr><tr><td style="text-align:center;"><strong>+</strong></td><td style="text-align:left;">打开磁盘文件进行更新（读写）</td></tr><tr><td style="text-align:center;"><strong>U</strong></td><td style="text-align:left;">通用换行模式（已弃用）</td></tr></tbody></table><ul><li><p><strong>os.popen(command)</strong>：打开命令 <code>cmd</code> 的管道。返回值是连接到管道的打开文件对象，根据模式是 <code>r</code>（默认值）还是 <code>w</code>，可以读取或写入该对象</p></li><li><p><strong>os.read(fd, n)</strong>：从文件描述符 fd 中读取至多 <code>n</code> 个字节</p></li><li><p><strong>os.remove(path)</strong>：删除文件。如果路径是目录，则会报错</p></li><li><p><strong>os.removedirs(path)</strong>：删除多级目录。如果目录不为空，则会报错</p></li><li><p><strong>os.rename(str, dst)</strong>：将文件或目录 <code>src</code> 重命名为 <code>dst</code>。如果 <code>dst</code> 已存在，则会报错</p></li><li><p><strong>os.rmdir(path)</strong>：删除目录。如果目录不为空，则会报错（删除非空目录, 使用 <code>shutil.rmtree()</code>）</p></li><li><p><strong>os.stat(path)</strong>：获取文件属性</p></li><li><p><strong>os.symlink(src, dst)</strong>：创建一个指向 <code>src</code> 的符号链接，名为 <code>dst</code></p></li><li><p><strong>os.system(command)</strong>：执行操作系统命令，并返回一个 16 位的二进制数，要获得 <code>os.system</code> 的正确返回值，可以使用位移运算（将返回值右移 8 位。例如：a&gt;&gt;8）还原返回值</p></li><li><p><strong>os.sync()</strong>：强制将所有内容写入磁盘</p></li><li><p><strong>os.uname()</strong>：返回当前操作系统的识别信息</p></li><li><p><strong>os.unsetenv(key)</strong>：取消设置（删除）名为 <code>key</code> 的环境变量</p></li><li><p><strong>os.unlink(path)</strong>：删除文件</p></li><li><p><strong>os.utime(path)</strong>：设置文件 <code>path</code> 的访问时间和修改时间</p></li><li><p><strong>os.write(fd, str)</strong>：将 <code>str</code> 中的字节串（bytestring）写入文件描述符 fd。返回实际写入的字节数</p></li><li><p><strong>os.walk(path)</strong>：用于遍历指定路径下的所有子文件和目录，返回一个三元组（<code>dirpath</code>, <code>dirnames</code>, <code>filenames</code>）</p><ul><li><strong>dirpath</strong>：是一个字符串，指向目录的路径</li><li><strong>dirnames</strong>：是 <code>dirpath</code> 中子目录的名称列表（包括指向目录的符号链接，不包括 <code>.</code> 和 <code>..</code>）</li><li><strong>filenames</strong>：是 <code>dirpath</code> 中文件的名称列表。请注意，列表中的名称不包含路径组件</li></ul></li><li><p><strong>os.wait()</strong>：等待子进程执行完毕，返回一个元组，包含其 pid 和退出状态指示：一个 16 位数字，其低字节是终止该进程的信号编号，高字节是退出状态码（信号编号为零的情况下）。如果生成了核心文件，则低字节的高位会置位</p></li><li><p><strong>os.path.abspath(path)</strong>：返回路径 <code>path</code> 的绝对路径</p></li><li><p><strong>os.path.basename(path)</strong>：返回路径 <code>path</code> 的文件名部分</p></li><li><p><strong>os.path.commonpath(list)</strong>：接受包含多个路径的序列，返回 <code>list</code> 的最长公共子路径</p></li><li><p><strong>os.path.commonprefix(list)</strong>：接受包含多个路径的列表，返回所有路径的最长公共前缀</p></li><li><p><strong>os.path.dirname(path)</strong>：返回路径 <code>path</code> 的目录名称</p></li><li><p><strong>os.path.exists(path)</strong>：如果 <code>path</code> 指向一个已存在的路径或已打开的文件描述符，返回 <code>True</code>。对于失效的符号链接，返回 <code>False</code></p></li><li><p><strong>os.path.lexists(path)</strong>：如果 <code>path</code> 指向一个已存在的路径，返回 <code>True</code>。对于失效的符号链接，也返回 <code>True</code></p></li><li><p><strong>os.path.expanduser(path)</strong>：把 <code>path</code> 中包含的 <code>~</code> 或 <code>~user</code> 替换为当前用户的家目录并返回</p></li><li><p><strong>os.path.expandvars(path)</strong>：根据环境变量的值替换 <code>path</code> 中包含的 <code>\\$name</code> 和 <code>\\\${name}</code></p></li><li><p><strong>os.path.getatime()</strong>：返回 <code>path</code> 的最后访问时间。返回值是一个浮点数，为纪元秒数</p></li><li><p><strong>os.path.getmtime()</strong>：返回 <code>path</code> 的最后修改时间。返回值是一个浮点数，为纪元秒数</p></li><li><p><strong>os.path.getctime()</strong>：返回 <code>path</code> 在系统中的 <code>ctime</code>，在有些系统（比如 Unix）上，它是元数据的最后修改时间，其他系统（比如 Windows）上，它是 <code>path</code> 的创建时间。返回值是一个浮点数，为纪元秒数</p></li><li><p><strong>os.path.getsize()</strong>：返回 <code>path</code> 的大小，以字节为单位</p></li><li><p><strong>os.path.isabs(path)</strong>：如果 <code>path</code> 是一个绝对路径，则返回 <code>True</code></p></li><li><p><strong>os.path.isfile(path)</strong>：如果 <code>path</code> 是一个文件且存在，则返回 <code>True</code></p></li><li><p><strong>os.path.isdir(path)</strong>：如果 <code>path</code> 是一个目录且存在，则返回 <code>True</code></p></li><li><p><strong>os.path.islink(path)</strong>：如果 <code>path</code> 是一个符号链接且存在，则返回 <code>True</code></p></li><li><p><strong>os.path.ismount(path)</strong>：如果路径 <code>path</code> 是挂载点（文件系统中挂载其他文件系统的点）且存在，则返回 <code>True</code></p></li><li><p><strong>os.path.join(path, *paths)</strong>：拼接一个或多个路径</p></li><li><p><strong>os.path.normcase(path)</strong>：规范路径的大小写。在 Windows 上，将路径中的所有字符都转换为小写，并将正斜杠转换为反斜杠。在其他操作系统上返回原路径</p></li><li><p><strong>os.path.normpath(path)</strong>：删除多余的分隔符和对上级目录的引用来标准化路径名</p></li><li><p><strong>os.path.realpath(path)</strong>：返回指定文件的规范路径，消除路径中存在的任何符号链接</p></li><li><p><strong>os.path.relpath(path)</strong>：返回从当前目录至 <code>path</code> 的相对文件路径</p></li><li><p><strong>os.path.samefile(path1, path2)</strong>：如果两个路径都指向相同的文件或目录，则返回 <code>True</code></p></li><li><p><strong>os.path.sameopenfile(fp1, fp2)</strong>：如果文件描述符 fp1 和 fp2 指向相同文件，则返回 <code>True</code></p></li><li><p><strong>os.path.samestat(stat1, stat2)</strong>：如果 stat 元组 stat1 和 stat2 指向相同文件，则返回 <code>True</code></p></li><li><p><strong>os.path.split(path)</strong>：将 <code>path</code> 拆分为（<code>head</code>, <code>tail</code>），文件路径和文件名分割成一个元组（会将最后一个目录作为文件名而分离）。如果 <code>path</code> 以斜杠结尾，<code>tail</code> 将为空</p></li><li><p><strong>os.path.splitdrive(path)</strong>：将 <code>path</code> 拆分为（<code>drive</code>, <code>tail</code>），其中 <code>drive</code> 是挂载点或空字符串。在没有驱动器概念的系统上，<code>drive</code> 将始终为空字符串，在 windows 下，返回驱动器名和路径组成的元组</p></li><li><p><strong>os.path.splitext(path)</strong>：将 <code>path</code> 拆分为（<code>root</code>, <code>ext</code>），文件路径和文件扩展名分割成一个元组</p></li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>path <span class="token operator">=</span> <span class="token string">r&quot;E:\\SourceCode\\Python\\PythonProject&quot;</span>

<span class="token keyword">for</span> path<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>dirs<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
E<span class="token punctuation">:</span>\\SourceCode\\Python\\PythonProject
<span class="token punctuation">[</span><span class="token string">&#39;.idea&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Alien_invasion&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;assets&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;build&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Date_visualization&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;images&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;settings&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Web_APP&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;__pycache__&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">&#39;ball.png&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bmi.py&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cards_main.py&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cards_tools.py&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cats.txt&#39;</span><span class="token punctuation">]</span>


E<span class="token punctuation">:</span>\\SourceCode\\Python\\PythonProject\\<span class="token punctuation">.</span>idea
<span class="token punctuation">[</span><span class="token string">&#39;inspectionProfiles&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">&#39;.gitignore&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;misc.xml&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;modules.xml&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;PythonProject.iml&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;workspace.xml&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略部分内容

<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>stat<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 输出结果</span>
os<span class="token punctuation">.</span>stat_result<span class="token punctuation">(</span>st_mode<span class="token operator">=</span><span class="token number">16895</span><span class="token punctuation">,</span> st_ino<span class="token operator">=</span><span class="token number">562949953481838</span><span class="token punctuation">,</span> st_dev<span class="token operator">=</span><span class="token number">48482355</span><span class="token punctuation">,</span> st_nlink<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> st_uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> st_size<span class="token operator">=</span><span class="token number">8192</span><span class="token punctuation">,</span> st_atime<span class="token operator">=</span><span class="token number">1672366429</span><span class="token punctuation">,</span> st_mtime<span class="token operator">=</span><span class="token number">1672366429</span><span class="token punctuation">,</span> st_ctime<span class="token operator">=</span><span class="token number">1666057200</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">&quot;echo &#39;Hello, World!&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&#39;Hello, World!&#39;</span>

fd <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>O_RDWR<span class="token punctuation">)</span>
ret <span class="token operator">=</span> os<span class="token punctuation">.</span>read<span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>  <span class="token comment"># 读取文本</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
os<span class="token punctuation">.</span>close<span class="token punctuation">(</span>fd<span class="token punctuation">)</span>  <span class="token comment"># 关闭文件</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;关闭文件成功!!&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="calendar" tabindex="-1"><a class="header-anchor" href="#calendar" aria-hidden="true">#</a> calendar</h3>`,11),M={href:"https://docs.python.org/zh-cn/3/library/calendar.html#module-calendar",target:"_blank",rel:"noopener noreferrer"},O=e(`<p><code>calendar</code> 内置函数，用于输出日历相关功能。</p><ul><li><strong>calendar.setfirstweekday(weekday)</strong>：设置每一周的开始（<code>0</code> 表示星期一，<code>6</code> 表示星期天）</li><li><strong>calendar.firstweekday()</strong>：返回当前设置的每星期的第一天的数值</li><li><strong>calendar.isleap(year)</strong>：如果 <code>year</code> 是闰年则返回 <code>True</code>，否则返回 <code>False</code></li><li><strong>calendar.leapdays(y1, y2)</strong>：返回在范围 <code>y1</code> 至 <code>y2</code>（不包括 <code>y2</code>）之间的闰年的年数，其中 <code>y1</code> 和 <code>y2</code> 是年份。此函数适用于跨越一个世纪变化的范围</li><li><strong>calendar.weekday(year, month, day)</strong>：返回某年某月某日是星期几（<code>0</code> 是星期一，<code>6</code> 是星期日）</li><li><strong>calendar.weekheader(n)</strong>：返回一个包含星期几的缩写名的列表。<code>n</code> 指定星期几缩写的字符宽度</li><li><strong>calendar.monthrange(year, month)</strong>：返回指定月份的第一天是星期几和这个月的天数（<code>0</code> 是星期一，<code>6</code> 是星期日）的一个元组</li><li><strong>calendar.monthcalendar(year, month)</strong>：返回表示一个月的日历列表。每一行代表一周；此月份外的日子由零表示。每周从周一开始，除非使用 <code>setfirstweekday()</code> 改变设置</li><li><strong>calendar.prmonth(theyear, themonth[, w=0[, l=0]])</strong>：打印由 <code>month()</code> 返回的一个月的日历。<code>w</code> 为日期的宽度，但始终保持日期居中。<code>l</code> 指定了每星期占用的行数</li><li><strong>calendar.month(theyear, themonth[, w=0[, l=0]])</strong>：使用 <code>TextCalendar</code> 类的 <code>formatmonth()</code> 以多行字符串形式返回月份日历。<code>w</code> 为日期的宽度，但始终保持日期居中。<code>l</code> 指定了每星期占用的行数</li><li><strong>calendar.prcal(year[, w=2[, l=1[, c=6]]], m=3)</strong>：打印由 <code>calendar()</code> 返回的整年的日历。这个字符串为一个 <code>m</code>（默认为 <code>3</code>）列日历。可选参数 <code>w</code>、<code>l</code> 和 <code>c</code> 分别表示日期的宽度、周的行数和月之间的间隔</li><li><strong>calendar.calendar(year[, w=2[, l=1[, c=6]]], m=3)</strong>：使用 <code>TextCalendar</code> 类的 <code>formatyear()</code> 返回整年的 <code>3</code> 列的日历以多行字符串的形式。这个字符串为一个 <code>m</code>（默认为 <code>3</code>）列日历。可选参数 <code>w</code>、<code>l</code> 和 <code>c</code> 分别表示日期的宽度、周的行数和月之间的间隔</li><li><strong>calendar.day_name</strong>：返回一个迭代器，在当前语言环境下表示星期几（全写）的数组</li><li><strong>calendar.day_abbr</strong>：返回一个迭代器，在当前语言环境下表示星期几（缩写）的数组</li><li><strong>calendar.month_name</strong>：返回一个迭代器，在当前语言环境下表示一年中月份的数组。这遵循一月的月号为 <code>1</code> 的通常惯例，所以它的长度为 <code>13</code> 且 <code>month_name[0]</code> 是空字符串</li><li><strong>calendar.month_abbr</strong>：返回一个迭代器，在当前语言环境下表示月份简写的数组。这遵循一月的月号为 <code>1</code> 的通常惯例，所以它的长度为 <code>13</code> 且 <code>month_abbr[0]</code> 是空字符串</li><li><strong>calendar.MONDAY</strong>：返回一个星期序号别名，<code>0</code></li><li><strong>calendar.TUESDAY</strong>：返回一个星期序号别名，<code>1</code></li><li><strong>calendar.WEDNESDAY</strong>：返回一个星期序号别名，<code>2</code></li><li><strong>calendar.THURSDAY</strong>：返回一个星期序号别名，<code>3</code></li><li><strong>calendar.FRIDAY</strong>：返回一个星期序号别名，<code>4</code></li><li><strong>calendar.SATURDAY</strong>：返回一个星期序号别名，<code>5</code></li><li><strong>calendar.SUNDAY</strong>：返回一个星期序号别名，<code>6</code></li><li><strong>calendar.Calender([firstweekday=0])</strong>：创建一个 <code>Calendar</code> 对象。<code>firstweekday</code> 是一个用来指定每星期第一天的整数（<code>0~6</code>）。<code>MONDAY</code> 是 <code>0</code>（默认值），<code>SUNDAY</code> 是 <code>6</code></li><li><strong>calendar.Calender().iterweekdays()</strong>：返回一个迭代器，迭代器的内容为一星期的数字。迭代器的第一个值与 <code>firstweekday</code> 属性的值一致</li><li><strong>calendar.Calender().itermonthdates(year, month)</strong>：返回一个迭代器，迭代器的内容为 <code>year</code> 年 <code>month</code> 月（<code>1-12</code>）的日期。这个迭代器返回当月的所有日期（<code>datetime.date</code> 对象），日期包含了本月头尾用于组成完整一周的日期</li><li><strong>calendar.Calender().itermonthdays(year, month)</strong>：返回一个迭代器，为 <code>year</code> 年 <code>month</code> 月的日期，但不受 <code>datetime.date</code> 范围限制。返回的日期为当月每一天的日期对应的天数。对于不在当月的日期，显示为 <code>0</code></li><li><strong>calendar.Calender().itermonthdays2(year, month)</strong>：返回一个迭代器，为 <code>year</code> 年 <code>month</code> 月的日期，但不受 <code>datetime.date</code> 范围的限制。迭代器中的元素为一个由日期和代表星期几的数字组成的的元组</li><li><strong>calendar.Calender().itermonthdays3(year, month)</strong>：返回一个迭代器，为 <code>year</code> 年 <code>month</code> 月的日期，但不受 <code>datetime.date</code> 范围的限制。迭代器的元素为一个由年、月和日组成的元组</li><li><strong>calendar.Calender().itermonthdays4(year, month)</strong>：返回一个迭代器，为 <code>year</code> 年 <code>month</code> 月的日期，但不受 <code>datetime.date</code> 范围的限制。迭代器的元素为一个由年、月、日和代表星期几的数字组成的元组</li><li><strong>calendar.Calender().monthdatescalendar(year, month)</strong>：返回一个表示指定年月的周列表。周列表由七个 <code>datetime.date</code> 对象组成，即（周一到周五）</li><li><strong>calendar.Calender().monthdays2calendar(year, month)</strong>：返回一个表示指定年月的周列表。周列表由七个代表日期的数字和代表周几的数字组成的二元元组，即（周一到周五）</li><li><strong>calendar.Calender().monthdayscalendar(year, month)</strong>：返回一个表示指定年月的周列表。周列表由七个代表日期的数字组成，即（周一到周五）</li><li><strong>calendar.Calender().yeardatescalendar(year, width=3)</strong>：返回可以用来格式化的指定年月的数据。返回的值是一个列表，列表是月份组成的行。每一行包含了最多 <code>width</code> 个月（默认为 <code>3</code>）。每个月包含了 <code>4</code> 到 <code>6</code> 周，每周包含 <code>1-7</code> 天。每一天使用 <code>datetime.date</code> 对象</li><li><strong>calendar.Calender().yeardays2calendar(year, width=3)</strong>：返回可以用来格式化的指定年月的数据。周列表的元素是由表示日期的数字和表示星期几的数字组成的元组。不在这个月的日子为 <code>0</code></li><li><strong>calendar.Calender().yeardayscalendar(year, width=3)</strong>：返回可以用来格式化的指定年月的数据。周列表的元素是表示日期的数字。不在这个月的日子为 <code>0</code></li><li><strong>calendar.TextCalendar([firstweekday=0])</strong>：可以使用这个类生成纯文本日历。<code>firstweekday</code> 是一个用来指定每星期第一天的整数（<code>0~6</code>）。<code>MONDAY</code> 是 <code>0</code>（默认值），<code>SUNDAY</code> 是 <code>6</code></li><li><strong>calendar.TextCalendar().formatmonth(theyear, themonth[, w=0[, l=0]])</strong>：返回一个多行字符串来表示指定年月的日历。<code>w</code> 为日期的宽度，但始终保持日期居中。<code>l</code> 指定了每星期占用的行数。以上这些还依赖于构造器或者 <code>setfirstweekday()</code> 方法指定的周的第一天是哪一天</li><li><strong>calendar.TextCalendar().prmonth(theyear, themonth[, w=0[, l=0]])</strong>：指定一个月的日历。无返回值，所以返回的结果为 <code>None</code></li><li><strong>calendar.TextCalendar().formatyear(theyear[, w=2[, l=1[, c=6]]], m=3)</strong>：返回一个多行字符串，这个字符串为一个 <code>m</code>（默认为 <code>3</code>）列日历。可选参数 <code>w</code>、<code>l</code> 和 <code>c</code> 分别表示日期的宽度、周的行数和月之间的间隔。同样，以上这些还依赖于构造器或者 <code>setfirstweekday()</code> 指定哪一天为一周的第一天。日历的第一年由平台依赖于使用的平台</li><li><strong>calendar.TextCalendar().pryear(theyear, w=2, l=1, c=6, m=3)</strong>：指定一整年的日历。无返回值，所以返回的结果为 <code>None</code></li><li><strong>calendar.HTMLCalendar([firstweekday=0])</strong>：可以使用这个类生成 <code>HTML</code> 日历。<code>firstweekday</code> 是一个用来指定每星期第一天的整数（<code>0~6</code>）。<code>MONDAY</code> 是 <code>0</code>（默认值），<code>SUNDAY</code> 是 <code>6</code></li><li><strong>calendar.HTMLCalendar().formatmonth(theyear, themonth[, withyear=True])</strong>：返回一个 <code>HTML</code> 表格作为指定年月的日历。<code>withyear</code> 默认为真，则年份将会包含在表头，否则只显示月份</li><li><strong>calendar.HTMLCalendar().formatyear(theyear, width=3)</strong>：返回一个 <code>HTML</code> 表格作为指定年份的日历。<code>width</code>（默认为 <code>3</code>）用于规定每一行显示月份的数量</li><li><strong>calendar.HTMLCalendar().cssclasses</strong>：对应星期一到星期天的简写列表。默认列表为 <code>[&quot;mon&quot;, &quot;tue&quot;, &quot;wed&quot;, &quot;thu&quot;, &quot;fri&quot;, &quot;sat&quot;, &quot;sun&quot;]</code></li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>calendar<span class="token punctuation">.</span>setfirstweekday<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>firstweekday<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：5</span>

c <span class="token operator">=</span> calendar<span class="token punctuation">.</span>Calendar<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>iterweekdays<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>。<span class="token number">0</span> 为周一，以此类推


c <span class="token operator">=</span> calendar<span class="token punctuation">.</span>Calendar<span class="token punctuation">(</span>firstweekday<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>iterweekdays<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>。<span class="token number">5</span> 为周一，以此类推


c <span class="token operator">=</span> calendar<span class="token punctuation">.</span>Calendar<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>itermonthdates<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token punctuation">[</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>


<span class="token keyword">for</span> item <span class="token keyword">in</span> c<span class="token punctuation">.</span>itermonthdates<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">28</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">29</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">30</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">01</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略部分内容
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">31</span>
<span class="token number">2023</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>


<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>monthdayscalendar<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>


<span class="token keyword">for</span> item <span class="token keyword">in</span> c<span class="token punctuation">.</span>monthdayscalendar<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>


<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>yeardayscalendar<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>


<span class="token keyword">for</span> item <span class="token keyword">in</span> c<span class="token punctuation">.</span>yeardayscalendar<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略部分内容
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>


c <span class="token operator">=</span> calendar<span class="token punctuation">.</span>TextCalendar<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>formatmonth<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
   December <span class="token number">2022</span>
Mo Tu We Th Fr Sa Su
          <span class="token number">1</span>  <span class="token number">2</span>  <span class="token number">3</span>  <span class="token number">4</span>
 <span class="token number">5</span>  <span class="token number">6</span>  <span class="token number">7</span>  <span class="token number">8</span>  <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span>
<span class="token number">12</span> <span class="token number">13</span> <span class="token number">14</span> <span class="token number">15</span> <span class="token number">16</span> <span class="token number">17</span> <span class="token number">18</span>
<span class="token number">19</span> <span class="token number">20</span> <span class="token number">21</span> <span class="token number">22</span> <span class="token number">23</span> <span class="token number">24</span> <span class="token number">25</span>
<span class="token number">26</span> <span class="token number">27</span> <span class="token number">28</span> <span class="token number">29</span> <span class="token number">30</span> <span class="token number">31</span>


c<span class="token punctuation">.</span>prmonth<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
   December <span class="token number">2022</span>
Mo Tu We Th Fr Sa Su
          <span class="token number">1</span>  <span class="token number">2</span>  <span class="token number">3</span>  <span class="token number">4</span>
 <span class="token number">5</span>  <span class="token number">6</span>  <span class="token number">7</span>  <span class="token number">8</span>  <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span>
<span class="token number">12</span> <span class="token number">13</span> <span class="token number">14</span> <span class="token number">15</span> <span class="token number">16</span> <span class="token number">17</span> <span class="token number">18</span>
<span class="token number">19</span> <span class="token number">20</span> <span class="token number">21</span> <span class="token number">22</span> <span class="token number">23</span> <span class="token number">24</span> <span class="token number">25</span>
<span class="token number">26</span> <span class="token number">27</span> <span class="token number">28</span> <span class="token number">29</span> <span class="token number">30</span> <span class="token number">31</span>


<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>prmonth<span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
   December <span class="token number">2022</span>
Mo Tu We Th Fr Sa Su
          <span class="token number">1</span>  <span class="token number">2</span>  <span class="token number">3</span>  <span class="token number">4</span>
 <span class="token number">5</span>  <span class="token number">6</span>  <span class="token number">7</span>  <span class="token number">8</span>  <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span>
<span class="token number">12</span> <span class="token number">13</span> <span class="token number">14</span> <span class="token number">15</span> <span class="token number">16</span> <span class="token number">17</span> <span class="token number">18</span>
<span class="token number">19</span> <span class="token number">20</span> <span class="token number">21</span> <span class="token number">22</span> <span class="token number">23</span> <span class="token number">24</span> <span class="token number">25</span>
<span class="token number">26</span> <span class="token number">27</span> <span class="token number">28</span> <span class="token number">29</span> <span class="token number">30</span> <span class="token number">31</span>
<span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="urllib" tabindex="-1"><a class="header-anchor" href="#urllib" aria-hidden="true">#</a> urllib</h3>`,5),j={href:"https://docs.python.org/zh-cn/3/library/urllib.html#module-urllib",target:"_blank",rel:"noopener noreferrer"},R=e(`<p><code>urllib</code> 内置模块，用于抓取 URL 资源，发送网络请求。</p><p><strong>urllib 模块包括如下模块包</strong>：</p><ul><li><strong>urllib.error</strong>：用于对 <code>urllib.request</code> 引发的异常进行处理。如在发送网络请求时出现错误，用该模块捕捉并处理</li><li><strong>urllib.parse</strong>：用于 URL 解析和转码</li><li><strong>urllib.request</strong>：用于实现基本的 http 请求</li><li><strong>urllib.response</strong>：在使用 <code>urlopen()</code> 方法或者 opener 的 <code>open()</code> 方法发起请求后，获得的结果是一个 response 对象。这个对象有一些方法和属性，可以对请求返回的结果进行一些处理</li><li><strong>urllib.robotparser</strong>：用于解析 <code>robots.txt</code> 文件。判断是否可以爬取网站信息</li></ul><p><strong>urllib 模块包常用函数和方法</strong>：</p><ul><li><p><strong>urllib.error.URLError</strong>：处理程序在遇到问题时会引发此异常</p></li><li><p><strong>urllib.error.URLError.reason</strong>：此错误的原因。可以是一个消息字符串或另一个异常实例</p></li><li><p><strong>urllib.error.HTTPError</strong>：用于处理特殊 HTTP 错误例如作为认证请求的时候。是 <code>URLError</code> 的子类</p></li><li><p><strong>urllib.error.HTTPError.code</strong>：一个 HTTP 状态码</p></li><li><p><strong>urllib.error.HTTPError.reason</strong>：通常是一个解释本次错误原因的字符串</p></li><li><p><strong>urllib.error.HTTPError.headers</strong>：导致 <code>HTTPError</code> 的特定 HTTP 请求的 HTTP 响应头</p></li><li><p><strong>urllib.error.ContentTooShortError(msg, content)</strong>：此异常会在 <code>urlretrieve()</code> 函数检测到已下载的数据量小于期待的数据量（由 Content-Length 头给定）时被引发。<code>content</code> 属性中将存放已下载（可能被截断）的数据</p></li><li><p><strong>urllib.parse.urlparse(urlstring[, scheme=&#39;&#39;[, allow_fragments=True]])</strong>：将一个 URL 解析为六个部分，返回 ParseResult 对象包含 6 项的 named tuple</p><ul><li><strong>urlstring</strong>：URL 地址</li><li><strong>scheme</strong>：协议类型，可用的包括 <code>file</code>、<code>ftp</code>、<code>gopher</code>、<code>hdl</code>、<code>http</code>、<code>https</code>...</li><li><strong>allow_fragments</strong>：是否忽略 URL 中的 <code>fragment</code> 部分</li></ul></li><li><p><strong>urllib.parse.urlunparse(parts)</strong>：根据 <code>urlparse()</code> 所返回的元组来构造一个 URL</p></li><li><p><strong>urllib.parse.urlsplit(url)</strong>：将一个 URL 解析为五个部分，不再单独拆分 params 这部分内容，而是将 params 合并到 path 中。返回 SplitResult 对象包含 5 项的 named tuple。通常用于在需要允许将参数应用到 URL 的 path 部分的每个分节的较新的 URL 语法的情况下</p></li><li><p><strong>urllib.parse.quote(string[, safe=&#39;/&#39;[, encoding=None[, errors=None]]])</strong>：对字符串进行编码。空格会被转码为 <code></code> 字符而 <code>/</code> 字符不会被转码。使用 <code>%xx</code> 转义符替换 string 中的特殊字符。字母、数字和 <code>_.-~</code> 等字符一定不会被转码。在默认情况下，此函数只对 URL 的路径部分进行转码</p><ul><li><strong>safe</strong>：形参额外指定不应被转码的 ASCII 字符，其默认值为 <code>/</code></li><li><strong>encoding</strong> 和 <strong>errors</strong>：形参指明如何处理非 ASCII 字符</li></ul></li><li><p><strong>urllib.parse.quote_plus(string, safe=&#39;&#39;, encoding=None, errors=None)</strong>：对字符串进行编码。空格会被转码为 <code>+</code> 字符而 <code>/</code> 字符会被转码为 <code>%2F</code></p></li><li><p><strong>urllib.parse.unquote(string[, encoding=&#39;utf-8&#39;[, errors=&#39;replace&#39;]])</strong>：对字符串进行解码。将 <code>%xx</code> 转义符替换为其单字符</p><ul><li><strong>encoding</strong> 和 <strong>errors</strong>：形参指定如何将以百分号编码的序列解码为 Unicode 字符</li></ul></li><li><p><strong>urllib.parse.urlencode(query[, doseq=False[, safe=&#39;&#39;[, encoding=None[, errors=None[, quote_via=quote_plus]]]]])</strong>：将一个包含有 str 或 bytes 对象的映射对象（字典）或二元组序列转换为以百分号编码的 ASCII 文本字符串。每个 <code>key=value</code> 对之间用 <code>&amp;</code> 分隔</p><ul><li><strong>query</strong>：一个包含有 str 或 bytes 对象的映射对象（字典）或二元组序列</li><li><strong>doseq</strong>：当 query 使用二元组序列时，值为 <code>True</code></li><li><strong>safe</strong>、<strong>encoding</strong> 和 <strong>errors</strong>：形参会被传递给 <code>quote_via</code>、<code>encoding</code> 和 <code>errors</code> 形参仅在查询元素为 str 时会被传递</li></ul></li><li><p><strong>urllib.parse.urljoin(base, url[, allow_fragments=True])</strong>：通过合并一个基准 URL（base）和另一个 URL（url）来构造一个完整 URL（absolute）</p><ul><li><strong>base</strong>：表示基础链接</li><li><strong>url</strong>：表示新的链接</li><li><strong>allow_fragments</strong>：为可选参数，默认为 <code>Ture</code>，设为 <code>False</code> 则忽略 <code>fragment</code> 这部分内容</li></ul></li><li><p><strong>urllib.request.urlopen(url[, data=None[, timeout[, cafile=None[, capath=None[, cadefault=False[, context=None]]]]]])</strong>：传入字符串格式的 url 地址。返回 HTTPResponse 生成器对象，可从中读取数据。带有 <code>url</code>、<code>headers</code> 和 <code>status</code> 属性</p><ul><li><strong>url</strong>：请求地址</li><li><strong>data</strong>：发送到服务器的其他数据对象，默认为 <code>None</code>，表示请求方式为 <code>get</code> 请求；如果需要实现 <code>post</code> 请求，需要字典形式的数据作为参数</li><li><strong>timeout</strong>：超时时间，单位为秒</li><li><strong>cafile</strong> 和 <strong>capath</strong>：<code>cafile</code> 为 CA 证书，<code>capath</code> 为 CA 证书的路径，使用 <code>HTTPS</code> 需要用到</li><li><strong>cadefault</strong>：CA 证书的默认值</li><li><strong>context</strong>：<code>ssl.SSLContext</code> 类型，用来指定 SSL 设置</li></ul></li><li><p><strong>urllib.request.install_opener(opener)</strong>：将生成的 opener 使用 <code>install_opener</code> 方法来设置为全局的</p></li><li><p><strong>urllib.request.build_opener([handler, ...])</strong>：生成 opener，以给定顺序把处理函数串联起来</p></li><li><p><strong>urllib.request.pathname2url(path)</strong>：将本地路径转换成 url 路径</p></li><li><p><strong>urllib.request.url2pathname(path)</strong>：将 url 路径转换成本地路径</p></li><li><p><strong>urllib.request.Request(url[, data=None[, headers={}[, origin_req_host=None[, unverifiable=False[, method=None]]]]])</strong>：URL 请求对象的抽象类</p><ul><li><strong>url</strong>：访问网站的完整 url 地址</li><li><strong>data</strong>：如果要传必须传 bytes （字节流）类型的；如果是一个字典，可以先用 <code>urllib.parse.urlencode()</code> 编码。默认为 <code>None</code>，表示请求方式为 <code>get</code> 请求；如果需要实现 <code>post</code> 请求，需要字典形式的数据作为参数</li><li><strong>headers</strong>：设置请求头部信息，字典类型。也可以通过调用 Request 对象的 <code>add_header()</code> 方法来添加请求头。请求头最常用的用法就是通过修改 <code>User-Agent</code> 来伪装浏览器</li><li><strong>origin_req_host</strong>：用于设置请求方的 host 名称或者 IP</li><li><strong>unverifiable</strong>：用于设置网页是否需要验证，默认值为 <code>False</code></li><li><strong>method</strong>：用于设置请求方式。例如：<code>GET</code>、<code>POST</code>。默认为 <code>GET</code></li></ul></li><li><p><strong>urllib.request.OpenerDirector</strong>：OpenerDirector 类通过串接在一起的 BaseHandler 打开 URL，并负责管理 <code>handler</code> 链及从错误中恢复</p></li><li><p><strong>urllib.request.BaseHandler</strong>：这是所有已注册 <code>handler</code> 的父类，只做了简单的注册机制</p></li><li><p><strong>urllib.request.HTTPDefaultErrorHandler</strong>：为 HTTP 错误响应定义的默认 <code>handler</code>，所有出错响应都会转为 HTTPError 异常</p></li><li><p><strong>urllib.request.HTTPRedirectHandler</strong>：一个用于处理重定向的类</p></li><li><p><strong>urllib.request.HTTPCookieProcessor(cookiejar=None)</strong>：一个用于处理 <code>HTTP Cookies</code> 的类</p></li><li><p><strong>urllib.request.ProxyHandler(proxies=None)</strong>：让请求转往代理服务，默认代理为空。如果给出了 <code>proxies</code>，则它必须是一个将协议名称映射到代理 URL 的字典</p></li><li><p><strong>urllib.request.HTTPPasswordMgr</strong>：维护 <code>(realm, uri) -&gt; (user, password)</code> 映射数据库。用于管理密码，它维护了用户名密码的表</p></li><li><p><strong>urllib.request.HTTPBasicAuthHandler(password_mgr=None)</strong>：处理远程主机的身份认证</p></li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token punctuation">,</span> request

url <span class="token operator">=</span> <span class="token string">&quot;http://docs.python.org:80/3/library/urllib.parse.html?highlight=params#url-parsing&quot;</span>
o <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>scheme<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>parse<span class="token punctuation">.</span>urlunparse<span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>parse<span class="token punctuation">.</span>urlsplit<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
ParseResult<span class="token punctuation">(</span>scheme<span class="token operator">=</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">,</span> netloc<span class="token operator">=</span><span class="token string">&#39;docs.python.org:80&#39;</span><span class="token punctuation">,</span> path<span class="token operator">=</span><span class="token string">&#39;/3/library/urllib.parse.html&#39;</span><span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> query<span class="token operator">=</span><span class="token string">&#39;highlight=params&#39;</span><span class="token punctuation">,</span> fragment<span class="token operator">=</span><span class="token string">&#39;url-parsing&#39;</span><span class="token punctuation">)</span>
http
http<span class="token punctuation">:</span><span class="token operator">//</span>docs<span class="token punctuation">.</span>python<span class="token punctuation">.</span>org<span class="token punctuation">:</span><span class="token number">80</span><span class="token operator">/</span><span class="token number">3</span><span class="token operator">/</span>library<span class="token operator">/</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>html?highlight<span class="token operator">=</span>params<span class="token comment">#url-parsing</span>
SplitResult<span class="token punctuation">(</span>scheme<span class="token operator">=</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">,</span> netloc<span class="token operator">=</span><span class="token string">&#39;docs.python.org:80&#39;</span><span class="token punctuation">,</span> path<span class="token operator">=</span><span class="token string">&#39;/3/library/urllib.parse.html&#39;</span> query<span class="token operator">=</span><span class="token string">&#39;highlight=params&#39;</span><span class="token punctuation">,</span> fragment<span class="token operator">=</span><span class="token string">&#39;url-parsing&#39;</span><span class="token punctuation">)</span>
http<span class="token operator">%</span>3A<span class="token operator">//</span>docs<span class="token punctuation">.</span>python<span class="token punctuation">.</span>org<span class="token operator">%</span>3A80<span class="token operator">/</span><span class="token number">3</span><span class="token operator">/</span>library<span class="token operator">/</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>html<span class="token operator">%</span>3Fhighlight<span class="token operator">%</span>3Dparams<span class="token operator">%</span>23url<span class="token operator">-</span>parsing


base_url <span class="token operator">=</span> <span class="token string">&#39;http://httpbin.org/get?&#39;</span>
params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;wd&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;南北&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;code&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;height&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;188&#39;</span><span class="token punctuation">}</span>
params01 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;111&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;bbb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;222&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
url <span class="token operator">=</span> base_url<span class="token operator">+</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>params<span class="token punctuation">)</span>
url01 <span class="token operator">=</span> base_url<span class="token operator">+</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>params01<span class="token punctuation">,</span> doseq<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：http://httpbin.org/get?wd=%E5%8D%97%E5%8C%97&amp;code=1&amp;height=188</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>url01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：http://httpbin.org/get?aaa=111&amp;bbb=222</span>


url <span class="token operator">=</span> <span class="token string">&quot;http://httpbin.org/post&quot;</span>
headers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment"># 伪装一个火狐浏览器</span>
    <span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;host&quot;</span><span class="token punctuation">:</span> <span class="token string">&#39;httpbin.org&#39;</span>
<span class="token punctuation">}</span>
<span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Germey&quot;</span>
<span class="token punctuation">}</span>
<span class="token comment"># 转换数据类型</span>
data <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&quot;utf8&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 实例化对象</span>
req <span class="token operator">=</span> request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">)</span>
req<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;httpbin.org&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 添加请求头</span>
response <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>  <span class="token comment"># 发送数据</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> json</h3>`,8),H={href:"https://docs.python.org/zh-cn/3/library/json.html#module-json",target:"_blank",rel:"noopener noreferrer"},A=e(`<p><code>json</code> 内置模块，用于对 JSON 数据进行编解码。</p><ul><li><p><strong>json.dump(obj, fp[, skipkeys=False[, ensure_ascii=True[, check_circular=True[, allow_nan=True[, cls=None[, indent=None[, separators=None[, default=None[, sort_keys=False[, **kw]]]]]]]]]])</strong>：将 Python 内置类型序列化为 <code>json</code> 对象后写入文件，使用这个转换表将 <code>obj</code> 序列化为 JSON 格式化流形式的 <code>fp</code></p><ul><li><strong>obj</strong>：表示是要序列化的对象</li><li><strong>fp</strong>：文件描述符，将序列化的 <code>str</code> 保存到文件中。json 模块总是生成 <code>str</code> 对象，而不是字节对象；因此 <code>fp.write()</code> 必须支持 <code>str</code> 输入</li><li><strong>skipkeys</strong>：如果 <code>skipkeys</code> 是 <code>true</code>（默认为 <code>False</code>），那么那些不是基本对象（包括 <code>str</code>、<code>int</code>、<code>float</code>、<code>bool</code>、<code>None</code>）的字典的键会被跳过；否则引发一个 TypeError</li><li><strong>ensure_ascii</strong>：如果 <code>ensure_ascii</code> 是 <code>true</code>（即默认值），输出保证将所有输入的非 ASCII 字符转义。如果 <code>ensure_ascii</code> 是 <code>false</code>，这些字符会原样输出</li><li><strong>check_circular</strong>：如果 <code>check_circular</code> 为 <code>false</code>（默认值：True），那么将跳过容器类型的循环引用检查，循环引用将导致 RecursionError</li><li><strong>allow_nan</strong>：如果 <code>allow_nan</code> 是 <code>false</code>（默认为 <code>True</code>），那么在对严格 JSON 规格范围外的 float 类型值（<code>nan</code>、<code>inf</code> 和 <code>-inf</code>）进行序列化时会引发一个 ValueError。如果 <code>allow_nan</code> 是 <code>true</code>，则使用它们的 JavaScript 等价形式（<code>NaN</code>、<code>Infinity</code> 和 <code>-Infinity</code>）</li><li><strong>cls</strong>：为了使用一个自定义的 JSONEncoder 子类（比如：覆盖了 <code>default()</code> 方法来序列化额外的类型），通过 <code>cls</code> 关键字参数来指定；否则将使用 JSONEncoder</li><li><strong>indent</strong>：如果 <code>indent</code> 是一个非负整数或者字符串，那么 JSON 数组元素和对象成员会被美化输出为该值指定的缩进等级。如果缩进等级为零、负数或者 <code></code>，则只会添加换行符。<code>None</code>（默认值）选择最紧凑的表达。使用一个正整数会让每一层缩进同样数量的空格。如果 <code>indent</code> 是一个字符串（比如 <code>\\t</code>），那个字符串会被用于缩进每一层</li><li><strong>separators</strong>：当被指定时，<code>separators</code> 应当是一个（<code>item_separator</code>, <code>key_separator</code>）元组。当 <code>indent</code> 为 <code>None</code> 时，默认值取（<code>&#39;, &#39;</code>, <code>&#39;: &#39;</code>），不为 <code>None</code> 时采用（<code>&#39;,&#39;</code>, <code>&#39;: &#39;</code>）。为了得到最紧凑的 JSON 表达式，您应该指定其为（<code>&#39;,&#39;</code>, <code>&#39;: &#39;</code>）以消除空白字符</li><li><strong>default</strong>：当 <code>default</code> 被指定时，其应该是一个函数，每当某个对象无法被序列化时它会被调用。它应该返回该对象的一个可以被 JSON 编码的版本或者引发一个 TypeError。如果没有被指定，则会直接引发 TypeError</li><li><strong>sort_keys</strong>：如果 <code>sort_keys</code> 是 <code>true</code>（默认为 <code>False</code>），那么字典的输出会以键的顺序排序</li></ul></li><li><p><strong>json.dumps(obj[, skipkeys=False[, ensure_ascii=True[, check_circular=True[, allow_nan=True[, cls=None[, indent=None[, separators=None[, default=None[, sort_keys=False[, **kw]]]]]]]]]])</strong>：将 Python 对象编码成 JSON 字符串，使用这个转换表将 <code>obj</code> 序列化为 JSON 格式的 <code>str</code>。其参数的含义与 <code>dump()</code> 中的相同</p></li><li><p><strong>json.load(fp[, cls=None[, object_hook=None[, parse_float=None[, parse_int=None[, parse_constant=None[, object_pairs_hook=None[, **kw]]]]]]])</strong>：读取文件中 json 形式的字符串元素转化为 Python 类型，使用这个转换表将 <code>fp</code>（一个支持 <code>.read()</code> 并包含一个 JSON 文档的 <code>text file</code> 或者 <code>binary file</code>）反序列化为一个 Python 对象</p><ul><li><strong>fp</strong>：文件描述符，将 <code>fp</code>（<code>.read()</code> 支持包含 JSON 文档的文本文件或二进制文件）反序列化为 Python 对象</li><li><strong>cls</strong>：要使用自定义的 JSONDecoder 子类，用 <code>cls</code> 指定他；否则使用 JSONDecoder</li><li><strong>object_hook</strong>：默认值为 <code>None</code>，将使用任何对象文本解码的结果（dict）调用该函数。将使用 <code>object_hook</code> 的返回值而不是 dict。此功能可用于实现自定义解码器</li><li><strong>parse_float</strong>：默认值为 <code>None</code>。如果指定了 <code>parse_float</code>，用来对 JSON float 字符串进行解码，这可用于为 JSON 浮点数使用另一种数据类型或解析器</li><li><strong>parse_int</strong>：默认值为 <code>None</code>。如果指定了 <code>parse_int</code>，用来对 JSON <code>int</code> 字符串进行解码，这可以用于为 JSON 整数使用另一种数据类型或解析器</li><li><strong>parse_constant</strong>：默认值为 <code>None</code>。如果指定了 <code>parse_constant</code>，对 <code>-Infinity</code>、<code>Infinity</code> 和 <code>NaN</code> 字符串进行调用。如果遇到了无效的 JSON 符号，会引发异常</li><li><strong>object_pairs_hook</strong>：默认值为 <code>None</code>，它会被调用于每一个有序列表对解码出的对象字面量。<code>object_pairs_hook</code> 的返回值将会取代原本的 dict。这一特性能够被用于实现自定义解码器。如果 <code>object_hook</code> 也被定义，<code>object_pairs_hook</code> 优先</li></ul></li><li><p><strong>json.loads(s[, cls=None[, object_hook=None[, parse_float=None[, parse_int=None[, parse_constant=None[, object_pairs_hook=None[, **kw]]]]]]])</strong>：将已编码的 JSON 字符串解码为 Python 对象，使用这个转换表将 <code>s</code>（一个包含 JSON 文档的 <code>str</code>、<code>bytes</code> 或 <code>bytearray</code> 实例）反序列化为 Python 对象。其他参数的含义与 <code>load()</code> 中的相同。如果反序列化的数据不是有效 JSON 文档，引发 JSONDecodeError 错误</p></li><li><p><strong>json.JSONDecoder(*, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)</strong>：简单的 JSON 解码器</p></li><li><p><strong>json.JSONEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)</strong>：用于 Python 数据结构的可扩展 JSON 编码器</p></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>不带 <code>s</code> 的是序列化到文件或者从文件反序列化，带 <code>s</code> 的都是内存操作不涉及持久化</p></div><p><strong>JSON 中的数据格式和 Python 中的数据格式转化关系如下：</strong></p><table><thead><tr><th style="text-align:center;">JSON</th><th style="text-align:center;">Python</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>object</strong></td><td style="text-align:center;"><strong>dict</strong></td></tr><tr><td style="text-align:center;"><strong>array</strong></td><td style="text-align:center;"><strong>list</strong></td></tr><tr><td style="text-align:center;"><strong>string</strong></td><td style="text-align:center;"><strong>str</strong></td></tr><tr><td style="text-align:center;"><strong>number（整数）</strong></td><td style="text-align:center;"><strong>int</strong></td></tr><tr><td style="text-align:center;"><strong>number（真实的）</strong></td><td style="text-align:center;"><strong>float</strong></td></tr><tr><td style="text-align:center;"><strong>true</strong></td><td style="text-align:center;"><strong>True</strong></td></tr><tr><td style="text-align:center;"><strong>false</strong></td><td style="text-align:center;"><strong>False</strong></td></tr><tr><td style="text-align:center;"><strong>null</strong></td><td style="text-align:center;"><strong>None</strong></td></tr></tbody></table><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> json

data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;nanbei&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>
<span class="token comment"># 将 Python 对象编码成 json 字符串</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{&quot;name&quot;: &quot;nanbei&quot;, &quot;age&quot;: 18}</span>

a <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token comment"># 将 json 字符串解码成 Python 对象</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{&#39;name&#39;: &#39;nanbei&#39;, &#39;age&#39;: 18}</span>

data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;nanbei&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;haha&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;json_test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w+&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>data<span class="token punctuation">,</span> f<span class="token punctuation">)</span>

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;json_test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r+&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{&#39;nanbei&#39;: &#39;haha&#39;, &#39;a&#39;: [1, 2, 3, 4], &#39;b&#39;: [1, 2, 3]}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="shutil" tabindex="-1"><a class="header-anchor" href="#shutil" aria-hidden="true">#</a> shutil</h3>`,8),z={href:"https://docs.python.org/zh-cn/3/library/shutil.html#module-shutil",target:"_blank",rel:"noopener noreferrer"},L=e(`<p><code>shutil</code> 内置模块，用于对一系列文件和文件集合的高阶操作。</p><ul><li><p><strong>shutil.copyfileobj(fsrc, fdst[, length])</strong>：将文件类对象 <code>fsrc</code> 的内容拷贝到文件类对象 <code>fdst</code>，整数值 <code>length</code> 如果给出则为缓冲区大小</p></li><li><p><strong>shutil.copyfile(src, dst[, follow_symlinks=True])</strong>：将名为 <code>src</code> 的文件的内容（不包括元数据）拷贝到名为 <code>dst</code> 的文件并以尽可能高效的方式返回 <code>dst</code>。如果 <code>follow_symlinks</code> 为假值且 <code>src</code> 为符号链接，则将创建一个新的符号链接而不是拷贝 <code>src</code> 所指向的文件</p></li><li><p><strong>shutil.copymode(src, dst[, follow_symlinks=True])</strong>：从 <code>src</code> 拷贝权限到 <code>dst</code>。文件的内容、所有者和分组将不变</p></li><li><p><strong>shutil.copystat(src, dst[, follow_symlinks=True])</strong>：从 <code>src</code> 拷贝权限位、最近访问时间、最近修改时间以及旗标到 <code>dst</code>。如果 <code>follow_symlinks</code> 为假值，并且 <code>src</code> 和 <code>dst</code> 均指向符号链接，将作用于符号链接本身而非该符号链接所指向的文件 —— 从 <code>src</code> 符号链接读取信息，并将信息写入 <code>dst</code> 符号链接</p></li><li><p><strong>shutil.copy(src, dst[, follow_symlinks=True])</strong>：将文件 <code>src</code> 拷贝到文件或目录 <code>dst</code></p></li><li><p><strong>shutil.copy2(src, dst[, follow_symlinks=True])</strong>：将文件 <code>src</code> 拷贝到文件或目录 <code>dst</code>，并保留文件的元数据</p></li><li><p><strong>shutil.ignore_patterns(*patterns)</strong>：这个函数会创建一个函数，它可被用作 <code>copytree()</code> 的 <code>ignore</code> 可调用对象参数，以忽略那些匹配所提供的 glob 风格的 patterns 之一的文件和目录</p></li><li><p><strong>shutil.copytree(src, dst[, symlinks=False[, ignore=None[, copy_function=copy2[, ignore_dangling_symlinks=False[, dirs_exist_ok=False]]]]])</strong>：递归地将以 <code>src</code> 为根起点的整个目录树拷贝到名为 <code>dst</code> 的目录并返回目标目录。所需的包含 <code>dst</code> 的中间目录在默认情况下也将被创建</p><ul><li><strong>src</strong>：源目录</li><li><strong>dst</strong>：目标目录</li><li><strong>symlinks</strong>：如果 <code>symlinks</code> 为真值，源目录树中的符号链接会在新目录树中表示为符号链接，并且原链接的元数据在平台允许的情况下也会被拷贝；如果为假值或省略，则会将被链接文件的内容和元数据拷贝到新目录树</li><li><strong>ignore</strong>：如果给出了 <code>ignore</code>，它必须是一个可调用对象。该对象将接受 <code>copytree()</code> 所访问的目录以及 <code>os.listdir()</code> 所返回的目录内容列表作为其参数</li><li><strong>copy_function</strong>：如果给出了 <code>copy_function</code>，它必须是一个将被用来拷贝每个文件的可调用对象。它在被调用时会将源路径和目标路径作为参数传入，默认情况下 <code>copy2()</code> 将被使用，但任何支持同样签名（与 <code>copy()</code> 一致）都可以使用</li><li><strong>dirs_exist_ok</strong>：如果 <code>dirs_exist_ok</code> 为 <code>False</code>（默认的）且 <code>dst</code> 已存在，则会引发 FileExistsError；如果 <code>dirs_exist_ok</code> 为 <code>True</code>，则如果拷贝操作遇到已存在的目录时将继续执行，并且在 <code>dst</code> 目录树中的文件将被 <code>src</code> 目录树中对应的文件所覆盖</li></ul></li><li><p><strong>shutil.rmtree(path[, ignore_errors=False[, onerror=None[, dir_fd=None]]])</strong>：删除一个完整的目录树</p><ul><li><strong>path</strong>：必须指向一个目录（但不能是一个目录的符号链接）</li><li><strong>ignore_errors</strong>：如果 <code>ignore_errors</code> 为真值，删除失败导致的错误将被忽略；如果为假值或是省略，此类错误将通过调用由 <code>onerror</code> 所指定的处理程序来处理，或者如果此参数被省略则将引发一个异常</li></ul></li><li><p><strong>shutil.move(src, dst[, copy_function=copy2])</strong>：递归地将一个文件或目录 <code>src</code> 移至另一位置 <code>dst</code> 并返回目标位置，或将 <code>src</code> 重命名为 <code>dst</code></p></li><li><p><strong>shutil.disk_usage(path)</strong>：返回给定路径的磁盘使用统计数据，形式为一个 named tuple，其中包含 <code>total</code>、<code>used</code> 和 <code>free</code> 属性，分别表示总计、已使用和未使用空间的字节数。<code>path</code> 可以是一个文件或是一个目录</p></li><li><p><strong>shutil.chown(path, user=None, group=None)</strong>：修改给定 <code>path</code> 的所有者 <code>user</code> 或 <code>group</code></p></li><li><p><strong>shutil.make_archive(base_name, format[, root_dir[, base_dir[, dry_run[, owner[, group[, logger]]]]]])</strong>：创建一个归档文件（例如 <code>zip</code> 或 <code>tar</code>）并返回其名称</p><ul><li><strong>base_name</strong>：要创建的文件名称，包括路径，去除任何特定格式的扩展名</li><li><strong>format</strong>：归档格式：为 <code>zip</code>、<code>tar</code>、<code>gztar</code>（如 zlib 模块可用）、<code>bztar</code>（如 bz2 模块可用）或 <code>xztar</code>（如 lzma 模块可用）中的一个</li><li><strong>root_dir</strong>：是一个目录，它将作为归档文件的根目录，归档中的所有路径都将是它的相对路径。例如：通常会在创建归档之前用 <code>chdir</code> 命令切换到 <code>root_dir</code></li><li><strong>base_dir</strong>：要执行归档的起始目录；也就是说 <code>base_dir</code> 将成为归档中所有文件和目录共有的路径前缀。<code>base_dir</code> 必须相对于 <code>root_dir</code> 给出</li><li><strong>root_dir</strong> 和 <strong>base_dir</strong>：默认均为当前目录</li><li><strong>dry_run</strong>：如果 <code>dry_run</code> 为真值，则不会创建归档文件，但将要被执行的操作会被记录到 <code>logger</code></li><li><strong>owner</strong> 和 <strong>group</strong>：将在创建 <code>tar</code> 归档文件时被使用。默认会使用当前的所有者和分组</li><li><strong>logger</strong>：必须是一个兼容 PEP 282 的对象，通常为 <code>logging.Logger</code> 的实例</li></ul></li><li><p><strong>shutil.unpack_archive(filename[, extract_dir[, format]])</strong>：解包一个归档文件</p><ul><li><strong>filename</strong>：是归档文件的完整路径</li><li><strong>extract_dir</strong>：是归档文件解包的目标目录名称。如果未提供，则将使用当前工作目录</li><li><strong>format</strong>：是归档格式：应为 <code>zip</code>、<code>tar</code>、<code>gztar</code>、<code>bztar</code> 或 <code>xztar</code> 之一</li></ul></li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>shutil<span class="token punctuation">.</span>copyfileobj<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;hello.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;hello_01.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 将文件内容拷贝到另一个文件中</span>
shutil<span class="token punctuation">.</span>copyfile<span class="token punctuation">(</span><span class="token string">&#39;hello.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello_02.txt&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 拷贝文件</span>
shutil<span class="token punctuation">.</span>copymode<span class="token punctuation">(</span><span class="token string">&#39;hello.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello_03.txt&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 仅拷贝权限。内容、组、用户均不变</span>
shutil<span class="token punctuation">.</span>copystat<span class="token punctuation">(</span><span class="token string">&#39;hello.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello_04.txt&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 仅拷贝状态的信息，包括：mode bits, atime, mtime, flags</span>
shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token string">&#39;hello.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello_05.txt&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 拷贝文件和权限</span>
shutil<span class="token punctuation">.</span>copy2<span class="token punctuation">(</span><span class="token string">&#39;hello.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello_06.txt&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 拷贝文件和状态信息</span>
shutil<span class="token punctuation">.</span>copytree<span class="token punctuation">(</span><span class="token string">&#39;folder1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;folder2&#39;</span><span class="token punctuation">,</span> ignore<span class="token operator">=</span>shutil<span class="token punctuation">.</span>ignore_patterns<span class="token punctuation">(</span><span class="token string">&#39;*.pyc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tmp*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 递归的去拷贝除以 .pyc 结尾和 tmp 开头的文件夹</span>
shutil<span class="token punctuation">.</span>copytree<span class="token punctuation">(</span><span class="token string">&#39;folder1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;folder2&#39;</span><span class="token punctuation">,</span> symlinks<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ignore<span class="token operator">=</span>shutil<span class="token punctuation">.</span>ignore_patterns<span class="token punctuation">(</span><span class="token string">&#39;*.pyc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tmp*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
shutil<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span><span class="token string">&#39;folder1&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 递归的去删除文件</span>
shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">&#39;folder1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;folder3&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 递归的去移动文件，它类似 mv 命令，其实就是重命名</span>
shutil<span class="token punctuation">.</span>disk_usage<span class="token punctuation">(</span><span class="token string">&#39;/root&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 查看指定文件或目录的磁盘使用信息</span>
shutil<span class="token punctuation">.</span>chown<span class="token punctuation">(</span><span class="token string">&#39;hello.txt&#39;</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> group<span class="token operator">=</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 修改指定文件或目录的所属用户或组</span>

archive_name <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>expanduser<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">&#39;~&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;myarchive&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 对文件或目录进行归档</span>
root_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>expanduser<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">&#39;~&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.ssh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
shutil<span class="token punctuation">.</span>make_archive<span class="token punctuation">(</span>archive_name<span class="token punctuation">,</span> <span class="token string">&#39;zip&#39;</span><span class="token punctuation">,</span> root_dir<span class="token punctuation">)</span>

shutil<span class="token punctuation">.</span>unpack_archive<span class="token punctuation">(</span><span class="token string">&#39;myarchive.zip&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 解压归档文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tkinter" tabindex="-1"><a class="header-anchor" href="#tkinter" aria-hidden="true">#</a> tkinter</h3>`,5),I={href:"https://docs.python.org/zh-cn/3/library/tkinter.html#module-tkinter",target:"_blank",rel:"noopener noreferrer"},U=n("p",null,[n("code",null,"tkinter"),s(" 内置模块，用于进行窗口视窗设计的模块。")],-1),W=n("h3",{id:"string",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#string","aria-hidden":"true"},"#"),s(" string")],-1),J={href:"https://docs.python.org/zh-cn/3/library/string.html#module-string",target:"_blank",rel:"noopener noreferrer"},B=e('<p><code>string</code> 内置模块，用于对字符串操作。</p><ul><li><strong>str.capitalize()</strong>：把字符串的第一个字符大写</li><li><strong>str.center(width)</strong>：返回一个原字符串居中，并使用空格填充到 <code>width</code> 长度的新字符串</li><li><strong>str.ljust(width)</strong>：返回一个原字符串左对齐，用空格填充到指定长度的新字符串</li><li><strong>str.rjust(width)</strong>：返回一个原字符串右对齐，用空格填充到指定长度的新字符串</li><li><strong>str.zfill(width)</strong>：返回字符串右对齐，前面用 <code>0</code> 填充到指定长度的新字符串</li><li><strong>str.count(str[, beg, len])</strong>：返回子字符串在原字符串出现次数，<code>beg</code>、<code>len</code> 是范围</li><li><strong>str.decode(encodeing[, replace])</strong>：解码 string，出错引发 ValueError 异常</li><li><strong>str.encode(encodeing[, replace])</strong>：编码 string</li><li><strong>str.endswith(substr[, beg, end])</strong>：字符串是否以 <code>substr</code> 结束，<code>beg</code>、<code>len</code> 是范围</li><li><strong>str.startswith(substr[, beg, end])</strong>：字符串是否以 <code>substr</code> 开头，<code>beg</code>、<code>len</code> 是范围</li><li><strong>str.expandtabs(tabsize = 8)</strong>：把字符串的 <code>tab</code> 转为空格，默认为 <code>8</code> 个</li><li><strong>str.find(str[, stat, end])</strong>：查找子字符串在字符串第一次出现的位置，否则返回 <code>-1</code></li><li><strong>str.index(str[, beg, end])</strong>：查找子字符串在指定字符中的位置，不存在报异常</li><li><strong>str.isalnum()</strong>：检查字符串是否以字母和数字组成，是返回 true 否则 False</li><li><strong>str.isalpha()</strong>：检查字符串是否以纯字母组成，是返回 true，否则 false</li><li><strong>str.isdecimal()</strong>：检查字符串是否以纯十进制数字组成，返回布尔值</li><li><strong>str.isdigit()</strong>：检查字符串是否以纯数字组成，返回布尔值</li><li><strong>str.islower()</strong>：检查字符串是否全是小写，返回布尔值</li><li><strong>str.isupper()</strong>：检查字符串是否全是大写，返回布尔值</li><li><strong>str.isnumeric()</strong>：检查字符串是否只包含数字字符，返回布尔值</li><li><strong>str.isspace()</strong>：如果 <code>str</code> 中只包含空格，则返回 true,否则 FALSE</li><li><strong>str.title()</strong>：返回标题化的字符串（所有单词首字母大写，其余小写）</li><li><strong>str.istitle()</strong>：如果字符串是标题化的（参见 <code>title()</code>）则返回 true，否则 false</li><li><strong>str.join(seq)</strong>：以 <code>str</code> 作为连接符，将一个序列中的元素连接成字符串</li><li><strong>str.split(str=&#39;&#39;, num)</strong>：以 <code>str</code> 作为分隔符，将一个字符串分隔成一个序列，<code>num</code> 是被分隔的字符串</li><li><strong>str.splitlines(num)</strong>：以行分隔，返回各行内容作为元素的列表</li><li><strong>str.lower()</strong>：将大写转为小写</li><li><strong>str.upper()</strong>：转换字符串的小写为大写</li><li><strong>str.swapcase()</strong>：翻换字符串的大小写</li><li><strong>str.lstrip()</strong>：去掉字符左边的空格和回车换行符</li><li><strong>str.rstrip()</strong>：去掉字符右边的空格和回车换行符</li><li><strong>str.strip()</strong>：去掉字符两边的空格和回车换行符</li><li><strong>str.partition(substr)</strong>：从 <code>substr</code> 出现的第一个位置起，将 <code>str</code> 分割成一个 <code>3</code> 元组</li><li><strong>str.replace(str1, str2, num)</strong>：查找 <code>str1</code> 替换成 <code>str2</code>，<code>num</code> 是替换次数</li><li><strong>str.rfind(str[, beg, end])</strong>：从右边开始查询子字符串</li><li><strong>str.rindex(str[, beg, end])</strong>：从右边开始查找子字符串位置</li><li><strong>str.rpartition(str)</strong>：类似 <code>partition</code> 函数，不过从右边开始查找</li><li><strong>str.translate(str, del=&#39;&#39;)</strong>：按 <code>str</code> 给出的表转换 string 的字符，<code>del</code> 是要过虑的字符</li></ul><h3 id="csv" tabindex="-1"><a class="header-anchor" href="#csv" aria-hidden="true">#</a> csv</h3>',3),Y={href:"https://docs.python.org/zh-cn/3/library/csv.html#module-csv",target:"_blank",rel:"noopener noreferrer"},G=n("h3",{id:"getpass",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#getpass","aria-hidden":"true"},"#"),s(" getpass")],-1),K={href:"https://docs.python.org/zh-cn/3/library/getpass.html#module-getpass",target:"_blank",rel:"noopener noreferrer"},Q=e(`<p><code>getpass</code> 内置模块，用于对密码处理。</p><ul><li><p><strong>getpass.getpass([prompt=&#39;Password: &#39;, [stream=None]])</strong>：输入密码，且密码不会显示</p><ul><li><strong>prompt</strong>：参数用于提示用户，默认值为 <code>Password</code></li><li><strong>stream</strong>：参数用于如有必要提示会使用替换错误句柄写入到文件类对象 <code>stream</code>，默认值为 <code>None(/dev/tty)</code></li></ul></li><li><p><strong>getpass.getuser()</strong>：返回用户的登录名</p></li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
不给用户任何提示，将使用默认提示，即 Password
&quot;&quot;&quot;</span>
<span class="token keyword">import</span> getpass

<span class="token keyword">try</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> getpass<span class="token punctuation">.</span>getpass<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> Exception <span class="token keyword">as</span> error<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;ERROR&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Password entered:&#39;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
Password<span class="token punctuation">:</span>
Password entered<span class="token punctuation">:</span> abc<span class="token punctuation">.</span><span class="token number">123</span>

<span class="token triple-quoted-string string">&quot;&quot;&quot;
给用户提示 “Enter your password:”
&quot;&quot;&quot;</span>
<span class="token keyword">import</span> getpass

<span class="token keyword">try</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> getpass<span class="token punctuation">.</span>getpass<span class="token punctuation">(</span>prompt<span class="token operator">=</span><span class="token string">&#39;Enter your password: &#39;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> Exception <span class="token keyword">as</span> error<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;ERROR:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Password entered:&#39;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
Enter your password<span class="token punctuation">:</span>
Password entered<span class="token punctuation">:</span> abc<span class="token punctuation">.</span><span class="token number">123</span>

<span class="token triple-quoted-string string">&quot;&quot;&quot;
给用户任何提示 “Enter your password:”，并获取当前用户名
&quot;&quot;&quot;</span>
<span class="token keyword">import</span> getpass

user_name <span class="token operator">=</span> getpass<span class="token punctuation">.</span>getuser<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;User Name: %s&#39;</span> <span class="token operator">%</span> user_name<span class="token punctuation">)</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    passwd <span class="token operator">=</span> getpass<span class="token punctuation">.</span>getpass<span class="token punctuation">(</span>prompt<span class="token operator">=</span><span class="token string">&#39;Enter your Password: &#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> passwd <span class="token operator">==</span> <span class="token string">&#39;abc.123&#39;</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Welcome&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;The password you entered is incorrect!&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="configparser" tabindex="-1"><a class="header-anchor" href="#configparser" aria-hidden="true">#</a> configparser</h3>`,5),V={href:"https://docs.python.org/zh-cn/3/library/configparser.html#module-configparser",target:"_blank",rel:"noopener noreferrer"},X=e(`<p><code>configparser</code> 内置模块，用于管理应用程序的可编辑配置文件。</p><ul><li><strong>configparser.ConfigParser.read()</strong>：用于接收一个或多个文件。它会检测每个文件，只要该文件存在，就会打开该文件并读取内容</li><li><strong>configparser.ConfigParser.get()</strong>：用于获取返回值</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> configparser <span class="token keyword">import</span> ConfigParser

p <span class="token operator">=</span> ConfigParser<span class="token punctuation">(</span><span class="token punctuation">)</span>
files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;hello.ini&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bye.ini&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;read_simple.ini&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;welcome.ini&#39;</span><span class="token punctuation">]</span>
files_found <span class="token operator">=</span> p<span class="token punctuation">.</span>read<span class="token punctuation">(</span>files<span class="token punctuation">)</span>
files_missing <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span>files_found<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Files found: &#39;</span><span class="token punctuation">,</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>files_found<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Files missing: &#39;</span><span class="token punctuation">,</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>files_missing<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
Files found<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;read_simple.ini&#39;</span><span class="token punctuation">]</span>
Files missing<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;bye.ini&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello.ini&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;welcome.ini&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="logging" tabindex="-1"><a class="header-anchor" href="#logging" aria-hidden="true">#</a> logging</h3>`,5),$={href:"https://docs.python.org/zh-cn/3/library/logging.html#module-logging",target:"_blank",rel:"noopener noreferrer"},Z=e(`<p><code>logging</code> 内置模块，用于跟踪程序中发生的事件。</p><ul><li><p><strong>logging.basicConfig(**kwargs)</strong>：设置 log 信息的基本配置参数</p><ul><li><strong>filename</strong>：使用指定的文件名创建一个 <code>FileHandler</code>，而不是 <code>StreamHandler</code></li><li><strong>filemode</strong>：如果指定了 <code>filename</code>，则用此模式打开该文件。默认模式为 <code>a</code></li><li><strong>format</strong>：使用指定的格式字符串作为处理器。默认为属性以冒号分隔的 <code>levelname</code>、<code>name</code> 和 <code>message</code></li><li><strong>datefmt</strong>：使用指定的日期或时间格式，与 <code>time.strftime()</code> 所接受的格式相同</li><li><strong>style</strong>：如果指定了 <code>format</code>，将为格式字符串使用此风格。<code>%</code>、<code>{</code> 或 <code>$</code> 分别对应于 printf 风格, <code>str.format()</code> 或 <code>string.Template</code>。默认为 <code>%</code></li><li><strong>level</strong>：设置根记录器级别为指定的 <code>level</code></li><li><strong>stream</strong>：使用指定的流初始化 <code>StreamHandler</code>。请注意此参数与 <code>filename</code> 不兼容 —— 如果两者同时存在，则会引发 ValueError</li><li><strong>handlers</strong>：如果指定，这应为一个包含要加入根日志记录器的已创建处理器的可迭代对象。任何尚未设置格式描述符的处理器将被设置为在此函数中创建的默认格式描述符。请注意此参数与 <code>filename</code> 或 <code>stream</code> 不兼容 —— 如果两者同时存在，则会引发 ValueError</li><li><strong>force</strong>：如果将此关键字参数指定为 true，则在执行其他参数指定的配置之前，将移除并关闭附加到根记录器的所有现有处理器</li><li><strong>encoding</strong>：如果此关键字参数与 <code>filename</code> 一同被指定，则其值会在创建 <code>FileHandler</code> 时被使用，因而也会在打开输出文件时被使用</li><li><strong>errors</strong>：如果此关键字参数与 <code>filename</code> 一同被指定，则其值会在创建 <code>FileHandler</code> 时被使用，因而也会在打开输出文件时被使用。如果未指定，则会使用值 <code>backslashreplace</code>。请注意如果指定为 <code>None</code>，它将被原样传给 <code>open()</code>，这意味着它将会当作传入 <code>errors</code> 一样处理</li></ul></li><li><p><strong>logging.info(msg, *args, **kwargs)</strong>：在根日志记录器上记录一条 <code>INFO</code> 级别的消息</p></li><li><p><strong>logging.getLogger(name=None)</strong>：返回具有指定 <code>name</code> 的日志记录器，或者当 <code>name</code> 为 <code>None</code> 时返回层级结构中的根日志记录器，默认值为 <code>root</code></p></li><li><p><strong>logging.StreamHandler(stream=None)</strong>：返回一个新的 <code>StreamHandler</code> 类。如果指定了 <code>stream</code>，则实例将用它作为日志记录输出；在其他情况下将使用 <code>sys.stderr</code></p></li><li><p><strong>logging.FileHandler(filename, *, mode=&#39;a&#39;, encoding=None, delay=False, errors=None)</strong>：返回一个 <code>FileHandler</code> 类的新实例。将打开指定的文件并将其用作日志记录流。<code>mode</code> 默认为 <code>a</code>。如果 <code>encoding</code> 不为 <code>None</code>，则会将其用作打开文件的编码格式。如果 <code>delay</code> 为真值，则文件打开会被推迟至第一次调用 <code>emit()</code> 时。默认情况下，文件会无限增长。如果指定了 <code>errors</code>，它会被用于确定编码格式错误的处理方式</p></li><li><p><strong>logging.Formatter(fmt=None, datefmt=None, style=&#39;%&#39;, validate=True, *, defaults=None)</strong>：返回 <code>Formatter</code> 类的新实例。实例将使用整个消息的格式字符串以及消息的日期或时间部分的格式字符串进行初始化。如果未指定 <code>fmt</code>，则使用 <code>%(message)s</code></p></li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 记录日志到文件</span>
logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">&#39;example.log&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span> level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">&#39;is when this event was logged.&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 记录变量数据</span>
logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">&#39;%s before you %s&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Look&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;leap!&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 更改显示消息的格式</span>
logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span><span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&#39;%(asctime)s %(levelname)s:%(message)s&#39;</span><span class="token punctuation">,</span> level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">&#39;is when this event was logged.&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="warnings" tabindex="-1"><a class="header-anchor" href="#warnings" aria-hidden="true">#</a> warnings</h3>`,5),nn={href:"https://docs.python.org/zh-cn/3/library/warnings.html#module-warnings",target:"_blank",rel:"noopener noreferrer"},sn=n("p",null,[n("code",null,"warnings"),s(" 内置模块，用于警告程序员关于语言和程序库中所做的更改。")],-1),an=n("h3",{id:"glob",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#glob","aria-hidden":"true"},"#"),s(" glob")],-1),tn={href:"https://docs.python.org/zh-cn/3/library/glob.html#module-glob",target:"_blank",rel:"noopener noreferrer"},en=e(`<p><code>glob</code> 内置模块，用于查找与特定模式匹配的文件和目录名称，并将搜索的到的结果返回到一个列表中。</p><ul><li><p><strong>glob.glob(pathname, *, root_dir=None, dir_fd=None, recursive=False, include_hidden=False)</strong>：返回符合匹配条件的所有文件的路径</p><ul><li><strong>pathname</strong>：返回与路径名匹配的路径名的可能为空的列表，该列表必须是包含路径规范的字符串。路径名可以是绝对的（如 <code>/usr/src/Python-1.5/Makefile</code>）或相对的（如 <code>../../Tools/*/*.gif</code>），并且可以包含 <code>shell</code> 样式的通配符。断开的符号链接包含在结果中（如 <code>shell</code> 中）。结果是否排序取决于文件系统。如果在调用此函数期间删除或添加了满足条件的文件，则未指定是否包含该文件的路径名</li><li><strong>root_dir</strong>：如果 <code>root_dir</code> 不为 <code>None</code>，则它应当是指明要搜索的根目录的 path-like object。它用在 <code>glob()</code> 上与在调用它之前改变当前目录有相同的效果。如果 <code>pathname</code> 为相对路径，结果将包含相对于 <code>root_dir</code> 的路径</li><li><strong>dir_fd</strong>：本函数带有 <code>dir_fd</code> 参数，支持基于目录描述符的相对路径</li><li><strong>recursive=False</strong>：代表递归调用，与特殊通配符 <code>**</code> 一同使用，默认为 <code>False</code>，<code>False</code> 表示不递归调用，<code>True</code> 表示递归调用</li><li><strong>include_hidden</strong>：如果 <code>include_inhidden</code> 为 <code>true</code>，<code>**</code> 模式将匹配隐藏目录</li></ul></li><li><p><strong>glob.iglob(pathname, *, root_dir=None, dir_fd=None, recursive=False, include_hidden=False)</strong>：返回一个迭代器对象，需要循环遍历获取每个元素，得到的也是符合匹配条件的所有文件的路径</p></li><li><p><strong>glob.escape(pathname)</strong>：<code>escape</code> 可以忽略所有的特殊字符，就是星号（<code>*</code>）、问号（<code>?</code>）、中括号（<code>[]</code>），用处不大</p></li></ul><p><strong>支持 4 个常用的通配符：</strong></p><ul><li><strong>*</strong>：匹配 0 个或多个字符</li><li><strong>**</strong>：匹配所有文件、目录、子目录和子目录里的文件</li><li><strong>?</strong>：匹配一个字符</li><li><strong>[]</strong>：匹配指定范围内的字符。例如：[0-9] 匹配数字，[a-z] 匹配小写字母</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">&#39;./[0-9].*&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 查找匹配当前目录下以 0~9 命名的文件</span>

a <span class="token operator">=</span> glob<span class="token punctuation">.</span>iglob<span class="token punctuation">(</span><span class="token string">&#39;./[0-9].*&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 查找匹配当前目录下以 0~9 命名的文件</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

glob<span class="token punctuation">.</span>escape<span class="token punctuation">(</span><span class="token string">&#39;t*&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 查找包含特殊字符的文件或目录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tarfile" tabindex="-1"><a class="header-anchor" href="#tarfile" aria-hidden="true">#</a> tarfile</h3>`,7),on={href:"https://docs.python.org/zh-cn/3/library/tarfile.html#module-tarfile",target:"_blank",rel:"noopener noreferrer"},pn=e(`<p><code>tarfile</code> 内置模块，用于读写 <code>tar</code> 归档，包括使用 <code>gzip</code>、<code>bz2</code> 和 <code>lzma</code> 压缩的归档。</p><ul><li><strong>tarfile.open(name=None, mode=&#39;r&#39;, fileobj=None, bufsize=10240, **kwargs)</strong>：针对路径名 <code>name</code> 返回 <code>TarFile</code> 对象</li><li><strong>tarfile.is_tarfile(name)</strong>：如果 <code>name</code> 是一个 <code>tarfile</code> 能读取的 <code>tar</code> 归档文件则返回 <code>True</code></li><li><strong>TarFile.getnames()</strong>：以名称列表的形式返回成员。它的顺序与 <code>getmembers()</code> 所返回列表的顺序一致</li><li><strong>TarFile.getmembers()</strong>：以 <code>TarInfo</code> 对象列表的形式返回归档的成员。列表的顺序与归档中成员的顺序一致</li><li><strong>TarFile.extractall(path=&#39;.&#39;, members=None, *, numeric_owner=False)</strong>：将归档中的所有成员提取到当前工作目录或 <code>path</code> 目录。如果给定了可选的 <code>members</code>，则它必须为 <code>getmembers()</code> 所返回的列表的一个子集。如果 <code>numeric_owner</code> 为 <code>True</code>，则将使用来自 <code>tarfile</code> 的 <code>uid</code> 和 <code>gid</code> 数值来设置被提取文件的所有者或用户组</li><li><strong>TarFile.add(name, arcname=None, recursive=True, *, filter=None)</strong>：将文件 <code>name</code> 添加到归档</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">import</span> tarfile
<span class="token keyword">import</span> shutil


<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;creating archive&#39;</span><span class="token punctuation">)</span>

shutil<span class="token punctuation">.</span>make_archive<span class="token punctuation">(</span><span class="token string">&#39;work&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tar&#39;</span><span class="token punctuation">,</span> root_dir<span class="token operator">=</span><span class="token string">&#39;..&#39;</span><span class="token punctuation">,</span> base_dir<span class="token operator">=</span><span class="token string">&#39;work&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\nArchive contents:&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> tarfile<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;work.tar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> t_file<span class="token punctuation">:</span>
    <span class="token keyword">for</span> names <span class="token keyword">in</span> t_file<span class="token punctuation">.</span>getnames<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span>

os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">&#39;touch sample.txt&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;adding sample.txt&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> tarfile<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;work.tar&#39;</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> t<span class="token punctuation">:</span>
    t<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">&#39;sample.txt&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;contents:&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> tarfile<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;work.tar&#39;</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> t<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>m<span class="token punctuation">.</span>name <span class="token keyword">for</span> m <span class="token keyword">in</span> t<span class="token punctuation">.</span>getmembers<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">&#39;work&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> tarfile<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;work.tar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> t<span class="token punctuation">:</span>
    t<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span><span class="token string">&#39;work&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">&#39;work&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="textwrap" tabindex="-1"><a class="header-anchor" href="#textwrap" aria-hidden="true">#</a> textwrap</h3>`,5),cn={href:"https://docs.python.org/zh-cn/3/library/textwrap.html#module-textwrap",target:"_blank",rel:"noopener noreferrer"},ln=e(`<p><code>textwrap</code> 内置模块，用于文本自动换行与填充。</p><ul><li><strong>textwrap.wrap(text, width=70, *, initial_indent=&#39;&#39;, subsequent_indent=&#39;&#39;, expand_tabs=True, replace_whitespace=True, fix_sentence_endings=False, break_long_words=True, drop_whitespace=True, break_on_hyphens=True, tabsize=8, max_lines=None, placeholder=&#39; [...]&#39;)</strong>：对 text（字符串）中的单独段落自动换行以使每行长度最多为 <code>width</code> 个字符。返回由输出行组成的列表，行尾不带换行符</li><li><strong>textwrap.fill(text, width=70, *, initial_indent=&#39;&#39;, subsequent_indent=&#39;&#39;, expand_tabs=True, replace_whitespace=True, fix_sentence_endings=False, break_long_words=True, drop_whitespace=True, break_on_hyphens=True, tabsize=8, max_lines=None, placeholder=&#39; [...]&#39;)</strong>：对 text 中的单独段落自动换行，并返回一个包含被自动换行段落的单独字符串，而不是列表</li><li><strong>textwrap.shorten(text, width, *, fix_sentence_endings=False, break_long_words=True, break_on_hyphens=True, placeholder=&#39; [...]&#39;)</strong>：将折叠 text 中的空格（所有连续空格替换为单个空格）。如果结果能适合 <code>width</code> 则将其返回。否则将丢弃足够数量的末尾单词以使得剩余单词加 <code>placeholder</code> 能适合 <code>width</code></li><li><strong>textwrap.dedent(text)</strong>：移除 text 中每一行的任何相同前缀空白符</li><li><strong>textwrap.indent(text, prefix[, predicate=None])</strong>：将 <code>prefix</code> 添加到 text 中选定行的开头</li><li><strong>textwrap.TextWrapper(**kwargs)</strong>：<code>TextWrapper</code> 构造器接受多个可选的关键字参数。每个关键字参数对应一个实例属性</li></ul><p><strong>TextWrapper 的实例属性（以及构造器的关键字参数）:</strong></p><ul><li><strong>width</strong>：默认为 <code>70</code>，自动换行的最大行长度</li><li><strong>expand_tabs</strong>：默认为 <code>True</code>。如果为真值，则 text 中所有的制表符将使用 text 的 <code>expandtabs()</code> 方法扩展为空格符</li><li><strong>tabsize</strong>：默认为 <code>8</code>。如果 <code>expand_tabs</code> 为真值，则 text 中所有的制表符将扩展为零个或多个空格，具体取决于当前列位置和给定的制表宽度</li><li><strong>replace_whitespace</strong>：默认为 <code>True</code>。如果为真值，在制表符扩展之后、自动换行之前，<code>wrap()</code> 方法将把每个空白字符都替换为单个空格。会被替换的空白字符如下：制表，换行，垂直制表、换页和回车（<code>\\t\\n\\v\\f\\r</code>）</li><li><strong>drop_whitespace</strong>：默认为 <code>True</code>。如果为真值，每一行开头和末尾的空白字符（在包装之后、缩进之前）会被丢弃。但是段落开头的空白字符如果后面不带任何非空白字符则不会被丢弃。如果被丢弃的空白字符占据了一个整行，则该整行将被丢弃</li><li><strong>initial_indent</strong>：默认为 <code>&#39;&#39;</code>，将被添加到被自动换行输出内容的第一行的字符串。其长度会被计入第一行的长度。空字符串不会被缩进</li><li><strong>subsequent_indent</strong>：默认为 <code>&#39;&#39;</code>，将被添加到被自动换行输出内容除第一行外的所有行的字符串。其长度会被计入除行一行外的所有行的长度</li><li><strong>fix_sentence_endings</strong>：默认为 <code>False</code>。如果为真值，<code>TextWrapper</code> 将尝试检测句子结尾并确保句子间总是以恰好两个空格符分隔。对于使用等宽字体的文本来说通常都需要这样</li><li><strong>break_long_words</strong>：默认为 <code>True</code>。如果为真值，则长度超过 <code>width</code> 的单词将被分开以保证行的长度不会超过 <code>width</code>。如果为假值，超长单词不会被分开，因而某些行的长度可能会超过 <code>width</code>（超长单词将被单独作为一行，以尽量减少超出 <code>width</code> 的情况）</li><li><strong>break_on_hyphens</strong>：默认为 <code>True</code>。如果为真值，将根据英语的惯例首选在空白符和复合词的连字符之后自动换行。如果为假值，则只有空白符会被视为合适的潜在断行位置，但如果您确实不希望出现分开的单词则您必须将 <code>break_long_words</code> 设为假值</li><li><strong>max_lines</strong>：默认为 <code>None</code>。如果不为 <code>None</code>，则输出内容将最多包含 <code>max_lines</code> 行，并使 <code>placeholder</code> 出现在输出内容的末尾</li><li><strong>placeholder</strong>：默认为 <code>&#39; […]&#39;</code>，该文本将在输出文本被截短时出现在文本末尾</li></ul><p><strong>TextWrapper 还提供了一些公有方法，类似于模块层级的便捷函数：</strong></p><ul><li><strong>wrap(text)</strong>：对 text（字符串）中的单独段落自动换行以使每行长度最多为 <code>width</code> 个字符。所有自动换行选项均获取自 <code>TextWrapper</code> 实例的实例属性。返回由输出行组成的列表，行尾不带换行符。如果自动换行输出结果没有任何内容，则返回空列表</li><li><strong>fill(text)</strong>：对 text 中的单独段落自动换行，并返回包含被自动换行段落的单独字符串</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> textwrap

sample_string <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;Python is an interpreted high-level programming language
for general-purpose programming. Created by Guido van Rossum and first
released in 991, Python has a design philosophy that emphasizes code
readability, notably using significant whitespace.&#39;&#39;&#39;</span>

w <span class="token operator">=</span> textwrap<span class="token punctuation">.</span>wrap<span class="token punctuation">(</span>text<span class="token operator">=</span>sample_string<span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token punctuation">[</span><span class="token string">&#39;Python is an interpreted high-&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;level programming language for&#39;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token string">&#39;significant whitespace.&#39;</span><span class="token punctuation">]</span>

sample_string <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;Python is an interpreted high-level programming
language.&#39;&#39;&#39;</span>

w <span class="token operator">=</span> textwrap<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>text<span class="token operator">=</span>sample_string<span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
Python <span class="token keyword">is</span> an interpreted high<span class="token operator">-</span>
level programming language <span class="token keyword">for</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略部分内容
significant whitespace<span class="token punctuation">.</span>


str1 <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;\\
    Hello Python World \\tThis is Python 101
    Scripting language\\n
    Python is an interpreted high-level programming language for
    general-purpose programming.
&#39;&#39;&#39;</span>

s <span class="token operator">=</span> textwrap<span class="token punctuation">.</span>shorten<span class="token punctuation">(</span>str1<span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：Hello Python World This is Python 101 [...]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Original: \\n&quot;</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
t <span class="token operator">=</span> textwrap<span class="token punctuation">.</span>dedent<span class="token punctuation">(</span>str1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Dedented: \\n&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
Original<span class="token punctuation">:</span> 
     Hello Python World 	This <span class="token keyword">is</span> Python <span class="token number">101</span>
    Scripting language

    Python <span class="token keyword">is</span> an interpreted high<span class="token operator">-</span>level programming language <span class="token keyword">for</span>
    general<span class="token operator">-</span>purpose programming<span class="token punctuation">.</span>


Dedented<span class="token punctuation">:</span> 
 Hello Python World 	This <span class="token keyword">is</span> Python <span class="token number">101</span>
Scripting language

Python <span class="token keyword">is</span> an interpreted high<span class="token operator">-</span>level programming language <span class="token keyword">for</span>
general<span class="token operator">-</span>purpose programming<span class="token punctuation">.</span>


w <span class="token operator">=</span> textwrap<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>sample_string<span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>
i <span class="token operator">=</span> textwrap<span class="token punctuation">.</span>indent<span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token operator">*</span>Python <span class="token keyword">is</span> an interpreted high<span class="token operator">-</span>
<span class="token operator">*</span>level programming language <span class="token keyword">for</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略部分内容
<span class="token operator">*</span>significant whitespace<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="smtplib" tabindex="-1"><a class="header-anchor" href="#smtplib" aria-hidden="true">#</a> smtplib</h3>`,9),rn={href:"https://docs.python.org/zh-cn/3/library/smtplib.html#module-smtplib",target:"_blank",rel:"noopener noreferrer"},un=e(`<p><code>smtplib</code> 内置模块，用于发送邮件，它对 <code>smtp</code> 协议进行了简单的封装。</p><ul><li><p><strong>smtplib.SMTP(host, port[, local_hostname=None[, timeout[, source_address=None]]])</strong>：用于连接邮箱服务器。它提供了支持各种 SMTP 和 ESMTP 操作的方法</p><ul><li><strong>host</strong>：邮箱服务器地址。如：<code>smtp.163.com</code>（163 邮箱）、<code>smtp.qq.com</code>（QQ 邮箱）、<code>smtp.gmail.com</code>（Google 邮箱）</li><li><strong>port</strong>：邮箱服务端口。如：SSL 协议端口 <code>465/994</code>，SSL 加密，保密性高；非 SSL 协议端口 <code>25</code></li><li><strong>local_hostname</strong>：它将在 <code>HELO/EHLO</code> 命令中被用作本地主机的 <code>FQDN</code>（完全合格域名：主机名.域名）</li><li><strong>timeout</strong>：设置超时时间</li><li><strong>source_address</strong>：允许在有多张网卡的计算机中绑定到某些特定的源地址和绑定到某些特定的源 TCP 端口。它接受一个二元组（<code>host</code>, <code>port</code>）作为在连接之前所绑定作为其源地址的套接字</li></ul></li><li><p><strong>smtplib.SMTP_SSL(host, port[, local_hostname=None[, keyfile=None[, certfile=None[, timeout[, context=None[, source_address=None]]]]]])</strong>：用于 SSL 连接邮箱服务器。其它选项和 <code>SMTP</code> 一样</p><ul><li><strong>keyfile</strong> 和 <strong>certfile</strong>：是 <code>context</code> 的传统替代物，它们可以指向 PEM 格式的私钥和证书链文件用于 SSL 连接</li></ul></li></ul><p><strong>SMTP 或 SMTP_SSL 对象方法：</strong></p><ul><li><p><strong>set_debuglevel(level)</strong>：设置调试输出级别，打印出和 SMTP 服务器交互的所有信息。如果 <code>level</code> 的值为 <code>1</code> 或 <code>True</code>，就会产生连接的调试信息，以及所有发送和接收服务器的信息。如果 <code>level</code> 的值为 <code>2</code>，则这些信息会被加上时间戳</p></li><li><p><strong>connect(host, port)</strong>：连接远程 smtp 主机方法，<code>host</code> 为远程主机地址，<code>port</code> 为远程主机 smtp 端口，默认为 <code>25</code>，也可以直接使用 <code>host:port</code> 形式来表示</p></li><li><p><strong>helo()</strong>：使用 <code>HELO</code> 向 SMTP 服务器表明自己的身份</p></li><li><p><strong>ehlo()</strong>：使用 <code>EHLO</code> 向 ESMTP 服务器表明自己的身份</p></li><li><p><strong>login(user, password[, initial_response_ok=True])</strong>：登录到一个需要认证的 SMTP 服务器</p><ul><li><strong>user</strong>：登录的用户名</li><li><strong>password</strong>：登录的密码或 <code>smtp</code> 服务生成的客户端授权码，该授权码用于第三方客户端登录，代替了第三方登录时使用的个人邮箱密码</li><li><strong>initial_response_ok</strong>：对于支持它的认证方法，是否可以与 <code>auto</code> 命令一起发送规定的 “初始响应”</li></ul></li><li><p><strong>auth(mechanism, authobject[, initial_response_ok=True])</strong>：为指定的认证机制 <code>mechanism</code> 发送 <code>SMTP AUTH</code> 命令，并通过 <code>authobject</code> 处理回复响应</p><ul><li><strong>mechanism</strong>：指定要使用何种认证机制作为 <code>AUTH</code> 命令的参数</li><li><strong>authobject</strong>：必须是接受一个可选的单独参数的可调用对象</li><li><strong>initial_response_ok</strong>：如果 <code>initial_response_ok</code> 为真值，则不带参数地调用 <code>authobject()</code>。如果 <code>initial_response_ok</code> 为假值，则将调用 <code>authobject()</code> 来处理服务器的回复响应</li></ul></li><li><p><strong>starttls([keyfile=None[, certfile=None[, context=None]]])</strong>：将 SMTP 连接设为 TLS (传输层安全) 模式。后续的所有 SMTP 命令都将被加密。您应当随即再次调用 <code>ehlo()</code></p></li><li><p><strong>sendmail(from_addr, to_addrs, msg[, mail_options=()[, rcpt_options=()]])</strong>：发送邮件</p><ul><li><strong>from_addr</strong>：发件人地址</li><li><strong>to_addrs</strong>：收件人地址</li><li><strong>msg</strong>：发送消息，可以是一个包含 ASCII 范围内字符的字符串，或是一个字节串。邮件对象.as_string()</li></ul></li><li><p><strong>quit()</strong>：终结 SMTP 会话并关闭连接。返回 <code>SMTP QUIT</code> 命令的结果</p></li></ul><p><strong>SMTP 协议响应码：</strong></p><table><thead><tr><th style="text-align:center;">响应码</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>211</strong></td><td style="text-align:left;">系统状态或系统帮助响应</td></tr><tr><td style="text-align:center;"><strong>214</strong></td><td style="text-align:left;">帮助信息</td></tr><tr><td style="text-align:center;"><strong>220</strong></td><td style="text-align:left;">SMTP 服务就绪。SMTP 服务器已准备好继续下一条命令</td></tr><tr><td style="text-align:center;"><strong>221</strong></td><td style="text-align:left;">服务关闭。会话或与邮件服务器的连接正在结束，并且所有过程都已完成</td></tr><tr><td style="text-align:center;"><strong>250</strong></td><td style="text-align:left;">采取并完成了请求的操作。表明 SMTP 通信已成功</td></tr><tr><td style="text-align:center;"><strong>251</strong></td><td style="text-align:left;">用户非本地，服务器提供转发地址以进行尝试</td></tr><tr><td style="text-align:center;"><strong>354</strong></td><td style="text-align:left;">开始输入消息并以 <code>…</code> 结尾。服务器已准备好接受消息本身</td></tr><tr><td style="text-align:center;"><strong>421</strong></td><td style="text-align:left;">服务不可用，连接将关闭。发送邮件服务器不可达</td></tr><tr><td style="text-align:center;"><strong>450</strong></td><td style="text-align:left;">请求的命令失败，因为用户的邮箱不可用（例如：因为它已被锁定），请稍后再试</td></tr><tr><td style="text-align:center;"><strong>451</strong></td><td style="text-align:left;">由于服务器错误，命令已中止。接收邮件服务器的规则可能阻止了邮件的处理</td></tr><tr><td style="text-align:center;"><strong>452</strong></td><td style="text-align:left;">该命令已中止，因为服务器的系统存储空间不足。由于尝试一次发送太多邮件时邮件服务器超载引起的</td></tr><tr><td style="text-align:center;"><strong>455</strong></td><td style="text-align:left;">服务器此时无法处理该命令。收到此消息，请留出更多时间尝试</td></tr><tr><td style="text-align:center;"><strong>500</strong></td><td style="text-align:left;">服务器由于语法错误而无法识别命令。可能是有防病毒软件或防火墙软件引起的</td></tr><tr><td style="text-align:center;"><strong>501</strong></td><td style="text-align:left;">命令参数中遇到语法错误。通常是由错误/无效的电子邮件地址引起的</td></tr><tr><td style="text-align:center;"><strong>502</strong></td><td style="text-align:left;">未实现此命令。可能是您的基础 MTA 遇到配置问题</td></tr><tr><td style="text-align:center;"><strong>503</strong></td><td style="text-align:left;">服务器遇到了错误的命令序列。所使用的参数与邮件服务器的预期顺序不符，这通常在不对电子邮件账户进行身份验证时发生</td></tr><tr><td style="text-align:center;"><strong>504</strong></td><td style="text-align:left;">未实现命令参数。与 <code>502</code> 非常相似</td></tr><tr><td style="text-align:center;"><strong>521</strong></td><td style="text-align:left;">该主机从不接受邮件；虚拟服务器的响应。表示收件人邮件服务器不接受和传递电子邮件</td></tr><tr><td style="text-align:center;"><strong>541</strong></td><td style="text-align:left;">由于策略原因而无法传递该邮件，通常是垃圾邮件过滤器。表明您的电子邮件可能已被标记为垃圾邮件</td></tr><tr><td style="text-align:center;"><strong>550</strong></td><td style="text-align:left;">请求的命令失败，因为用户的邮箱不可用。例如：因为找不到用户邮箱，或者由于策略原因而拒绝了该命令</td></tr><tr><td style="text-align:center;"><strong>551</strong></td><td style="text-align:left;">收件人不在服务器本地。服务器提供转发地址以进行尝试</td></tr><tr><td style="text-align:center;"><strong>552</strong></td><td style="text-align:left;">由于超出了存储分配，操作被中止。通常是由于收件人的邮件服务器太满</td></tr><tr><td style="text-align:center;"><strong>553</strong></td><td style="text-align:left;">由于邮箱名称无效，命令被中止。确保您要发送到的所有电子邮件地址都是正确的</td></tr><tr><td style="text-align:center;"><strong>554</strong></td><td style="text-align:left;">发送错误：对不起，您无法发送消息。此邮箱已禁用，只是正常的无效地址响应。检查电子邮件地址，然后重试</td></tr></tbody></table><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> smtplib
<span class="token keyword">import</span> getpass
<span class="token keyword">import</span> logging
<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>multipart <span class="token keyword">import</span> MIMEMultipart
<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText

<span class="token comment"># 设置日志级别</span>
logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">&#39;%(levelname)s - %(message)s&#39;</span><span class="token punctuation">)</span>

email_address <span class="token operator">=</span> <span class="token string">&#39;sankgao@163.com&#39;</span>  <span class="token comment"># 登录的用户名</span>
pwd01 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;please input your password:&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 登录的密码</span>
pwd <span class="token operator">=</span> <span class="token string">&#39;BHGMUMRGLRAKVHJH&#39;</span>
to_mail_address <span class="token operator">=</span> <span class="token string">&#39;sankgao@163.com&#39;</span>  <span class="token comment"># 收件人地址</span>

msg <span class="token operator">=</span> MIMEMultipart<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建邮件对象</span>
msg<span class="token punctuation">[</span><span class="token string">&#39;Subject&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Test&#39;</span>  <span class="token comment"># 设置邮件主题</span>
msg<span class="token punctuation">[</span><span class="token string">&quot;From&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> email_address  <span class="token comment"># 设置邮件发件人</span>
msg<span class="token punctuation">[</span><span class="token string">&#39;To&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> to_mail_address  <span class="token comment"># 设置邮件收件人</span>
content <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span><span class="token string">&#39;&lt;b&gt;Test mail&lt;/b&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 设置邮件内容</span>
msg<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>content<span class="token punctuation">)</span>  <span class="token comment"># 添加到当前载荷中</span>

smtp_obj01 <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token string">&#39;smtp.163.com&#39;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>  <span class="token comment"># 连接邮箱服务器</span>
smtp_obj <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP_SSL<span class="token punctuation">(</span><span class="token string">&#39;smtp.163.com&#39;</span><span class="token punctuation">,</span> <span class="token number">465</span><span class="token punctuation">)</span>

response <span class="token operator">=</span> smtp_obj<span class="token punctuation">.</span>ehlo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 向 ESMTP 服务器表明自己的身份</span>
logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&#39;ehlo() -&gt; %s&#39;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>

response <span class="token operator">=</span> smtp_obj<span class="token punctuation">.</span>login<span class="token punctuation">(</span>email_address<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span>  <span class="token comment"># 登陆 SMTP 服务器</span>
logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&#39;login() -&gt; %s&#39;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>

response <span class="token operator">=</span> smtp_obj<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>email_address<span class="token punctuation">,</span> to_mail_address<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 发送邮件</span>
logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&#39;sendmail() -&gt; %s&#39;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>

response <span class="token operator">=</span> smtp_obj<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 断开连接</span>
logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&#39;quit() -&gt; %s&#39;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>


host_name <span class="token operator">=</span> <span class="token string">&#39;smtp.163.com&#39;</span>
port <span class="token operator">=</span> <span class="token number">465</span>
u_name <span class="token operator">=</span> <span class="token string">&#39;sankgao@163.com&#39;</span>
password01 <span class="token operator">=</span> getpass<span class="token punctuation">.</span>getpass<span class="token punctuation">(</span>prompt<span class="token operator">=</span><span class="token string">&#39;Enter your password: &#39;</span><span class="token punctuation">)</span>
password <span class="token operator">=</span> <span class="token string">&#39;BHGMUMRGLRAKVHJH&#39;</span>
sender <span class="token operator">=</span> <span class="token string">&#39;sankgao@163.com&#39;</span>
receivers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;sankgao@163.com&#39;</span><span class="token punctuation">]</span>
msg <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span><span class="token string">&#39;Test mail&#39;</span><span class="token punctuation">)</span>
msg<span class="token punctuation">[</span><span class="token string">&#39;Subject&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Test&#39;</span>
msg<span class="token punctuation">[</span><span class="token string">&#39;From&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> sender
msg<span class="token punctuation">[</span><span class="token string">&#39;To&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;, &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>receivers<span class="token punctuation">)</span>

smtp_obj <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP_SSL<span class="token punctuation">(</span>host_name<span class="token punctuation">,</span> port<span class="token punctuation">)</span>
smtp_obj<span class="token punctuation">.</span>login<span class="token punctuation">(</span>u_name<span class="token punctuation">,</span> password<span class="token punctuation">)</span>
smtp_obj<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>sender<span class="token punctuation">,</span> receivers<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
smtp_obj<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Mail sent successfully&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="email" tabindex="-1"><a class="header-anchor" href="#email" aria-hidden="true">#</a> email</h3>`,9),dn={href:"https://docs.python.org/zh-cn/3/library/email.html#module-email",target:"_blank",rel:"noopener noreferrer"},kn=n("p",null,[n("code",null,"email"),s(" 内置模块，用于管理电子邮件消息。")],-1),mn=n("h3",{id:"csv-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#csv-1","aria-hidden":"true"},"#"),s(" csv")],-1),gn={href:"https://docs.python.org/zh-cn/3/library/csv.html#module-csv",target:"_blank",rel:"noopener noreferrer"},bn=e(`<p><code>csv</code> 内置模块，用于处理从电子表格和数据库导出的文本数据。CSV 格式代表逗号分隔值，用于分隔数据记录中的字段，此格式通常用于电子表格和数据库导入和导出。</p><ul><li><p><strong>csv.reader(csvfile, *, dialect=&#39;excel&#39;, **fmtparams)</strong>：返回一个 <code>reader</code> 对象，该对象将逐行遍历 <code>csvfile</code></p><ul><li><strong>csvfile</strong>：可以是任何对象，只要这个对象支持 <code>iterator</code> 协议并在每次调用 <code>__next__()</code> 方法时都返回字符串，文件对象和列表对象均适用。如果 <code>csvfile</code> 是文件对象，则打开它时应使用 <code>newline=&#39;&#39;</code></li><li><strong>dialect</strong>：是用于不同的 CSV 变种的特定参数组。它可以是 Dialect 类的子类的实例，也可以是 <code>list_dialects()</code> 函数返回的字符串之一</li><li><strong>fmtparams</strong>：可以覆写当前变种格式中的单个格式设置</li></ul></li><li><p><strong>csv.writer(csvfile, *, dialect=&#39;excel&#39;, **fmtparams)</strong>：返回一个 <code>writer</code> 对象，该对象负责将用户的数据在给定的文件类对象上转换为带分隔符的字符串</p><ul><li><strong>csvfile</strong>：可以是任何具有 <code>write()</code> 方法的对象。如果 <code>csvfile</code> 是一个文件对象，则打开它时应使用 <code>newline=&#39;&#39;</code></li><li><strong>dialect</strong>：用来定义一组特定 CSV 变种专属的形参。它可以是 Dialect 类的某个子类的实例或是 <code>list_dialects()</code> 函数返回的字符串之一</li><li><strong>fmtparams</strong>：关键字参数来覆盖当前变种中的单个格式化形参</li></ul></li><li><p><strong>csv.DictReader(f, fieldnames=None, *, restkey=None, restval=None, dialect=&#39;excel&#39;, *args, **kwds)</strong>：创建一个对象，该对象在操作上类似于常规 <code>reader</code>，但是将每行中的信息映射到一个 <code>dict</code>，该 <code>dict</code> 的键由 <code>fieldnames</code> 可选参数给出</p><ul><li><strong>f</strong>：指定读取的文件</li><li><strong>fieldnames</strong>：是一个序列。如果省略 <code>fieldnames</code>，则文件 <code>f</code> 第一行中的值将用作字段名。无论字段名是如何确定的，字典都将保留其原始顺序</li><li><strong>restkey</strong>：如果某一行中的字段多于字段名，则剩余数据会被放入一个列表，并与 <code>restkey</code> 所指定的字段名（默认为 <code>None</code>）一起保存</li><li><strong>restval</strong>：如果某个非空白行的字段少于字段名，则缺失的值会使用 <code>restval</code> 的值来填充（默认为 <code>None</code>）</li></ul></li><li><p><strong>csv.DictWriter(f, fieldnames, *, restval=&#39;&#39;, extrasaction=&#39;raise&#39;, dialect=&#39;excel&#39;, *args, **kwds)</strong>：创建一个对象，该对象在操作上类似常规 <code>writer</code>，但会将字典映射到输出行</p><ul><li><strong>f</strong>：指定要写入的文件</li><li><strong>fieldnames</strong>：是由键组成的序列，它指定字典中值的顺序，这些值会按指定顺序传递给 <code>writerow()</code> 方法并写入文件 <code>f</code></li><li><strong>restval</strong>：如果字典缺少 <code>fieldnames</code> 中的键，则可选参数 <code>restval</code> 用于指定要写入的值</li><li><strong>extrasaction</strong>：如果传递给 <code>writerow()</code> 方法的字典的某些键在 <code>fieldnames</code> 中找不到，则可选参数 <code>extrasaction</code> 用于指定要执行的操作</li></ul></li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> csv

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;new_data.csv&quot;</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&quot;utf-8-sig&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>f<span class="token punctuation">)</span>  <span class="token comment"># 创建 csv.reader 实例</span>
    header <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span>  <span class="token comment"># 读取第一行</span>

    <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>  <span class="token comment"># 逐行获取数据，并输出</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{}{}: {}={}, {}={}, {}={}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>
            header<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            header<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            header<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            header<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
设备编号<span class="token number">0</span><span class="token punctuation">:</span> 温度<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">,</span> 湿度<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> 转速<span class="token operator">=</span><span class="token number">1000</span>
设备编号<span class="token number">1</span><span class="token punctuation">:</span> 温度<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> 湿度<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">,</span> 转速<span class="token operator">=</span><span class="token number">998</span>
设备编号<span class="token number">2</span><span class="token punctuation">:</span> 温度<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> 湿度<span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">,</span> 转速<span class="token operator">=</span><span class="token number">1005</span>


<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;new_data.csv&quot;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&quot;utf-8-sig&quot;</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>DictReader<span class="token punctuation">(</span>f<span class="token punctuation">)</span>  <span class="token comment"># 创建 csv.DictReader 实例</span>

    <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;设备编号{}: 温度={}, 湿度={}, 转速={}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>
            row<span class="token punctuation">[</span><span class="token string">&quot;设备编号&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            row<span class="token punctuation">[</span><span class="token string">&quot;温度&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            row<span class="token punctuation">[</span><span class="token string">&quot;湿度&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            row<span class="token punctuation">[</span><span class="token string">&quot;转速&quot;</span><span class="token punctuation">]</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
设备编号<span class="token number">0</span><span class="token punctuation">:</span> 温度<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">,</span> 湿度<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> 转速<span class="token operator">=</span><span class="token number">1000</span>
设备编号<span class="token number">1</span><span class="token punctuation">:</span> 温度<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> 湿度<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">,</span> 转速<span class="token operator">=</span><span class="token number">998</span>
设备编号<span class="token number">2</span><span class="token punctuation">:</span> 温度<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> 湿度<span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">,</span> 转速<span class="token operator">=</span><span class="token number">1005</span>


<span class="token comment"># 创建列表，保存 header 内容</span>
header_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;设备编号&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;温度&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;湿度&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;转速&quot;</span><span class="token punctuation">]</span>

<span class="token comment"># 创建列表，保存数据</span>
data_list <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">998</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">1005</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;new_data.csv&quot;</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&quot;w&quot;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&quot;utf-8-sig&quot;</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>f<span class="token punctuation">)</span>  <span class="token comment">#　创建 csv.writer 实例</span>
    writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>header_list<span class="token punctuation">)</span>  <span class="token comment"># 写入 header，writerow() 一次只能写入一行</span>
    writer<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span>data_list<span class="token punctuation">)</span>  <span class="token comment"># 写入 header，writerows() 一次写入多行</span>


<span class="token comment"># 创建 header 列表</span>
header_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;设备编号&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;温度&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;湿度&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;转速&quot;</span><span class="token punctuation">]</span>
<span class="token comment"># 创建数据列表，列表的每个元素都是字典</span>
data_list <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token string">&quot;设备编号&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;温度&quot;</span><span class="token punctuation">:</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token string">&quot;湿度&quot;</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&quot;转速&quot;</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;设备编号&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;温度&quot;</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">&quot;湿度&quot;</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">&quot;转速&quot;</span><span class="token punctuation">:</span> <span class="token number">998</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&quot;设备编号&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;温度&quot;</span><span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">&quot;湿度&quot;</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">&quot;转速&quot;</span><span class="token punctuation">:</span> <span class="token number">1005</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;new_data.csv&quot;</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&quot;w&quot;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&quot;utf-8-sig&quot;</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token comment"># 创建 csv.DictWriter 实例，将 header 列表作为参数传入</span>
    writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>DictWriter<span class="token punctuation">(</span>f<span class="token punctuation">,</span> header_list<span class="token punctuation">)</span>
    writer<span class="token punctuation">.</span>writeheader<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 写入 header</span>
    writer<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span>data_list<span class="token punctuation">)</span>  <span class="token comment"># 写入数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hashlib" tabindex="-1"><a class="header-anchor" href="#hashlib" aria-hidden="true">#</a> hashlib</h3>`,5),vn={href:"https://docs.python.org/zh-cn/3/library/hashlib.html#module-hashlib",target:"_blank",rel:"noopener noreferrer"},hn=e(`<p><code>hashlib</code> 内置模块，用于对许多不同的安全哈希和消息摘要算法实现了一个通用接口。包括的算法有 <code>md5</code>、<code>sha1</code>、<code>sha224</code>、<code>sha256</code>、<code>sha384</code>、<code>sha512</code> 等。<strong>安全哈希</strong> 和 <strong>消息摘要</strong> 是同义的。较旧的算法被称为 <strong>消息摘要</strong>，现代的术语是安全哈希。</p><p><code>hashlib</code> 提供了一些流行的 <code>hash</code>（摘要）算法的 Python 标准库。摘要算法又称 <strong>哈希算法</strong>、<strong>散列算法</strong>。它通过一个函数，把任意长度的数据转换为一个长度固定的数据串（通常用 16 进制的字符串表示），简单的说就是通过函数，将明文数据通过变成密文数据达到加密的作用。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>MD5 是最常见的摘要算法，速度很快，生成结果是固定的 128 bit 字节，通常用一个 32 位的十六进制字符串表示</p><p>加盐：额外给原始数据添加一点自定义的数据，使得生成的消息摘要不同于普通方式计算的摘要</p></div><ul><li><p><strong>hashlib.new(name, [data, ]*, usedforsecurity=True)</strong>：接受所希望的算法构造器</p><ul><li><strong>name</strong>：构造器（算法名称）</li><li><strong>data</strong>：是可选的 bytes 类型待摘要的数据</li><li><strong>usedforsecurity</strong>：用于安全</li></ul></li><li><p><strong>hashlib.algorithms_guaranteed</strong>：一个集合，包含此模块在所有平台上都保证支持的哈希算法的名称</p></li><li><p><strong>hashlib.algorithms_available</strong>：一个集合，包含在所运行的 Python 解释器上可用的哈希算法的名称。将这些名称传给 <code>new()</code> 时将可被识别</p></li><li><p><strong>hash.digest_size</strong>：以字节表示的结果哈希对象的大小，返回该构造器的进制大小</p></li><li><p><strong>hash.block_size</strong>：以字节表示的哈希算法的内部块大小</p></li><li><p><strong>hash.update(data)</strong>：更新哈希对象以字符串参数。如果同一个 hash 对象重复调用该方法。例如：<code>m.update(a); m.update(b)</code> 等价于 <code>m.update(a+b)</code>。使用 <code>update</code> 输入需要被加密的对象，需要注意必须为 <strong>字节型数据</strong>，可以使用字符串的内置方法 <code>encode()</code> 转化为字节型。或者，当字符串为英文或者纯数字组成，只要在字符串引号外加上 <code>b</code> 也可以转化成字节型</p></li><li><p><strong>hash.digest()</strong>：返回当前已传给 <code>update()</code> 方法的数据摘要。这是一个大小为 <code>digest_size</code> 的字节串对象，字节串中可包含 <code>0</code> 至 <code>255</code> 的完整取值范围</p></li><li><p><strong>hash.hexdigest()</strong>：返回当前已传给 <code>update()</code> 方法的数据摘要，作为十六进制数据字符串值</p></li><li><p><strong>hash.copy()</strong>：复制。返回哈希对象的副本。这可被用来高效地计算共享相同初始子串的数据的摘要</p></li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> hashlib

m1 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token string">&#39;hello python&#39;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 构建 MD5 对象</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：e53024684c9be1dd3f6114ecc8bbdddc</span>


m2 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 构建 MD5 对象</span>
m2<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">&#39;hello python&#39;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 设置编码格式 并将字符串添加到 MD5 对象中</span>
password_md5 <span class="token operator">=</span> m2<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：e53024684c9be1dd3f6114ecc8bbdddc</span>


m3 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>
m3<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">&quot;hello &quot;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 注意：分块是空格也要保持一致</span>
m3<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">&quot;python&quot;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>m3<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：e53024684c9be1dd3f6114ecc8bbdddc</span>


USER_LIST <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>


<span class="token keyword">def</span> <span class="token function">pwd_Md5</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>
    password <span class="token operator">=</span> password <span class="token operator">+</span> <span class="token string">&#39;hello python&#39;</span>  <span class="token comment"># 字符串混淆加盐，可以设置更复杂一点</span>
    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>password<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;**************用户注册**************&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        user <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入用户名:&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> user<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        password1 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入密码&gt;&gt;&gt;:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
        passwprd2 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请重复密码&gt;&gt;&gt;：&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> password1 <span class="token operator">==</span> passwprd2<span class="token punctuation">:</span>
            password <span class="token operator">=</span> pwd_Md5<span class="token punctuation">(</span>password1<span class="token punctuation">)</span>  <span class="token comment"># 将密码进行 Md5 加密</span>
            <span class="token keyword">break</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;密码不正确，重新输入！&#39;</span><span class="token punctuation">)</span>
    temp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">:</span> user<span class="token punctuation">,</span> <span class="token string">&#39;password&#39;</span><span class="token punctuation">:</span> password<span class="token punctuation">}</span>
    USER_LIST<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>USER_LIST<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;**************用户登陆**************&#39;</span><span class="token punctuation">)</span>
    user <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入用户名:&#39;</span><span class="token punctuation">)</span>
    pwd <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入密码:&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> item <span class="token keyword">in</span> USER_LIST<span class="token punctuation">:</span>
        <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">]</span> <span class="token operator">==</span> user <span class="token keyword">and</span> item<span class="token punctuation">[</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">]</span> <span class="token operator">==</span> pwd_Md5<span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    register<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> login<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;登陆成功&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;登陆失败&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pickle" tabindex="-1"><a class="header-anchor" href="#pickle" aria-hidden="true">#</a> pickle</h3>`,7),yn={href:"https://docs.python.org/zh-cn/3/library/pickle.html#module-pickle",target:"_blank",rel:"noopener noreferrer"},fn=e(`<p><code>pickle</code> 内置模块，用于对一个 Python 对象结构的二进制序列化和反序列化，一种数据的持久化保存方式。</p><p><strong>一般序列化流程：</strong></p><p>对象1--序列化--&gt; 字符串 --&gt; 反序列化 --&gt; 对象2（即原对象1）</p><ul><li><p><strong>pickle.dump(obj, file, protocol=None, *, fix_imports=True, buffer_callback=None)</strong>：序列化对象。将对象 <code>obj</code> 封存以后的对象写入已打开的 file object file。它等同于 <code>pickle.Pickler(file, protocol).dump(obj)</code></p><ul><li><strong>obj</strong>：要输入的对象</li><li><strong>file</strong>：要保存的文件</li><li><strong>protocol</strong>：整数，告知 <code>pickler</code> 使用指定的协议，可选择的协议范围 <code>0~5</code></li><li><strong>fix_imports</strong>：如果 <code>fix_imports</code> 为 <code>True</code> 且 <code>protocol</code> 小于 <code>3</code>，<code>pickle</code> 将尝试将 Python3 中的新名称映射到 Python2 中的旧模块名称</li><li><strong>buffer_callback</strong>：如果 <code>buffer_callback</code> 为 <code>None</code>（默认情况），缓冲区视图（buffer view）将会作为 <code>pickle</code> 流的一部分被序列化到 <code>file</code> 中</li></ul></li><li><p><strong>pickle.dumps(obj, protocol=None, *, fix_imports=True, buffer_callback=None)</strong>：将 <code>obj</code> 封存以后的对象作为 bytes 类型直接返回，而不是将其写入到文件</p></li><li><p><strong>pickle.load(file, *, fix_imports=True, encoding=&#39;ASCII&#39;, errors=&#39;strict&#39;, buffers=None)</strong>：反序列化对象。从已打开的 file object 文件中读取封存后的对象，重建其中特定对象的层次结构并返回</p><ul><li><strong>file</strong>：打开的文件</li><li><strong>fix_imports</strong>、<strong>encoding</strong> 和 <strong>errors</strong>：用于控制由 Python2 生成的 <code>pickle</code> 流的兼容性。如果 <code>fix_imports</code> 为 <code>True</code>，则 <code>pickle</code> 将尝试将旧的 Python2 名称映射到 Python3 中对应的新名称。<code>encoding</code> 和 <code>errors</code> 参数告诉 <code>pickle</code> 如何解码 Python2 存储的 8 位字符串实例；这两个参数默认分别为 <code>ASCII</code> 和 <code>strict</code>。<code>encoding</code> 参数可置为 <code>bytes</code> 来将这些 8 位字符串实例读取为字节对象</li><li><strong>buffers</strong>：如果 <code>buffers</code> 为 <code>None</code>（默认值），则反序列化所需的所有数据都必须包含在 <code>pickle</code> 流中</li></ul></li><li><p><strong>pickle.loads(data, *, fix_imports=True, encoding=&#39;ASCII&#39;, errors=&#39;strict&#39;, buffers=None)</strong>：重建并返回一个对象的封存表示形式 <code>data</code> 的对象层级结构</p></li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pickle

t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;this is a string&#39;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：(&#39;this is a string&#39;, 42, [1, 2, 3], None)</span>
p1 <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>t1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：b&#39;\\x80\\x04\\x95$\\x00\\x00\\x00\\x00\\x00\\x00\\x00(\\x8c\\x10this is a string\\x94K*]\\x94(K\\x01K\\x02K\\x03eNt\\x94.&#39;</span>
t2 <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>p1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：(&#39;this is a string&#39;, 42, [1, 2, 3], None)</span>


a1 <span class="token operator">=</span> <span class="token string">&#39;apple&#39;</span>
b1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">&#39;One&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">&#39;Two&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">&#39;Three&#39;</span><span class="token punctuation">}</span>
c1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;fee&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;free&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foe&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fum&#39;</span><span class="token punctuation">]</span>
f1 <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;temp.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span>
pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>a1<span class="token punctuation">,</span> f1<span class="token punctuation">)</span>
pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>b1<span class="token punctuation">,</span> f1<span class="token punctuation">)</span>
pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> f1<span class="token punctuation">)</span>
f1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

f2 <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;temp.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span>
a2 <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：apple</span>
b2 <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{1: &#39;One&#39;, 2: &#39;Two&#39;, 3: &#39;Three&#39;}</span>
c2 <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;fee&#39;, &#39;free&#39;, &#39;foe&#39;, &#39;fum&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="copy" tabindex="-1"><a class="header-anchor" href="#copy" aria-hidden="true">#</a> copy</h3>`,7),_n={href:"https://docs.python.org/zh-cn/3/library/copy.html#module-copy",target:"_blank",rel:"noopener noreferrer"},wn=e(`<p><code>copy</code> 内置模块，用于浅层（<code>shallow</code>）和深层（<code>deep</code>）复制操作。对于简单的 object，用 <code>shallow copy</code> 和 <code>deep copy</code> 没区别；而对于复杂的 object。例如：list 中套着 list 的情况，shallow copy 中的子 list，并未从原 object 真的独立出来。</p><ul><li><strong>copy.copy(x)</strong>：返回 x 的浅层复制</li><li><strong>copy.deepcopy(x[, memo])</strong>：返回 x 的深层复制</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> copy

list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
list2 <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>list1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[1, 2, 3, [1, 2]]</span>

list2<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[1, 2, 3, [1, 2]]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[1, 2, 3, [1, 2], &#39;a&#39;]</span>

list2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[1, 2, 3, [1, 2, &#39;a&#39;]]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[1, 2, 3, [1, 2, &#39;a&#39;], &#39;a&#39;]</span>


list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
list2 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>list1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[1, 2, 3, [1, 2]]</span>

list2<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[1, 2, 3, [1, 2]]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[1, 2, 3, [1, 2], &#39;a&#39;]</span>

list2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[1, 2, 3, [1, 2]]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[1, 2, 3, [1, 2, &#39;a&#39;], &#39;a&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="collections" tabindex="-1"><a class="header-anchor" href="#collections" aria-hidden="true">#</a> collections</h3>`,5),xn={href:"https://docs.python.org/zh-cn/3/library/collections.html#module-collections",target:"_blank",rel:"noopener noreferrer"},qn=e(`<p><code>collections</code> 内置模块，实现了特定目标的容器，以提供 Python 标准内建容器 <code>dict</code>、<code>list</code>、<code>set</code> 和 <code>tuple</code> 的替代选择。</p><ul><li><p><strong>collections.ChainMap(*maps)</strong>：类似字典（dict）的容器类，将多个字典或者其他映射组合在一起，创建一个单独的可更新的视图。如果没有 <code>maps</code> 被指定，就提供一个默认的空字典，这样一个新链至少有一个映射。底层映射被存储在一个列表中。搜索查询底层映射，直到一个键被找到。不同的是，写、更新和删除只操作第一个映射。</p><p><strong>ChainMap 的方法：</strong></p><ul><li><strong>maps</strong>：返回一个可以更新的映射列表。它是仅有的存储状态，可以被修改。列表最少包含一个映射</li><li><strong>new_child(m=None, **kwargs)</strong>：返回一个新的 <code>ChainMap</code>，其中包含一个新的映射，后面跟随当前实例中的所有映射。如果指定了 <code>m</code>，它会成为新的映射加在映射列表的前面；如果未指定，则会使用一个空字典。如果指定了任何关键字参数，它们会更新所传入的映射或新的空字典。此方法被用于创建子上下文，它可在不改变任何上级映射的情况下被更新</li><li><strong>parents</strong>：属性返回一个新的 ChainMap 包含所有的当前实例的映射，除了第一个</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>一个 <code>ChainMap()</code> 的迭代顺序是通过从后往前扫描所有映射来确定的。如果一个 <code>key</code> 也在第一个映射（字典）中，将返回第一个映射（字典）的 <code>value</code></p></div></li><li><p><strong>collections.Counter([iterable])</strong>：一个计数器工具提供快速和方便的计数。是一个 dict 的子类，用于计数可散列对象</p><p><strong>Counter 的方法：</strong></p><ul><li><strong>elements()</strong>：返回一个迭代器，其中每个元素将重复出现计数值所指定次。元素会按首次出现的顺序返回。如果一个元素的计数值小于 1，将会忽略它</li><li><strong>most_common([n])</strong>：返回一个列表，其中包含 <code>n</code> 个最常见的元素及出现次数，按常见程度由高到低排序。如果 <code>n</code> 被省略或为 <code>None</code>，将返回计数器中的所有元素。计数值相等的元素按首次出现的顺序排序</li><li><strong>subtract([iterable])</strong>：从迭代对象或映射对象减去元素。像 <code>dict.update()</code> 但是是减去，而不是替换。输入和输出都可以是 0 或者负数</li><li><strong>total()</strong>：计算总计数值</li><li><strong>update([iterable])</strong>：从迭代对象计数元素或者从另一个映射对象（或计数器）添加。像 <code>dict.update()</code> 但是是加上，而不是替换。另外，迭代对象应该是序列元素，而不是一个（<code>key</code>, <code>value</code>）对</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>subtract</code> 减去对象可以用 <code>-</code> 号代替；<code>update</code> 添加对象可以用 <code>+</code> 号代替</p></div></li><li><p><strong>collections.deque([iterable[, maxlen]])</strong>：返回一个新的双向队列对象，从左到右初始化（用方法 <code>append()</code>），从 <code>iterable</code>（迭代对象）数据创建。如果 <code>iterable</code> 没有指定，新队列为空</p><p><strong>deque 的方法：</strong></p><ul><li><strong>append(x)</strong>：添加 <code>x</code> 到右端</li><li><strong>appendleft(x)</strong>：添加 <code>x</code> 到左端</li><li><strong>clear()</strong>：清除所有元素，长度变为 <code>0</code></li><li><strong>copy()</strong>：创建一份浅拷贝</li><li><strong>count(x)</strong>：计算队列中个数等于 <code>x</code> 的元素</li><li><strong>extend(iterable)</strong>：在队列右侧添加 <code>iterable</code> 中的元素</li><li><strong>extendleft(iterable)</strong>：在队列左侧添加 <code>iterable</code> 中的元素。<strong>注</strong>：在左侧添加时，<code>iterable</code> 参数的顺序将会反过来添加</li><li><strong>index(x[, start[, stop]])</strong>：返回第 <code>x</code> 个元素（从 <code>start</code> 开始计算，在 <code>stop</code> 之前）。返回第一个匹配。如果没找到的话，引发 ValueError</li><li><strong>insert(i,x)</strong>：在位置 <code>i</code> 插入 <code>x</code>。如果插入会导致一个限长 <code>deque</code> 超出长度 <code>maxlen</code> 的话，引发 IndexError</li><li><strong>pop()</strong>：移去并且返回一个元素，<code>deque</code> 最右侧的那一个。如果没有元素的话，就引发一个 IndexError</li><li><strong>popleft()</strong>：移去并且返回一个元素，<code>deque</code> 最左侧的那一个。如果没有元素的话，就引发 IndexError</li><li><strong>remove(value)</strong>：移除找到的第一个 <code>value</code>。如果没有的话就引发 ValueError</li><li><strong>reverse()</strong>：将 <code>deque</code> 逆序排列。返回 None</li><li><strong>maxlen</strong>：<code>Deque</code> 的最大长度，没有限定则为 None</li></ul></li><li><p><strong>collections.defaultdict(default_factory=None[, ...])</strong>：返回一个新的类似字典的对象。<code>defaultdict</code> 是内置 dict 类的子类。它重载了一个方法并添加了一个可写的实例变量</p><ul><li><strong>default_factory</strong>：本属性由 <code>__missing__()</code> 方法来调用。如果构造对象时提供了第一个参数，则本属性会被初始化成那个参数。如果未提供第一个参数，则本属性为 None</li><li><strong>__missing__(key)</strong>：如果 <code>default_factory</code> 属性为 <code>None</code>，则调用本方法会抛出 KeyError 异常，附带参数 key。如果 <code>default_factory</code> 不为 <code>None</code>，则它会被（不带参数）调用来为 <code>key</code> 提供一个默认值，这个值和 <code>key</code> 作为一对键值对被插入到字典中，并作为本方法的返回值返回</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>default_factory</code> 值为 <code>str</code> 时，调用字典中不存在的 key 时，返回空（<code>&#39;&#39;</code>）；值为 <code>int</code> 时，调用字典中不存在的 key 时，返回 <code>0</code>；值为 <code>list</code> 时，返回一个列表</p></div></li><li><p><strong>collections.namedtuple(typename, field_names, *, rename=False, defaults=None, module=None)</strong>：返回一个新的元组子类，名为 <code>typename</code>。这个新的子类用于创建类元组的对象，可以通过字段名来获取属性值，同样也可以通过索引和迭代获取值。子类实例同样有文档字符串（类名和字段名）另外一个有用的 <code>__repr__()</code> 方法，以 <code>name=value</code> 格式列明了元组内容</p><ul><li><strong>field_names</strong>：是一个像 <code>[&#39;x&#39;, &#39;y&#39;]</code> 一样的字符串序列。另外 <code>field_names</code> 可以是一个纯字符串，用空白或逗号分隔开元素名。比如：<code>&#39;x y&#39;</code> 或者 <code>&#39;x, y&#39;</code></li><li><strong>rename</strong>：如果 <code>rename</code> 为真，无效字段名会自动转换成位置名。比如：<code>[&#39;abc&#39;, &#39;def&#39;, &#39;ghi&#39;, &#39;abc&#39;]</code> 转换成 <code>[&#39;abc&#39;, &#39;_1&#39;, &#39;ghi&#39;, &#39;_3&#39;]</code>，消除关键词 <code>def</code> 和重复字段名 <code>abc</code></li><li><strong>defaults</strong>：值可以为 <code>None</code> 或者是一个默认值的 <code>iterable</code>。如果一个默认值域必须跟其他没有默认值的域在一起出现，<code>defaults</code> 就应用到最右边的参数。比如：如果域名 <code>[&#39;x&#39;, &#39;y&#39;, &#39;z&#39;]</code> 和默认值 <code>(1, 2)</code>，那么 <code>x</code> 就必须指定一个参数值，<code>y</code> 默认值 <code>1</code>，<code>z</code> 默认值 <code>2</code></li><li><strong>module</strong>：如果 <code>module</code> 值有定义，命名元组的 <code>__module__</code> 属性值就被设置</li></ul></li><li><p><strong>collections.OrderedDict([items])</strong>：返回一个 dict 子类的实例，它具有专门用于重新排列字典顺序的方法</p><p><strong>OrderedDict 的方法：</strong></p><ul><li><strong>popitem(last=True)</strong>：该方法移除并返回一个（<code>key</code>, <code>value</code>）键值对。如果 <code>last</code> 值为真，则按 LIFO 后进先出的顺序返回键值对，否则就按 FIFO 先进先出的顺序返回键值对</li><li><strong>move_to_end(key, last=True)</strong>：将一个现有的 key 移到序字典的任一端。如果 <code>last</code> 为真值（默认）则将条目移到右端，或者如果 <code>last</code> 为假值则将条目移到开头。如果 key 不存在则会引发 KeyError</li></ul></li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> collections

d1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>
d2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;orange&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;pike&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span>
combined1 <span class="token operator">=</span> collections<span class="token punctuation">.</span>ChainMap<span class="token punctuation">(</span>d1<span class="token punctuation">,</span> d2<span class="token punctuation">)</span>
combined2 <span class="token operator">=</span> collections<span class="token punctuation">.</span>ChainMap<span class="token punctuation">(</span>d2<span class="token punctuation">,</span> d1<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>combined1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>combined2<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
ChainMap<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;orange&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;pike&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
ChainMap<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;orange&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;pike&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>


d1<span class="token punctuation">[</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>combined1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>combined2<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
ChainMap<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;orange&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;pike&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
ChainMap<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;orange&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;pike&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span>


d3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;bbb&#39;</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>combined1<span class="token punctuation">.</span>maps<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>combined1<span class="token punctuation">.</span>new_child<span class="token punctuation">(</span>m<span class="token operator">=</span>d3<span class="token punctuation">,</span> ccc<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>combined1<span class="token punctuation">.</span>maps<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>combined1<span class="token punctuation">.</span>parents<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>combined1<span class="token punctuation">.</span>maps<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;orange&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;pike&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
ChainMap<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;bbb&#39;</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;ccc&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;orange&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;pike&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;orange&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;pike&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
ChainMap<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;orange&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;pike&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;orange&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;pike&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">]</span>


<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> combined1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
orange <span class="token number">2</span>
apple <span class="token number">1</span>
pike <span class="token number">1</span>
banana <span class="token number">2</span>
aaa <span class="token number">4</span>


my_str <span class="token operator">=</span> collections<span class="token punctuation">.</span>Counter<span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span>
my_list <span class="token operator">=</span> collections<span class="token punctuation">.</span>Counter<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;python&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>my_str<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：Counter({&#39;l&#39;: 3, &#39;o&#39;: 2, &#39;h&#39;: 1, &#39;e&#39;: 1, &#39; &#39;: 1, &#39;w&#39;: 1, &#39;r&#39;: 1, &#39;d&#39;: 1})</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：Counter({&#39;hello&#39;: 2, &#39;world&#39;: 1, &#39;python&#39;: 1})</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>my_str<span class="token punctuation">.</span>elements<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;o&#39;, &#39; &#39;, &#39;w&#39;, &#39;r&#39;, &#39;d&#39;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>my_list<span class="token punctuation">.</span>elements<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;hello&#39;, &#39;hello&#39;, &#39;world&#39;, &#39;python&#39;]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>my_str<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[(&#39;l&#39;, 3), (&#39;o&#39;, 2), (&#39;h&#39;, 1), (&#39;e&#39;, 1), (&#39; &#39;, 1), (&#39;w&#39;, 1), (&#39;r&#39;, 1), (&#39;d&#39;, 1)]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_str<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[(&#39;l&#39;, 3), (&#39;o&#39;, 2), (&#39;h&#39;, 1), (&#39;e&#39;, 1)]</span>

my_list<span class="token punctuation">.</span>subtract<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：Counter({&#39;hello&#39;: 1, &#39;world&#39;: 1, &#39;python&#39;: 1})</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">.</span>total<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：3</span>

my_list<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：Counter({&#39;hello&#39;: 2, &#39;world&#39;: 1, &#39;python&#39;: 1})</span>

my_list01 <span class="token operator">=</span> collections<span class="token punctuation">.</span>Counter<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_list <span class="token operator">-</span> my_list01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：Counter({&#39;hello&#39;: 2, &#39;python&#39;: 1})</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_list <span class="token operator">+</span> my_list01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：Counter({&#39;hello&#39;: 2, &#39;world&#39;: 2, &#39;python&#39;: 1})</span>


my_list <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

d <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span>my_list<span class="token punctuation">,</span> maxlen<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：deque([5, 6, 7, 8, 9, 10, 11, 12, 13, 14], maxlen=10)</span>


d<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：deque([6, 7, 8, 9, 10, 11, 12, 13, 14, 1], maxlen=10)</span>


P1 <span class="token operator">=</span> collections<span class="token punctuation">.</span>namedtuple<span class="token punctuation">(</span><span class="token string">&#39;Person1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;height&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
P2 <span class="token operator">=</span> collections<span class="token punctuation">.</span>namedtuple<span class="token punctuation">(</span><span class="token string">&#39;Person2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name,age,height&#39;</span><span class="token punctuation">)</span>
P3 <span class="token operator">=</span> collections<span class="token punctuation">.</span>namedtuple<span class="token punctuation">(</span><span class="token string">&#39;Person3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name age height&#39;</span><span class="token punctuation">)</span>

lucy <span class="token operator">=</span> P1<span class="token punctuation">(</span><span class="token string">&#39;lucy&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>lucy<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：Person1(name=&#39;lucy&#39;, age=23, height=180)</span>

jack <span class="token operator">=</span> P2<span class="token punctuation">(</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>jack<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：Person2(name=&#39;jack&#39;, age=20, height=190)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>lucy<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：lucy</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>lucy<span class="token punctuation">.</span>age<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：23</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="socket" tabindex="-1"><a class="header-anchor" href="#socket" aria-hidden="true">#</a> socket</h3>`,5),Nn={href:"https://docs.python.org/zh-cn/3/library/socket.html#module-socket",target:"_blank",rel:"noopener noreferrer"},Tn=e('<p><code>socket</code> 内置模块，用于针对服务器端和客户端 Socket 进行打开、读写和关闭。</p><p>服务器端先初始化 <code>Socket</code>，然后与端口绑定（<code>bind</code>），对端口进行监听（<code>listen</code>），调用 <code>accept</code> 阻塞，等待客户端连接。在这时如果有个客户端初始化一个 <code>Socket</code>，然后连接服务器（<code>connect</code>）。如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束。</p><ul><li><p><strong>socket.socket(family=AF_INET, *, type=SOCK_STREAM, proto=0, fileno=None)</strong>：使用给定的地址族、套接字类型和协议号创建一个新的套接字</p><ul><li><strong>family</strong>：地址族应为 <code>AF_INET</code>（默认值）、<code>AF_INET6</code>、<code>AF_UNIX</code>、<code>AF_CAN</code>、<code>AF_PACKET</code> 或 <code>AF_RDS</code> 之一。</li><li><strong>type</strong>：套接字类型应为 <code>SOCK_STREAM</code>（默认值）、<code>SOCK_DGRAM</code>、<code>SOCK_RAW</code> 或其他可能的 <code>SOCK_</code> 常量之一。协议号通常为零并且可以省略，或在协议族为 <code>AF_CAN</code> 的情况下，协议应为 <code>CAN_RAW</code>、<code>CAN_BCM</code>、<code>CAN_ISOTP</code> 或 <code>CAN_J1939</code> 之一</li><li><strong>fileno</strong>：如果指定了 <code>fileno</code>，那么将从这一指定的文件描述符中自动检测 <code>family</code>、<code>type</code> 和 <code>proto</code> 的值。如果调用本函数时显式指定了 <code>family</code>、<code>type</code> 和 <code>proto</code> 参数，可以覆盖自动检测的值</li></ul></li><li><p><strong>socket.create_connection(address, *, timeout=GLOBAL_DEFAULT, source_address=None, all_errors=False)</strong>：连接到一个在互联网 <code>address</code>（以（<code>host</code>, <code>port</code>）二元组表示）上侦听的 TCP 服务，并返回套接字对象。如果 <code>host</code> 是非数字的主机名，它将尝试将其解析为 <code>AF_INET</code> 和 <code>AF_INET6</code>，然后依次尝试连接到所有可能的地址直到连接成功</p><ul><li><strong>timeout</strong>：可以在套接字实例上设置超时（在尝试连接前）。如果未提供 <code>timeout</code>，则使用由 <code>getdefaulttimeout()</code> 返回的全局默认超时设置</li><li><strong>source_address</strong>：如果提供了 <code>source_address</code>，它必须为二元组（<code>host</code>, <code>port</code>），以便套接字在连接之前绑定为其源地址。如果 <code>host</code> 或 <code>port</code> 分别为 <code>&#39;&#39;</code> 或 <code>0</code>，则使用操作系统默认行为</li><li><strong>all_errors</strong>：当无法创建连接时，将引发异常。默认情况下，它是列表中最后一个地址的例外。如果 <code>all_errors</code> 为 <code>True</code>，则它是包含所有尝试的错误的 ExceptionGroup</li></ul></li><li><p><strong>socket.close(fd)</strong>：关闭一个套接字文件描述符</p></li><li><p><strong>socket.getfqdn([name])</strong>：返回 <code>name</code> 的完整限定域名。如果 <code>name</code> 被省略或为空，则将其解读为本地主机</p></li><li><p><strong>socket.gethostbyname(hostname)</strong>：将主机名转换为 IPv4 地址格式。IPv4 地址以字符串格式返回</p></li><li><p><strong>socket.gethostname()</strong>：返回一个字符串，包含当前正在运行 Python 解释器的机器的主机名</p></li><li><p><strong>socket.getnameinfo(sockaddr, flags)</strong>：将套接字地址 <code>sockaddr</code> 转换为二元组（主机、端口）</p></li><li><p><strong>socket.accept()</strong>：接受一个连接。此 <code>socket</code> 必须绑定到一个地址上并且监听连接。返回值是一个（<code>conn</code>, <code>address</code>）对，其中 <code>conn</code> 是一个新的套接字对象，用于在此连接上收发数据，<code>address</code> 是连接另一端的套接字所绑定的地址</p></li><li><p><strong>socket.bind(address)</strong>：将套接字绑定到 <code>address</code>。套接字必须尚未绑定。<code>address</code> 的格式取决于地址簇</p></li><li><p><strong>socket.close()</strong>：将套接字标记为关闭</p></li><li><p><strong>socket.connect(address)</strong>：连接到 <code>address</code> 处的远程套接字。<code>address</code> 的格式取决于地址簇</p></li><li><p><strong>socket.connect_ex(address)</strong>：类似于 <code>connect(address)</code>。如果操作成功，则错误指示器为 <code>0</code>，否则为 errno 变量的值。这对支持如异步连接很有用</p></li><li><p><strong>socket.detach()</strong>：将套接字对象置于关闭状态，而底层的文件描述符实际并不关闭。返回该文件描述符，使其可以重新用于其他目的</p></li><li><p><strong>socket.getpeername()</strong>：返回套接字连接到的远程地址</p></li><li><p><strong>socket.getsockname()</strong>：返回套接字本身的地址</p></li><li><p><strong>socket.getblocking()</strong>：如果套接字处于阻塞模式，返回 <code>True</code>，非阻塞模式返回 <code>False</code></p></li><li><p><strong>socket.gettimeout()</strong>：返回套接字操作相关的超时秒数（浮点数），未设置超时则返回 <code>None</code>。它反映最后一次调用 <code>setblocking()</code> 或 <code>settimeout()</code> 后的设置</p></li><li><p><strong>socket.listen([backlog])</strong>：启动一个服务器用于接受连接。如果指定 <code>backlog</code>，则它最低为 <code>0</code>（小于 <code>0</code> 会被置为 <code>0</code>），它指定系统允许暂未 <code>accept</code> 的连接数，超过后将拒绝新连接。未指定则自动设为合理的默认值</p></li><li><p><strong>socket.recv(bufsize[, flags])</strong>：从套接字接收数据。返回值是一个字节对象，表示接收到的数据。<code>bufsize</code> 指定一次接收的最大数据量</p></li><li><p><strong>socket.recvfrom(bufsize[, flags])</strong>：从套接字接收数据。返回值是一对（<code>bytes</code>, <code>address</code>），其中 <code>bytes</code> 是字节对象，表示接收到的数据，<code>address</code> 是发送端套接字的地址</p></li><li><p><strong>socket.send(bytes[, flags])</strong>：发送数据给套接字。本套接字必须已连接到远程套接字。返回已发送的字节数，应用程序要负责检查所有数据是否已发送。如果仅传输了部分数据，程序需要自行尝试传输其余数据</p></li><li><p><strong>socket.sendall(bytes[, flags])</strong>：发送数据给套接字。本套接字必须已连接到远程套接字。持续从 <code>bytes</code> 发送数据，直到所有数据都已发送或发生错误为止。成功后会返回 <code>None</code>。出错后会抛出一个异常</p></li><li><p><strong>socket.setblocking(flag)</strong>：设置套接字为阻塞或非阻塞模式：如果 <code>flag</code> 为 <code>false</code>，则将套接字设置为非阻塞，否则设置为阻塞</p></li><li><p><strong>socket.settimeout(value)</strong>：为阻塞套接字的操作设置超时。<code>value</code> 参数可以是非负浮点数，表示秒，也可以是 <code>None</code></p></li><li><p><strong>socket.setsockopt(level, optname, None, optlen: int)</strong>：设置给定套接字选项的值</p></li></ul><h3 id="http" tabindex="-1"><a class="header-anchor" href="#http" aria-hidden="true">#</a> http</h3>',4),Pn={href:"https://docs.python.org/zh-cn/3/library/http.html#module-http",target:"_blank",rel:"noopener noreferrer"},Sn=n("h3",{id:"ftplib",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ftplib","aria-hidden":"true"},"#"),s(" ftplib")],-1),Cn={href:"https://docs.python.org/zh-cn/3/library/ftplib.html#module-ftplib",target:"_blank",rel:"noopener noreferrer"},Dn=n("h3",{id:"poplib",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#poplib","aria-hidden":"true"},"#"),s(" poplib")],-1),En={href:"https://docs.python.org/zh-cn/3/library/poplib.html#module-poplib",target:"_blank",rel:"noopener noreferrer"},Fn=n("h3",{id:"imaplib",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#imaplib","aria-hidden":"true"},"#"),s(" imaplib")],-1),Mn={href:"https://docs.python.org/zh-cn/3/library/imaplib.html#module-imaplib",target:"_blank",rel:"noopener noreferrer"},On=n("h3",{id:"pprint",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#pprint","aria-hidden":"true"},"#"),s(" pprint")],-1),jn={href:"https://docs.python.org/zh-cn/3/library/pprint.html#module-pprint",target:"_blank",rel:"noopener noreferrer"},Rn=n("h3",{id:"telnetlib",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#telnetlib","aria-hidden":"true"},"#"),s(" telnetlib")],-1),Hn={href:"https://docs.python.org/zh-cn/3/library/telnetlib.html#module-telnetlib",target:"_blank",rel:"noopener noreferrer"},An=n("h3",{id:"subprocess",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#subprocess","aria-hidden":"true"},"#"),s(" subprocess")],-1),zn={href:"https://docs.python.org/zh-cn/3/library/subprocess.html#module-subprocess",target:"_blank",rel:"noopener noreferrer"},Ln=n("h2",{id:"第三方模块",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第三方模块","aria-hidden":"true"},"#"),s(" 第三方模块")],-1),In=n("h3",{id:"requests",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#requests","aria-hidden":"true"},"#"),s(" requests")],-1),Un={href:"https://requests.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},Wn=n("p",null,"requests 第三方模块，用于处理网络请求。",-1),Jn=n("h3",{id:"pygame",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#pygame","aria-hidden":"true"},"#"),s(" pygame")],-1),Bn={href:"https://www.pygame.org/news",target:"_blank",rel:"noopener noreferrer"},Yn=n("h3",{id:"matplotlib",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#matplotlib","aria-hidden":"true"},"#"),s(" Matplotlib")],-1),Gn={href:"https://matplotlib.org/3.6.2/index.html#",target:"_blank",rel:"noopener noreferrer"},Kn=n("h3",{id:"pygal",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#pygal","aria-hidden":"true"},"#"),s(" Pygal")],-1),Qn={href:"https://www.pygal.org/en/stable/#",target:"_blank",rel:"noopener noreferrer"},Vn=n("h3",{id:"django",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#django","aria-hidden":"true"},"#"),s(" django")],-1),Xn={href:"https://www.djangoproject.com/",target:"_blank",rel:"noopener noreferrer"},$n=n("h3",{id:"pypdf2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#pypdf2","aria-hidden":"true"},"#"),s(" PyPDF2")],-1),Zn={href:"https://pypdf2.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},ns=e(`<p><code>PyPDF2</code> 第三方模块，用于处理 PDF 文件。读取、写入、分割、合并 PDF 文档，它还可以对 PDF 文档进行添加水印、加密解密等操作。</p><ul><li><p><strong>PyPDF2.PdfReader(stream[, strict=False[, password=None]])</strong>：初始化 <code>PdfReader</code> 对象</p><ul><li><strong>stream</strong>：文件对象或支持标准读取的对象并查找类似于 File 对象的方法。也可能是一个表示 PDF 文件路径的字符串</li><li><strong>strict</strong>：确定是否应警告用户所有问题，也会导致一些可纠正的问题致命。默认值为 <code>False</code></li><li><strong>password</strong>：初始化时解密 PDF 文件。如果密码为 <code>None</code>，则不会解密文件。默认为 <code>None</code></li></ul></li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> PyPDF2

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;零基础学 Python（全彩版-1）.pdf&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pdf<span class="token punctuation">:</span>
    read_pdf <span class="token operator">=</span> PyPDF2<span class="token punctuation">.</span>PdfReader<span class="token punctuation">(</span>pdf<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Number of pages in pdf:&quot;</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>read_pdf<span class="token punctuation">.</span>pages<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：300</span>

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;看漫画学 Python：有趣、有料、好玩、好用：全彩版.pdf&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pdf<span class="token punctuation">:</span>
    read_pdf <span class="token operator">=</span> PyPDF2<span class="token punctuation">.</span>PdfReader<span class="token punctuation">(</span>pdf<span class="token punctuation">)</span>
    pdf_page <span class="token operator">=</span> read_pdf<span class="token punctuation">.</span>pages<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
    pdf_content <span class="token operator">=</span> pdf_page<span class="token punctuation">.</span>extract_text<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>pdf_content<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：提取第二页的文本</span>

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;零基础学 Python（全彩版-1）.pdf&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pdf<span class="token punctuation">:</span>
    rd_pdf <span class="token operator">=</span> PyPDF2<span class="token punctuation">.</span>PdfReader<span class="token punctuation">(</span>pdf<span class="token punctuation">)</span>
    wr_pdf <span class="token operator">=</span> PyPDF2<span class="token punctuation">.</span>PdfWriter<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> pg_num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>rd_pdf<span class="token punctuation">.</span>pages<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        pdf_page <span class="token operator">=</span> rd_pdf<span class="token punctuation">.</span>pages<span class="token punctuation">[</span>pg_num<span class="token punctuation">]</span>
        pdf_page<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>  <span class="token comment"># 按顺时针旋转 90 度</span>
        wr_pdf<span class="token punctuation">.</span>add_page<span class="token punctuation">(</span>pdf_page<span class="token punctuation">)</span>

    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;rotated.pdf&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pdf_out<span class="token punctuation">:</span>
        wr_pdf<span class="token punctuation">.</span>write<span class="token punctuation">(</span>pdf_out<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;pdf successfully rotated&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="xlrd" tabindex="-1"><a class="header-anchor" href="#xlrd" aria-hidden="true">#</a> xlrd</h3>`,5),ss={href:"https://xlrd.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},as=e(`<p><code>xlrd</code> 第三方模块，用于处理 Excel 文件。新版本只能处理以 <code>.xls</code> 后缀的文件，旧版本可以处理以 <code>.xlsx</code> 后缀的文件。</p><ul><li><p><strong>xlrd.open_workbook(filename=None, *, logfile=&lt;_io.TextIOWrapper name=&#39;&lt;stdout&gt;&#39; mode=&#39;w&#39; encoding=&#39;utf-8&#39;&gt;, verbosity=0, use_mmap=True, file_contents=None, encoding_override=None, formatting_info=False, on_demand=False, ragged_rows=False, ignore_workbook_corruption=False)</strong>：全局加载数据和返回而不释放资源。在这个阶段，唯一的有关工作表的可用信息是 <code>Book.nsheets</code> 和 <code>Book.sheet_names()</code>，分别是工作簿文件中存在的工作表数和工作簿文件中所有工作表的名称列表</p><ul><li><strong>filename</strong>：要打开的电子表格文件的路径</li><li><strong>logfile</strong>：写入消息和诊断的打开文件</li><li><strong>verbosity</strong>：增加写入日志文件</li><li><strong>use_mmap</strong>：是否使用 <code>mmap</code> 模块是通过启发式方式确定的。使用此参数覆盖结果。当前启发式：如果存在，则使用 <code>mmap</code></li><li><strong>file_contents</strong>：字符串或 <code>mmap.mmap</code> 对象或其他类似行为对象。如果提供，将不使用，除了（可能）在 <code>file_contents</code> 和 <code>filename</code> 消息中</li><li><strong>encoding_override</strong>：用于克服代码页信息的缺失或错误在旧版本的文件中</li><li><strong>formatting_info</strong>：默认值为 <code>False</code>，这样可以节省内存。在这种情况下，“空白” 单元格（即具有自己的格式信息但没有数据的单元格）将被视为空，忽略文件 BLANK 和 MULBLANK 记录。这将切断空单元格或空白单元格行的任何底部或右侧 “边距”。只有 <code>cell_value()</code> 和 <code>cell_type()</code> 可用。值为 <code>True</code> 时，将从电子表格文件中读取格式信息。这将提供所有单元格，包括空单元格和空白单元格。每个单元格都有格式信息。请注意，这将在与 xlsx 文件一起使用时引发 NotImplementedError</li><li><strong>on_demand</strong>：控制是最初加载所有工作表还是在需要时由调用方加载</li><li><strong>ragged_rows</strong>：默认值 <code>False</code>，表示所有行都用空单元格填充，因此所有行的大小与 NCOL 中的大小相同。值为 <code>True</code>，表示行尾没有空单元格。如果行分布广泛，这可以节省大量内存大小不一</li><li><strong>ignore_workbook_corruption</strong>：此选项允许读取损坏的工作簿。默认值为 <code>False</code> 您可能遇到 CompDocError 时：工作簿损坏。值为 <code>True</code> 时将忽略该异常</li></ul></li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>excel_file <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">r&quot;31YA 版本管理表.xlsx&quot;</span><span class="token punctuation">)</span>
book <span class="token operator">=</span> xlrd<span class="token punctuation">.</span>open_workbook<span class="token punctuation">(</span>excel_file<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The number of worksheets is {0}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>nsheets<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 显示表中工作表的数量</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Worksheet name(s): {0}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>sheet_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 显示表中工作表名称</span>

sh <span class="token operator">=</span> book<span class="token punctuation">.</span>sheet_by_index<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 指定表中的某一个工作表</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{0} {1} {2}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sh<span class="token punctuation">.</span>name<span class="token punctuation">,</span> sh<span class="token punctuation">.</span>nrows<span class="token punctuation">,</span> sh<span class="token punctuation">.</span>ncols<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 显示指定工作表的名称，行数，列数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Cell D30 is {0}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sh<span class="token punctuation">.</span>cell_value<span class="token punctuation">(</span>rowx<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> colx<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 显示指定单元格内容</span>

<span class="token keyword">for</span> rx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>sh<span class="token punctuation">.</span>nrows<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>sh<span class="token punctuation">.</span>row<span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 返回指定工作表全部内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="openpyxl" tabindex="-1"><a class="header-anchor" href="#openpyxl" aria-hidden="true">#</a> openpyxl</h3>`,5),ts={href:"https://openpyxl.readthedocs.io/en/stable/",target:"_blank",rel:"noopener noreferrer"},es=e(`<p><code>openpyxl</code> 第三方模块，用于读写 <code>xlsx</code>、<code>xlsm</code>、<code>xltx</code> 和 <code>xltm</code> 文件。</p><ul><li><strong>openpyxl.Workbook</strong>：导入工作簿</li><li><strong>openpyxl.Workbook.active</strong>：抓取活动工作表</li><li><strong>openpyxl.Workbook.append</strong>：附加行</li><li><strong>openpyxl.Workbook.save</strong>：保存文件</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> datetime
<span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook

wb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 导入工作簿</span>
ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>active  <span class="token comment"># 抓取活动工作表</span>
ws<span class="token punctuation">[</span><span class="token string">&#39;A1&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span>  <span class="token comment"># 数据可以直接分配给单元格</span>
ws<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 也可以附加行</span>
ws<span class="token punctuation">[</span><span class="token string">&#39;A2&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># Python 类型将自动转换</span>
wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">&quot;sample.xlsx&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 保存文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pandas" tabindex="-1"><a class="header-anchor" href="#pandas" aria-hidden="true">#</a> pandas</h3>`,5),os={href:"https://pandas.pydata.org/",target:"_blank",rel:"noopener noreferrer"},ps=e(`<p><code>pandas</code> 第三方模块，用于处理 Excel 文件。</p><ul><li><p><strong>pandas.read_excel(io, sheet_name=0, *, header=0, names=None, index_col=None, usecols=None, squeeze=None, dtype=None, engine=None, converters=None, true_values=None, false_values=None, skiprows=None, nrows=None, na_values=None, keep_default_na=True, na_filter=True, verbose=False, parse_dates=False, date_parser=None, thousands=None, decimal=&#39;.&#39;, comment=None, skipfooter=0, convert_float=None, mangle_dupe_cols=True, storage_options=None)</strong>：将 Excel 文件读入 panda DataFrame</p><ul><li><strong>io</strong>：任何有效的字符串路径都是可以接受的。该字符串可以是 URL</li><li><strong>sheet_name</strong>：字符串用于工作表名称。整数用于零索引工作表位置（图表工作表不计为工作表位置）。字符串或整数列表用于请求多个工作表。指定 <code>None</code> 以获取所有工作表</li><li><strong>header</strong>：用于已分析的列标签的行（0 索引）数据帧。如果传递了整数列表，则这些行位置将组合成 MultiIndex。如果没有标头，请使用 <code>None</code></li><li><strong>names</strong>：要使用的列名列表。如果文件不包含标题行，请使用 <code>None</code></li><li><strong>index_col</strong>：用作数据帧的行标签的列（0 索引）。如果没有此类列，则传递 <code>None</code></li><li><strong>usecols</strong>：返回列的子集。如果为 <code>None</code>，则分析所有列。如果为 <code>str</code>，则表示以逗号分隔的 Excel 列字母列表和列范围（例如：<code>A：E</code> 或 <code>A，C，E：F</code>）。范围包括双方。如果为 <code>int</code> 列表，则表示要解析的列号列表（0 索引）。如果是字符串列表，则指示要解析的列名列表。如果是 <code>callable</code>，则根据它计算每个列名并解析列。如果为 <code>callable</code> 对象返回 <code>True</code></li><li><strong>squeeze</strong>：如果解析的数据仅包含一列，则返回 Series。自版本 1.4.0 起已弃用</li><li><strong>dtype</strong>：数据或列的数据类型。例如：<code>{&#39;a&#39;： np.float64， &#39;b&#39;： np.int32}</code> 使用 object 保留存储在 Excel 中的数据，而不解释 <code>dtype</code>。如果指定了转换器，则将应用它们的 <code>dtype</code> 转换</li><li><strong>engine</strong>：如果 <code>io</code> 不是缓冲区或路径，则必须将其设置为标识 <code>io</code></li><li><strong>converters</strong>：用于转换某些列中的值的函数字典</li><li><strong>true_values</strong>：要视为 <code>True</code> 的值</li><li><strong>nrows</strong>：要分析的行数，默认为 <code>None</code></li><li><strong>na_values</strong>：将指定字符串转换为 <code>NA/NaN</code></li><li><strong>comment</strong>：注释超出行的其余部分。向此参数传递一个或多个字符，以指示输入文件中的注释。注释字符串与当前行结尾之间的任何数据都将被忽略</li></ul></li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

excel_file <span class="token operator">=</span> <span class="token string">&#39;31YA 版本管理表.xlsx&#39;</span>
cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>excel_file<span class="token punctuation">,</span> sheet_name<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> usecols<span class="token operator">=</span>cols<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
  Unnamed<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>              Unnamed<span class="token punctuation">:</span> <span class="token number">3</span>
<span class="token number">0</span>       シート名  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  前回のバージョン管理表と比べると更新有り無し
<span class="token number">1</span>   ｿﾌﾄ<span class="token punctuation">(</span>SOC<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                      有り
<span class="token number">2</span>   ｿﾌﾄ<span class="token punctuation">(</span>MCU<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                      有り
<span class="token number">3</span>         4G  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                      無し
<span class="token number">4</span>       制限事項  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                      有り

<span class="token punctuation">[</span><span class="token number">5</span> rows x <span class="token number">3</span> columns<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="numpy" tabindex="-1"><a class="header-anchor" href="#numpy" aria-hidden="true">#</a> numpy</h3>`,5),cs={href:"https://numpy.org/",target:"_blank",rel:"noopener noreferrer"},ls=n("h3",{id:"fabric",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#fabric","aria-hidden":"true"},"#"),s(" fabric")],-1),is={href:"https://www.fabfile.org/",target:"_blank",rel:"noopener noreferrer"},rs=n("h3",{id:"paramiko",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#paramiko","aria-hidden":"true"},"#"),s(" paramiko")],-1),us={href:"https://www.paramiko.org/",target:"_blank",rel:"noopener noreferrer"},ds=n("h3",{id:"netmiko",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#netmiko","aria-hidden":"true"},"#"),s(" netmiko")],-1),ks={href:"https://libraries.io/pypi/netmiko",target:"_blank",rel:"noopener noreferrer"},ms=n("h3",{id:"pyqt5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#pyqt5","aria-hidden":"true"},"#"),s(" PyQt5")],-1),gs={href:"https://www.pythonguis.com/pyqt5/",target:"_blank",rel:"noopener noreferrer"},bs=e("<ul><li><strong>PyQt5.window</strong>：用于创建简单的应用程序窗口</li><li><strong>PyQt5.button</strong>：是一个按钮，可以随时单击，并执行对应操作</li><li><strong>PyQt5.textbox</strong>：控件允许用户输入文本</li><li><strong>PyQt5.label</strong>：控件用于显示单行文本或图像</li><li><strong>PyQt5.combo box</strong>：控件包含一个组合按钮和一个弹出列表</li><li><strong>PyQt5.check box</strong>：控件是一个可以选中或取消选中的选项按钮</li><li><strong>PyQt5.radio button</strong>：控件是一个可以选中或取消选中的选项按钮。在一组单选按钮中，一次只能选中其中一个按钮</li><li><strong>PyQt5.message box</strong>：控件用于显示消息</li><li><strong>PyQt5.menu</strong>：控件提供了不同的显示选项</li><li><strong>PyQt5.table</strong>：控件为应用程序提供标准表显示功能，可以使用多行和多列构建</li><li><strong>PyQt5.signals slots</strong>：<code>signals</code> 让程序对已发生的事件做出反应，而 <code>slot</code> 是一个在信号发生时被调用的函数</li><li><strong>PyQt5.layouts</strong>：由多个控件组成</li></ul>",1);function vs(hs,ys){const a=p("ExternalLinkIcon");return c(),l("div",null,[r,u,d,n("p",null,[n("a",k,[s("random 官网地址"),t(a)])]),m,n("p",null,[n("a",g,[s("keyword 官网地址"),t(a)])]),b,n("p",null,[n("a",v,[s("datetime 官网地址"),t(a)])]),h,n("p",null,[n("a",y,[s("time 官网地址"),t(a)])]),f,n("p",null,[n("a",_,[s("re 官网地址"),t(a)])]),w,n("p",null,[n("a",x,[s("decimal 官网地址"),t(a)])]),q,n("p",null,[n("a",N,[s("math 官网地址"),t(a)])]),T,n("p",null,[n("a",P,[s("functools 官网地址"),t(a)])]),S,n("p",null,[n("a",C,[s("sys 官网地址"),t(a)])]),D,n("p",null,[n("a",E,[s("os 官网地址"),t(a)])]),F,n("p",null,[n("a",M,[s("calendar 官网地址"),t(a)])]),O,n("p",null,[n("a",j,[s("urllib 官网地址"),t(a)])]),R,n("p",null,[n("a",H,[s("json 官网地址"),t(a)])]),A,n("p",null,[n("a",z,[s("shutil 官网地址"),t(a)])]),L,n("p",null,[n("a",I,[s("tkinter 官网地址"),t(a)])]),U,W,n("p",null,[n("a",J,[s("string 官网地址"),t(a)])]),B,n("p",null,[n("a",Y,[s("csv 官网地址"),t(a)])]),G,n("p",null,[n("a",K,[s("getpass 官网地址"),t(a)])]),Q,n("p",null,[n("a",V,[s("configparser 官网地址"),t(a)])]),X,n("p",null,[n("a",$,[s("logging 官网地址"),t(a)])]),Z,n("p",null,[n("a",nn,[s("warnings 官网地址"),t(a)])]),sn,an,n("p",null,[n("a",tn,[s("glob 官网地址"),t(a)])]),en,n("p",null,[n("a",on,[s("tarfile 官网地址"),t(a)])]),pn,n("p",null,[n("a",cn,[s("textwrap 官网地址"),t(a)])]),ln,n("p",null,[n("a",rn,[s("smtplib 官网地址"),t(a)])]),un,n("p",null,[n("a",dn,[s("email 官网地址"),t(a)])]),kn,mn,n("p",null,[n("a",gn,[s("csv 官网地址"),t(a)])]),bn,n("p",null,[n("a",vn,[s("hashlib 官网地址"),t(a)])]),hn,n("p",null,[n("a",yn,[s("pickle 官网地址"),t(a)])]),fn,n("p",null,[n("a",_n,[s("copy 官网地址"),t(a)])]),wn,n("p",null,[n("a",xn,[s("collections 官网地址"),t(a)])]),qn,n("p",null,[n("a",Nn,[s("socket 官网地址"),t(a)])]),Tn,n("p",null,[n("a",Pn,[s("http 官网地址"),t(a)])]),Sn,n("p",null,[n("a",Cn,[s("ftplib 官网地址"),t(a)])]),Dn,n("p",null,[n("a",En,[s("poplib 官网地址"),t(a)])]),Fn,n("p",null,[n("a",Mn,[s("imaplib 官网地址"),t(a)])]),On,n("p",null,[n("a",jn,[s("pprint 官网地址"),t(a)])]),Rn,n("p",null,[n("a",Hn,[s("telnetlib 官网地址"),t(a)])]),An,n("p",null,[n("a",zn,[s("subprocess 官网地址"),t(a)])]),Ln,In,n("p",null,[n("a",Un,[s("requests 官网地址"),t(a)])]),Wn,Jn,n("p",null,[n("a",Bn,[s("pygame 官网地址"),t(a)])]),Yn,n("p",null,[n("a",Gn,[s("Matplotlib 官网地址"),t(a)])]),Kn,n("p",null,[n("a",Qn,[s("Pygal 官网地址"),t(a)])]),Vn,n("p",null,[n("a",Xn,[s("django 官网地址"),t(a)])]),$n,n("p",null,[n("a",Zn,[s("PyPDF2 官网地址"),t(a)])]),ns,n("p",null,[n("a",ss,[s("xlrd 官网地址"),t(a)])]),as,n("p",null,[n("a",ts,[s("openpyxl 官网地址"),t(a)])]),es,n("p",null,[n("a",os,[s("pandas 官网地址"),t(a)])]),ps,n("p",null,[n("a",cs,[s("numpy 官网地址"),t(a)])]),ls,n("p",null,[n("a",is,[s("fabric 官网地址"),t(a)])]),rs,n("p",null,[n("a",us,[s("paramiko 官网地址"),t(a)])]),ds,n("p",null,[n("a",ks,[s("netmiko 官网地址"),t(a)])]),ms,n("p",null,[n("a",gs,[s("PyQt5 官网地址"),t(a)])]),bs])}const ws=o(i,[["render",vs],["__file","modules.html.vue"]]);export{ws as default};
