import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as c,c as o,b as n,e,d as s,w as i,f as t}from"./app-LkOcdYc0.js";const r={},p=n("h2",{id:"描述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#描述","aria-hidden":"true"},"#"),e(" 描述")],-1),m=n("p",null,[n("code",null,"git rebase"),e(" 用于将一个分支的提交记录复制到另一个分支上，并改变分支的基础点。"),n("code",null,"git rebase"),e(" 会提取您在当前分支（也就是 “变基分支”）上的所有提交，保存为临时的补丁文件，然后切换到目标分支（也就是您希望您的当前分支基于的那个分支），最后将这些之前保存的补丁应用到目标分支上。")],-1),u=n("code",null,"git rebase",-1),v=t("<p><code>git rebase</code> 的基本步骤包括：</p><ol><li>切换到目标分支：首先，您需要切换到您想要变基到的目标分支</li><li>执行 <code>rebase</code> 命令：然后，您可以使用 <code>git rebase &lt;source-branch&gt;</code> 命令来开始变基操作，其中 <code>&lt;source-branch&gt;</code> 是您想要复制提交记录的分支</li><li>跳过提交：如果遇到提交已经在分支中包含，则跳过该提交</li><li>解决冲突：如果目标分支和源分支在变基期间存在冲突，Git 会暂停并提示您解决这些冲突。解决冲突后，您需要使用 <code>git add</code> 命令标记冲突已解决，并使用 <code>git rebase --continue</code> 命令继续变基过程</li><li>完成 <code>rebase</code>：一旦所有提交都被成功应用到目标分支，变基操作就完成了</li></ol>",2),b=n("code",null,"git rebase",-1),g=n("code",null,"git rebase",-1),h=n("code",null,"git rebase",-1),k=t(`<p>此外，<code>git rebase</code> 还可以用于合并当前分支的多个提交记录，这对于想要清理或整理提交历史的情况非常有用。</p><p>总的来说，<code>git rebase</code> 是一个强大的工具，但也需要谨慎使用，以确保不会破坏项目的版本控制历史或给团队其他成员带来困扰。</p><h2 id="选项" tabindex="-1"><a class="header-anchor" href="#选项" aria-hidden="true">#</a> 选项</h2><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>--continue</code></td><td style="text-align:left;">继续运行 <code>rebase</code> 变基操作</td></tr><tr><td style="text-align:center;"><code>--abort</code></td><td style="text-align:left;">取消 <code>rebase</code> 变基操作，并将 HEAD 重置回原始分支</td></tr><tr><td style="text-align:center;"><code>--quit</code></td><td style="text-align:left;">放弃 <code>rebase</code> 变基操作，但 HEAD 不会重置回原始分支</td></tr><tr><td style="text-align:center;"><code>--onto &lt;newbase&gt;</code></td><td style="text-align:left;">创建新提交的起点</td></tr><tr><td style="text-align:center;"><code>-i, --interactive</code></td><td style="text-align:left;">交互式执行 <code>rebase</code> 变基操作</td></tr></tbody></table><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><h3 id="将提交记录复制到另一个分支" tabindex="-1"><a class="header-anchor" href="#将提交记录复制到另一个分支" aria-hidden="true">#</a> 将提交记录复制到另一个分支</h3><p>例如：将 <code>dev</code> 分支上的所有提交，复制到 <code>main</code> 分支下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout dev
<span class="token function">git</span> rebase main
<span class="token comment"># 或</span>
<span class="token function">git</span> rebase main dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：将 <code>dev</code> 分支下的某一个提交记录，复制到 <code>main</code> 分支下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase main <span class="token operator">&lt;</span>commit<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="继续变基操作" tabindex="-1"><a class="header-anchor" href="#继续变基操作" aria-hidden="true">#</a> 继续变基操作</h3><p>例如：当遇到冲突，<code>git rebase</code> 变基操作停止，手动解决冲突后，继续变基操作。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase <span class="token parameter variable">--continue</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="撤销变基操作" tabindex="-1"><a class="header-anchor" href="#撤销变基操作" aria-hidden="true">#</a> 撤销变基操作</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase <span class="token parameter variable">--abort</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="交互式执行变基操作" tabindex="-1"><a class="header-anchor" href="#交互式执行变基操作" aria-hidden="true">#</a> 交互式执行变基操作</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase <span class="token parameter variable">-i</span> HEAD~4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="将特性分支移植到另一个分支" tabindex="-1"><a class="header-anchor" href="#将特性分支移植到另一个分支" aria-hidden="true">#</a> 将特性分支移植到另一个分支</h3><p>将基于一个分支的特性分支移植到另一个分支，以假装特性分支是从后一个分支分叉而来。</p><p>首先，假设 <code>topic</code> 基于 <code>next</code> 分支。例如：<code>topic</code> 中开发的功能依赖于 <code>next</code> 中的某些功能。</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>o---o---o---o---o  master
     \\
      o---o---o---o---o  next
                       \\
                        o---o---o  topic
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>想让 <code>topic</code> 从分支 <code>master</code> 中分叉出来；例如：因为 <code>topic</code> 所依赖的功能已经合并到了更稳定的分支 <code>master</code> 中。希望的提交树看起来像这样：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>o---o---o---o---o  master
    |            \\
    |             o&#39;--o&#39;--o&#39;  topic
     \\
      o---o---o---o---o  next
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用以下命令来获取：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase <span class="token parameter variable">--onto</span> master next topic
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="重新基点分支的一部分" tabindex="-1"><a class="header-anchor" href="#重新基点分支的一部分" aria-hidden="true">#</a> 重新基点分支的一部分</h3><p>例如：有以下分支。</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>                        H---I---J topicB
                       /
              E---F---G  topicA
             /
A---B---C---D  master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase <span class="token parameter variable">--onto</span> master topicA topicB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将导致分支变基为：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>             H&#39;--I&#39;--J&#39;  topicB
            /
            | E---F---G  topicA
            |/
A---B---C---D  master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这在主题 B 不依赖于主题 A 的情况下非常有用。</p><h3 id="变基删除一系列提交" tabindex="-1"><a class="header-anchor" href="#变基删除一系列提交" aria-hidden="true">#</a> 变基删除一系列提交</h3><p>例如：有以下分支。</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>E---F---G---H---I---J  topicA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase <span class="token parameter variable">--onto</span> topicA~5 topicA~3 topicA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将导致删除 F 和 G 提交：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>E---H&#39;---I&#39;---J&#39;  topicA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果 F 和 G 提交在某些方面有缺陷，或者不应该是 topicA 的一部分，这一点就很有用。请注意，<code>--onto</code> 参数和 <code>&lt;upstream&gt;</code> 参数可以是任何有效的提交。</p><h3 id="交互式变基" tabindex="-1"><a class="header-anchor" href="#交互式变基" aria-hidden="true">#</a> 交互式变基</h3><p>在变基的时候进入一个交互界面，执行交互式变基操作，会将 <code>&lt;since&gt;..&lt;till&gt;</code> 的提交悉数罗列在一个文件中，然后自动打开一个编辑器来编辑这个文件。可以通过修改文件的内容设定变基操作，实现删除提交、将多个提交压缩为一个提交、更改提交的顺序，以及更改历史提交的提交说明等。</p><p>例如：下面的界面就是执行交互式变基时编辑器打开的文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pick <span class="token number">1069522</span> ignore object files.
pick d20b252 move .gitignore outside also works.
pick 79b758f <span class="token function">add</span> hello.h
pick dde7bb9 modify hello.h

<span class="token comment"># Rebase bcc612a..dde7bb9 onto bcc612a (4 commands)</span>
<span class="token comment">#</span>
<span class="token comment"># Commands:</span>
<span class="token comment"># p, pick &lt;commit&gt; = use commit</span>
<span class="token comment"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span>
<span class="token comment"># e, edit &lt;commit&gt; = use commit, but stop for amending</span>
<span class="token comment"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span>
<span class="token comment"># f, fixup [-C | -c] &lt;commit&gt; = like &quot;squash&quot; but keep only the previous</span>
<span class="token comment">#                    commit&#39;s log message, unless -C is used, in which case</span>
<span class="token comment">#                    keep only this commit&#39;s message; -c is same as -C but</span>
<span class="token comment">#                    opens the editor</span>
<span class="token comment"># x, exec &lt;command&gt; = run command (the rest of the line) using shell</span>
<span class="token comment"># b, break = stop here (continue rebase later with &#39;git rebase --continue&#39;)</span>
<span class="token comment"># d, drop &lt;commit&gt; = remove commit</span>
<span class="token comment"># l, label &lt;label&gt; = label current HEAD with a name</span>
<span class="token comment"># t, reset &lt;label&gt; = reset HEAD to a label</span>
<span class="token comment"># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span>
<span class="token comment">#         create a merge commit using the original merge commit&#39;s</span>
<span class="token comment">#         message (or the oneline, if no original merge commit was</span>
<span class="token comment">#         specified); use -c &lt;commit&gt; to reword the commit message</span>
<span class="token comment"># u, update-ref &lt;ref&gt; = track a placeholder for the &lt;ref&gt; to be updated</span>
<span class="token comment">#                       to this position in the new commits. The &lt;ref&gt; is</span>
<span class="token comment">#                       updated at the end of the rebase</span>
<span class="token comment">#</span>
<span class="token comment"># These lines can be re-ordered; they are executed from top to bottom.</span>
<span class="token comment">#</span>
<span class="token comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span>
<span class="token comment">#</span>
<span class="token comment"># However, if you remove everything, the rebase will be aborted.</span>
<span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前四行默认的动作都是 <code>pick</code>，即应用此提交。参考文件中的注释，可以通过修改动作名称，在变基的时候执行特定操作。</p><ul><li><strong>r, reword</strong>：在变基时会应用此提交，但是在提交的时候允许用户修改提交说明</li><li><strong>e, edit</strong>：也会在变基时应用此提交，但是会在应用后暂停变基，提示用户使用 <code>git commit --amend</code> 执行提交，以便对提交进行修补。当用户执行 <code>git commit --amend</code> 完成提交后，还需要执行 <code>git rebase --continue</code> 继续变基操作</li><li><strong>s, squash</strong>：该提交会与前面的提交压缩为一个</li><li><strong>f, fixup</strong>：类似 <code>squash</code>，但是此提交的提交说明被丢弃</li></ul><p>可以通过修改变基任务文件中各个提交的先后顺序，进而改变最终变基后提交的先后顺序。</p><p>可以修改变基任务文件，删除包含相应提交的行，这样该提交就不会被应用，进而在变基后的提交中被删除。</p><p>例如：删除 D 提交。</p><ol><li><p>变基前日志</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">--oneline</span> <span class="token parameter variable">--decorate</span> <span class="token parameter variable">-6</span>

dde7bb9 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> main, tag: F<span class="token punctuation">)</span> modify hello.h
79b758f <span class="token punctuation">(</span>tag: E<span class="token punctuation">)</span> <span class="token function">add</span> hello.h
d20b252 <span class="token punctuation">(</span>tag: D<span class="token punctuation">)</span> move .gitignore outside also works.
<span class="token number">1069522</span> <span class="token punctuation">(</span>tag: C<span class="token punctuation">)</span> ignore object files.
bcc612a <span class="token punctuation">(</span>tag: hello_1.0, tag: B<span class="token punctuation">)</span> Hello world initialized.
4dcaeec <span class="token punctuation">(</span>tag: A, origin/main, origin/HEAD<span class="token punctuation">)</span> README is from welcome.txt.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行交互式变基操作</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase <span class="token parameter variable">-i</span> D^
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>自动用编辑器修改文件，省略井号（<code>#</code>）内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pick 3488f2c move.gitignore outside also works.
pick 48456ab <span class="token function">add</span> hello.h
pick b6f0b0a modify hello.h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>将第一行删除，使得上面的文件看起来像是这样，省略井号（<code>#</code>）内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pick 48456ab <span class="token function">add</span> hello.h
pick b6f0b0a modify hello.h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>保存退出</p></li><li><p>变基自动开始，即刻完成。显示下面的内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Successfully rebased and updated refs/heads/master.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看日志。当前分支 <code>master</code> 已经完成变基，删除 D 提交</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">--oneline</span> <span class="token parameter variable">--decorate</span> <span class="token parameter variable">-6</span>

78e5133<span class="token punctuation">(</span>HEAD,master<span class="token punctuation">)</span>modify hello.h
11eea7e <span class="token function">add</span> hello.h
b3af728<span class="token punctuation">(</span>tag:C<span class="token punctuation">)</span>ignore object files.
d71ce92<span class="token punctuation">(</span>tag:hello_1.0,tag:B<span class="token punctuation">)</span>Hello world initialized.
c024f34<span class="token punctuation">(</span>tag:A<span class="token punctuation">)</span>README is from welcome.txt.
63992f0 restore file:welcome.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,51);function f(x,_){const a=l("RouterLink");return c(),o("div",null,[p,m,n("p",null,[e("这个命令可以保持一个线性且干净的提交历史。与 "),s(a,{to:"/commands/git/git_merge.html"},{default:i(()=>[e("git merge")]),_:1}),e(" 不同，"),u,e(" 不会创建一个新的合并提交，而是将变基分支的提交 “复制” 到目标分支上，从而保持一个看似连续的提交历史。这可以使提交历史更容易阅读和理解，尤其是在查看日志或进行代码审查时。")]),v,n("p",null,[e("需要注意的是，虽然 "),b,e(" 可以产生更干净的提交历史，但它也改变了历史的实际顺序。因此，在使用 "),g,e(" 时需要谨慎，特别是在与他人协作的项目中，因为这可能会导致混淆或问题。通常，对于已经公开的提交，推荐使用 "),s(a,{to:"/commands/git/git_merge.html"},{default:i(()=>[e("git merge")]),_:1}),e(" 而不是 "),h,e("，以避免重写已经共享的历史。")]),k])}const w=d(r,[["render",f],["__file","git_rebase.html.vue"]]);export{w as default};
