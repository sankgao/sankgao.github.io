import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as e}from"./app-xnWLYJr6.js";const t={},o=e(`<h2 id="语句" tabindex="-1"><a class="header-anchor" href="#语句" aria-hidden="true">#</a> 语句</h2><p>C 语言的代码由一行行语句（statement）组成。一行语句就是程序执行的一个操作命令。C 语言规定，语句必须使用分号结尾，除非有明确规定可以不写分号，分号表明语句结束符。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">;</span>
i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>多个语句可以写在一行。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i<span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一个语句也可以写成多行，这时就要依靠分号判断语句在哪一行结束。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span>
i
<span class="token punctuation">;</span>

i
<span class="token operator">=</span>
<span class="token number">1</span>
<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="表达式" tabindex="-1"><a class="header-anchor" href="#表达式" aria-hidden="true">#</a> 表达式</h2><p>C 语言的各种计算，主要通过表达式完成。表达式（expression）是一个计算式，用来获取值。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">表达式与语句的区别</p><ul><li>语句可以包含表达式，但是表达式不构成语句</li><li>表达式都有返回值，语句不一定有。因为语句用来执行某个命令，很多时候不需要返回值，比如变量声明语句 <code>int i = 1;</code></li></ul></div><h2 id="语句块" tabindex="-1"><a class="header-anchor" href="#语句块" aria-hidden="true">#</a> 语句块</h2><p>使用一对大括号 <code>{}</code> 将多个语句组成一个块，也称为复合语句（compounded statement）。大括号的结尾不需要添加分号。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="空格" tabindex="-1"><a class="header-anchor" href="#空格" aria-hidden="true">#</a> 空格</h2><p>空格主要用来帮助编译器区分语法单位，只是为了增加代码的可读性。语法单位之间的多个空格，等同于单个空格。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">int</span>    i <span class="token operator">=</span>     <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h2><p>注释是对代码的说明，编译器会忽略注释。</p><p>注释有两种表示方法：</p><ul><li><p><code>/* 注释内容 */</code></p><p>将注释内容放在 <code>/* */</code> 之间，内部可以分行。这种注释可以插在行内，跟在它后面的代码依然会有效执行。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* 注释内容 */</span>

<span class="token comment">/* 一行注释内容
    另一行注释内容
*/</span>

<span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">/* i = 1; */</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>// 注释内容</code></p><p>将注释内容放在 <code>//</code> 之后，这种注释只能是单行，可以放在行首，也可以放在一行语句的结尾。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 注释内容</span>
<span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token comment">// 注释内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="printf" tabindex="-1"><a class="header-anchor" href="#printf" aria-hidden="true">#</a> printf()</h2><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h3><p><code>printf()</code> 的作用是将参数文本输出到屏幕。<code>f</code> 代表 <code>format</code>（格式化），表示可以定制输出文本的格式。</p><p><code>printf()</code> 不会在行尾自动添加换行符，运行结束后，光标就停留在输出结束的地方，不会自动换行。为了让光标移到下一行的开头，可以在输出文本的结尾，添加一个换行符 <code>\\n</code>。</p><p><code>printf()</code> 是在标准库的头文件 <code>stdio.h</code> 定义的。使用这个函数之前，必须在源码文件头部引入这个头文件。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World\\n&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="占位符" tabindex="-1"><a class="header-anchor" href="#占位符" aria-hidden="true">#</a> 占位符</h3><p><code>printf()</code> 可以在输出文本中指定占位符。所谓 “占位符” 就是这个位置可以用其他值代入。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> my_str <span class="token operator">=</span> World<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello %s\\n&quot;</span><span class="token punctuation">,</span> my_str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>%s</code> 就是占位符，表示这个位置要用其他值来替换。占位符的第一个字符一律为百分号 <code>%</code>，第二个字符表示占位符的类型。</p><p>常用的占位符如下：</p><ul><li><strong>%a</strong>：十六进制浮点数，字母输出为小写</li><li><strong>%A</strong>：十六进制浮点数，字母输出为大写</li><li><strong>%c</strong>：字符</li><li><strong>%d</strong>：十进制整数</li><li><strong>%e</strong>：使用科学计数法的浮点数，指数部分的 e 为小写</li><li><strong>%E</strong>：使用科学计数法的浮点数，指数部分的 E 为大写</li><li><strong>%i</strong>：整数，基本等同于 <code>%d</code></li><li><strong>%f</strong>：小数（包含 float 类型和 double 类型）</li><li><strong>%g</strong>：6 个有效数字的浮点数。整数部分一旦超过 6 位，就会自动转为科学计数法，指数部分的 e 为小写</li><li><strong>%G</strong>：等同于 <code>%g</code>，唯一的区别是指数部分的 E 为大写</li><li><strong>%hd</strong>：十进制 short int 类型</li><li><strong>%ho</strong>：八进制 short int 类型</li><li><strong>%hx</strong>：十六进制 short int 类型</li><li><strong>%hu</strong>：unsigned short int 类型</li><li><strong>%ld</strong>：十进制 long int 类型</li><li><strong>%lo</strong>：八进制 long int 类型</li><li><strong>%lx</strong>：十六进制 long int 类型</li><li><strong>%lu</strong>：unsigned long int 类型</li><li><strong>%lld</strong>：十进制 long long int 类型</li><li><strong>%llo</strong>：八进制 long long int 类型</li><li><strong>%llx</strong>：十六进制 long long int 类型</li><li><strong>%llu</strong>：unsigned long long int 类型</li><li><strong>%Le</strong>：科学计数法表示的 long double 类型浮点数</li><li><strong>%Lf</strong>：long double 类型浮点数</li><li><strong>%n</strong>：已输出的字符串数量。该占位符本身不输出，只将值存储在指定变量之中</li><li><strong>%o</strong>：八进制整数</li><li><strong>%p</strong>：指针</li><li><strong>%s</strong>：字符串</li><li><strong>%u</strong>：无符号整数（unsigned int）</li><li><strong>%x</strong>：十六进制整数</li><li><strong>%X</strong>：等同于 <code>%x</code>，唯一的区别是指数部分的 X 为大写</li><li><strong>%zd</strong>：size_t 类型</li><li><strong>%%</strong>：输出一个百分号</li></ul><h3 id="输出格式" tabindex="-1"><a class="header-anchor" href="#输出格式" aria-hidden="true">#</a> 输出格式</h3><p><code>printf()</code> 可以定制占位符的输出格式。</p><ul><li><p><strong>限定宽度</strong></p><p><code>printf()</code> 允许限定占位符的最小宽度。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5d\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出为 &quot;  123&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>%5d</code> 表示这个占位符的宽度至少为 5 位。如果不满 5 位，对应的值的前面会添加空格。</p><p>输出的值默认是右对齐，即输出内容前面会有空格；如果希望改成左对齐，在输出内容后面添加空格，可以在占位符的 <code>%</code> 的后面插入一个 <code>-</code> 号。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%-5d\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出为 &quot;123  &quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于小数，这个限定符会限制所有数字的最小显示宽度。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%12f\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">123.45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出为 &quot;  123.450000&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>%12f</code> 表示输出的浮点数最少要占据 12 位。由于小数的默认显示精度是小数点后 6 位，所以 123.45 输出结果的头部会添加 2 个空格。</p></li><li><p><strong>总是显示正负号</strong></p><p>默认情况下，<code>printf()</code> 不对正数显示 <code>+</code> 号，只对负数显示 <code>-</code> 号。如果想让正数也输出 <code>+</code> 号，可以在占位符的 <code>%</code> 后面加一个 <code>+</code>。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+d\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 +12</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 -12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>%+d</code> 可以确保输出的数值，总是带有正负号。</p></li><li><p><strong>限定小数位数</strong></p><p>输出小数时，有时希望限定小数的位数。比如：希望小数点后面只保留两位。占位符可以写成 <code>%.2f</code>。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Number is %.2f\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 Number is 0.50</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种写法可以与限定宽度占位符，结合使用。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%6.2f\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出为 &quot;  0.50&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>%6.2f</code> 表示输出字符串最小宽度为 6，小数位数为 2。所以，输出字符串的头部有两个空格。</p><p>最小宽度和小数位数这两个限定值，都可以用 <code>*</code> 代替，通过 <code>printf()</code> 的参数传入。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%*.*f\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%6.2f\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>%*.*f</code> 的两个星号通过 <code>printf()</code> 的两个参数 6 和 2 传入。</p></li><li><p><strong>输出部分字符串</strong></p><p><code>%s</code> 占位符用来输出字符串，默认是全部输出。如果只想输出开头的部分，可以用 <code>%.[m]s</code> 指定输出的长度，其中 <code>[m]</code> 代表一个数字，表示所要输出的长度。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.5s\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>%.5s</code> 表示只输出字符串 “hello world” 的前 5 个字符，即 “hello”。</p></li></ul><h2 id="标准库-头文件" tabindex="-1"><a class="header-anchor" href="#标准库-头文件" aria-hidden="true">#</a> 标准库，头文件</h2><p>程序需要用到的功能，不一定需要自己编写，C 语言可能已经自带了。程序员只要去调用这些自带的功能，就省得自己编写代码了。</p><p>C 语言自带的所有这些功能，统称为 “标准库”（standard library），因为它们是写入标准的，到底包括哪些功能，应该怎么使用的，都是规定好的，这样才能保证代码的规范和可移植。</p><p>不同的功能定义在不同的文件里面，这些文件统称为 “头文件”（header file）。如果系统自带某一个功能，就一定还会自带描述这个功能的头文件，比如 <code>printf()</code> 的头文件就是系统自带的 <code>stdio.h</code>。头文件的后缀通常是 <code>.h</code>。</p><p>如果要使用某个功能，就必须先加载对应的头文件，加载使用的是 <code>#include</code> 命令。加载头文件的 <code>#include</code> 语句不需要分号结尾。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,42),i=[o];function c(l,p){return s(),a("div",null,i)}const u=n(t,[["render",c],["__file","syntax.html.vue"]]);export{u as default};
