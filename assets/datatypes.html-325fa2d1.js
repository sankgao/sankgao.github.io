import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-7d62207f.js";const t={},p=e(`<p>在编程中，数据类型是一个重要的概念。</p><p>变量可以存储不同类型的数据，并且不同类型可以执行不同的操作。</p><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><h3 id="整数类型-int" tabindex="-1"><a class="header-anchor" href="#整数类型-int" aria-hidden="true">#</a> 整数类型（int）</h3><ul><li><strong>十进制表示方式</strong>：<code>0</code> 不能作为十进制数的开头。如：<code>20</code></li><li><strong>二进制表示方式</strong>：以阿拉伯数字 <code>0</code> 与英文字母 <code>B（或 b）</code>作为前缀。如：<code>0B1010</code>、<code>0b1010</code></li><li><strong>八进制表示方式</strong>：以阿拉伯数字 <code>0</code> 与英文字母 <code>O（或 o）</code>作为前缀。如：<code>0O34</code>、<code>0o34</code></li><li><strong>十六进制表示方式</strong>：以阿拉伯数字 <code>0</code> 与英文字母 <code>X（或 x）</code>作为前缀。如：<code>0X1c</code>、<code>0x1c</code></li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_int <span class="token operator">=</span> <span class="token number">1</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>my_int<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;class &#39;int&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="浮点类型-float" tabindex="-1"><a class="header-anchor" href="#浮点类型-float" aria-hidden="true">#</a> 浮点类型（float）</h3><p>在科学计数法中使用 <code>E（或 e）</code>表示乘以 <code>10</code> 的几次方。例如：<strong>1e2</strong> 表示 <strong>10<sup>2</sup></strong>，1 乘 10 的 2 次方。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_float <span class="token operator">=</span> <span class="token number">1.1</span>
my_float01 <span class="token operator">=</span> <span class="token number">1e2</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>my_float<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;class &#39;float&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_float01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：100.0，表示 1 乘 10 的 10 次方</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="复数类型-complex" tabindex="-1"><a class="header-anchor" href="#复数类型-complex" aria-hidden="true">#</a> 复数类型（complex）</h3><p>整数和浮点数在数学中统称为实数，与实数对应的是复数，复数在数学中被表示为：<code>a+bi</code>，其中 <code>a</code> 被称为实部，<code>b</code> 被称为虚部，<code>i</code> 被称为虚数单位。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_float <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">4.5j</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>my_float<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;class &#39;complex&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串类型-str" tabindex="-1"><a class="header-anchor" href="#字符串类型-str" aria-hidden="true">#</a> 字符串类型（str）</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>字符串类型数据都要带引号</p></div><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_str <span class="token operator">=</span> <span class="token string">&#39;Hello, World!&#39;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>my_str<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;class &#39;str&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="布尔类型-bool" tabindex="-1"><a class="header-anchor" href="#布尔类型-bool" aria-hidden="true">#</a> 布尔类型（bool）</h3><ul><li><p>通常判断使用，布尔型有两个取值 <code>True</code> 和 <code>False</code></p></li><li><p>只有以下几种情况值是 <code>False</code>，其它对象在 <code>if</code> 或 <code>while</code> 语句中都为真</p><ul><li><code>False</code> 或 <code>None</code></li><li>数值中的零，包括 <code>0</code>、<code>0.0</code>、<code>虚数 0</code></li><li>空序列，包括字符串、空元组、空列表、空字典</li><li>自定义对象的实例，该对象的 <code>__bool__</code> 方法返回 <code>False</code> 或 <code>__len__</code> 方法返回 <code>0</code></li></ul></li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_bool <span class="token operator">=</span> <span class="token boolean">True</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>my_bool<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;class &#39;bool&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="列表-list" tabindex="-1"><a class="header-anchor" href="#列表-list" aria-hidden="true">#</a> 列表（list）</h3><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;class &#39;list&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元组-tuple" tabindex="-1"><a class="header-anchor" href="#元组-tuple" aria-hidden="true">#</a> 元组（tuple）</h3><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>my_tuple<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;class &#39;tuple&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="集合-set" tabindex="-1"><a class="header-anchor" href="#集合-set" aria-hidden="true">#</a> 集合（set）</h3><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_set <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>my_set<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;class &#39;set&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字典-dict" tabindex="-1"><a class="header-anchor" href="#字典-dict" aria-hidden="true">#</a> 字典（dict）</h3><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;18&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>my_dict<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;class &#39;dict&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数字类型的相互转换" tabindex="-1"><a class="header-anchor" href="#数字类型的相互转换" aria-hidden="true">#</a> 数字类型的相互转换</h2><p>在 Python 的数字类型中，除复数外，其他三种数字类型如：整数、浮点和布尔值都可以相互转换，分为 <strong>隐式类型的转换</strong> 和 <strong>显式类型的转换。</strong></p><h3 id="隐式类型转换" tabindex="-1"><a class="header-anchor" href="#隐式类型转换" aria-hidden="true">#</a> 隐式类型转换</h3><p>数字之间可以进行数学计算，在进行数学计算时若数字类型不同，则会发生隐式类型的转换。</p><table><thead><tr><th style="text-align:center;">操作数 1 的类型</th><th style="text-align:center;">操作数 2 的类型</th><th style="text-align:center;">转换后的类型</th></tr></thead><tbody><tr><td style="text-align:center;">布尔值</td><td style="text-align:center;">整数</td><td style="text-align:center;">整数</td></tr><tr><td style="text-align:center;">布尔值、整数</td><td style="text-align:center;">浮点</td><td style="text-align:center;">浮点</td></tr></tbody></table><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token boolean">True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2。True 被转换为整数 1</span>

a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token boolean">False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：1。False 被转换为整数 0</span>

a <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">+</span> <span class="token number">1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2.0。整数 1 被转换为浮点数 1.0</span>

a <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">+</span> <span class="token boolean">True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2.0。True 被转换为浮点数 1.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="显示类型转换" tabindex="-1"><a class="header-anchor" href="#显示类型转换" aria-hidden="true">#</a> 显示类型转换</h3><p>除复数外，其他三种数字类型如：整数、浮点和布尔值都有自己的转换函数，分别是 <code>int()</code>、<code>float()</code> 和 <code>bool()</code> 函数。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 将布尔值 False 转换为整数 0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0</span>

<span class="token comment"># 将浮点数 0.6 转换为整数 0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0.6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0</span>

<span class="token comment"># float(5) 将整数 5 转换为浮点数 5.0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：5.0</span>

<span class="token comment"># 将布尔值 False 转换为浮点数 0.0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0.0</span>

<span class="token comment"># 将整数 5 转换为布尔值 True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True</span>

<span class="token comment"># 将浮点数 0.6 转换为布尔值 True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">0.6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","datatypes.html.vue"]]);export{r as default};
