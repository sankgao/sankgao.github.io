import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-ed060d39.js";const p="/assets/bubble_sort-aa4aa502.png",e="/assets/bubble_sort_1-307ab1d2.png",o="/assets/bubble_sort_2-ce9e328e.png",c="/assets/bubble_sort_3-84e4400b.png",i="/assets/bubble_sort_4-325cc79a.png",l="/assets/bubble_sort_5-8a4a3a59.png",u="/assets/bubble_sort_6-1a30e324.png",r="/assets/cock_tail_sort-cbfd0298.png",d="/assets/cock_tail_sort_1-f5200bb2.png",k="/assets/pivot-d74c13f5.png",m="/assets/pivot_1-79709e87.png",b="/assets/pivot_2-ddc847d0.png",v="/assets/pivot_3-ddc8a24a.png",g="/assets/unilateral_loop-62b4758f.png",_="/assets/unilateral_loop_1-94c2e350.png",y="/assets/unilateral_loop_2-24d60268.png",f="/assets/unilateral_loop_3-7ca5ebaa.png",h="/assets/unilateral_loop_4-c67ed555.png",x="/assets/quick_sort_stack-dc998d33.png",w="/assets/heap_sort-00338211.png",O="/assets/heap_sort_1-82be3a4f.png",q="/assets/heap_sort_2-49adf674.png",j="/assets/count_sort-95e7d34d.png",z="/assets/count_sort_1-8e409540.png",I="/assets/count_sort_2-16dd999c.png",T="/assets/count_sort_3-c243f3d8.png",F="/assets/count_sort_4-80d4c7fd.png",B="/assets/count_sort_5-353dde8c.png",E="/assets/count_sort_6-62ba2705.png",N="/assets/count_sort_7-a34f5a8b.png",S="/assets/count_sort_8-22d1f132.png",V="/assets/count_sort_9-ddd915f6.png",A="/assets/bucket_sort-d0ff1be1.png",C="/assets/bucket_sort_1-7eb9fccd.png",D="/assets/bucket_sort_2-35fe6ab4.png",G={},H=t('<p>根据时间复杂度的不同，主流的排序算法可以分为三大类：</p><ul><li><p><strong>时间复杂度为 O(n<sup>2</sup>) 的排序算法</strong></p><ul><li><strong>冒泡排序</strong></li><li><strong>选择排序</strong></li><li><strong>插入排序</strong></li><li><strong>希尔排序</strong>（希尔排序比较特殊，它的性能略优于 <strong>O(n<sup>2</sup>)</strong>，但又比不上 <strong>O(nlog<sub>2</sub>n)</strong>，姑且把它归入本类）</li></ul></li><li><p><strong>时间复杂度为 O(nlog<sub>2</sub>n) 的排序算法</strong></p><ul><li><strong>快速排序</strong></li><li><strong>归并排序</strong></li><li><strong>堆排序</strong></li></ul></li><li><p><strong>时间复杂度为线性的排序算法</strong></p><ul><li><strong>计数排序</strong></li><li><strong>桶排序</strong></li><li><strong>基数排序</strong></li></ul></li></ul><p>当然，以上列举的只是主流的排序算法，在算法界还存在着更多五花八门的排序算法，它们有些基于传统排序算法变形而来；有些则是脑洞大开，例如：鸡尾酒排序、猴子排序、睡眠排序等。</p><p>此外，排序算法还可以根据其稳定性，划分为 <strong>稳定排序</strong> 和 <strong>不稳定排序</strong>。即如果值相同的元素在排序后仍然保持着排序前的顺序，则这样的排序算法是稳定排序；如果值相同的元素在排序后打乱了排序前的顺序，则这样的排序算法是不稳定排序。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在大多数场景中，值相同的元素谁先谁后是无所谓的。但是在某些场景下，值相同的元素必须保持原有的顺序</p></div><h2 id="冒泡排序" tabindex="-1"><a class="header-anchor" href="#冒泡排序" aria-hidden="true">#</a> 冒泡排序</h2><p><strong>冒泡排序（bubble sort）</strong>，它是一种基础的交换排序。而冒泡排序之所以叫冒泡排序，是因为这种排序算法的每一个元素都可以像汽水中的小气泡一样，可以根据自身大小，一点一点地向着数组的一侧移动。算法的每一轮都是从左到右来比较元素，并进行 <strong>单向</strong> 的位置交换的。</p><p>例如：有 <code>8</code> 个数字组成一个无序数列 <code>{5, 8, 6, 3, 9, 2, 1, 7}</code>，希望按照从小到大的顺序对其进行排序。</p><figure><img src="'+p+'" alt="bubble_sort" tabindex="0" loading="lazy"><figcaption>bubble_sort</figcaption></figure><p>按照冒泡排序的思想，要把 <strong>相邻的元素两两比较</strong>，当一个元素大于右侧相邻元素时，交换它们的位置；当一个元素小于或等于右侧相邻元素时，位置不变。详细过程如下：</p><figure><img src="'+e+'" alt="bubble_sort_1" tabindex="0" loading="lazy"><figcaption>bubble_sort_1</figcaption></figure><p>这样一来，元素9 作为数列中最大的元素，就像是汽水中的小气泡一样，“漂” 到了最右侧。</p><p>这时，冒泡排序的第一轮就结束了。数列最右侧元素9 的位置可以认为是一个有序区域，有序区目前只有 <code>1</code> 个元素：<code>{9}</code>。</p><figure><img src="'+o+'" alt="bubble_sort_2" tabindex="0" loading="lazy"><figcaption>bubble_sort_2</figcaption></figure><p>接着进行第二轮排序：</p><figure><img src="'+c+'" alt="bubble_sort_3" tabindex="0" loading="lazy"><figcaption>bubble_sort_3</figcaption></figure><p>第二轮排序结束后，数列右侧的有序区有了 <code>2</code> 个元素，顺序如下：<code>{8, 9}</code>。</p><figure><img src="'+i+'" alt="bubble_sort_4" tabindex="0" loading="lazy"><figcaption>bubble_sort_4</figcaption></figure><p>之后几轮排序和上面一样，从第三轮到第七轮的状态如下：</p><figure><img src="'+l+`" alt="bubble_sort_5" tabindex="0" loading="lazy"><figcaption>bubble_sort_5</figcaption></figure><p>到此为止，所有元素都是有序的了，这就是冒泡排序的整体思路。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>冒泡排序是一种稳定排序，值相等的元素并不会打乱原本的顺序。由于该排序算法的每一轮都要遍历所有元素，总共遍历（元素数量 - 1）轮，所以平均时间复杂度是 <strong>O(n<sup>2</sup>)</strong></p></div><details class="hint-container details"><summary>冒泡排序算法第一版代码</summary><p>代码非常简单，使用双循环进行排序。外部循环控制所有的回合，内部循环实现每一轮的冒泡处理，先进行元素比较，再进行元素交换</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">bubble_sort_v1</span><span class="token punctuation">(</span>array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
                array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp


my_array <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
bubble_sort_v1<span class="token punctuation">(</span>my_array<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_array<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="冒泡排序的优化" tabindex="-1"><a class="header-anchor" href="#冒泡排序的优化" aria-hidden="true">#</a> 冒泡排序的优化</h3><p>在刚才的排序中 <code>{5, 8, 6, 3, 9, 2, 1, 7}</code> 这个数组，当排序算法分别执行到第六轮和第七轮时，很明显可以看出，经过第六轮排序后，整个数列已经是有序的了，可是排序算法仍然兢兢业业地继续执行了第七轮排序。</p><p>在这种情况下，如果能判断出数列已经有序，并做出标记，那么剩下的几轮排序就不必执行了，可以提前结束工作。</p><details class="hint-container details"><summary>冒泡排序算法第二版代码</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">bubble_sort_v2</span><span class="token punctuation">(</span>array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 有序标记，每一轮的初始值是 True</span>
        is_sorted <span class="token operator">=</span> <span class="token boolean">True</span>
        
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
                array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp
                <span class="token comment"># 有元素交换，所以不是有序的，标记变为 False</span>
                is_sorted <span class="token operator">=</span> <span class="token boolean">False</span>
        
        <span class="token keyword">if</span> is_sorted<span class="token punctuation">:</span>
            <span class="token keyword">break</span>


my_array <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
bubble_sort_v2<span class="token punctuation">(</span>my_array<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_array<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>与第一版代码相比，第二版代码做了小小的改动，利用布尔变量 <code>is_sorted</code> 作为标记。如果在本轮排序中，元素有交换，则说明数列无序；如果没有元素交换，则说明数列已经有序，然后直接跳出大循环。</p><h3 id="进一步优化冒泡排序性能。" tabindex="-1"><a class="header-anchor" href="#进一步优化冒泡排序性能。" aria-hidden="true">#</a> 进一步优化冒泡排序性能。</h3><p>例如：<code>{3, 4, 2, 1, 5, 6, 7, 8}</code> 这个数组，前半部分的元素 <code>(3, 4, 2, 1)</code> 无序，后半部分的元素 <code>(5, 6, 7, 8)</code> 按升序排列，并且后半部分元素中的最小值也大于前半部分元素的最大值。</p><p>按照冒泡排序算法的思路进行排序，具体效果如下：</p><p><strong>第一轮：</strong></p><ul><li>元素3 和元素4 比较，发现 3 小于 4，所以位置不变</li><li>元素4 和元素2 比较，发现 4 大于 2，交换元素4 和元素2 的位置</li><li>元素4 和元素1 比较，发现 4 大于 1，交换元素4 和元素1 的位置</li><li>元素4 和元素5 比较，发现 4 小于 5，所以位置不变</li><li>元素5 和元素6 比较，发现 5 小于 6，所以位置不变</li><li>元素6 和元素7 比较，发现 6 小于 7，所以位置不变</li><li>元素7 和元素8 比较，发现 7 小于 8，所以位置不变</li></ul><p>第一轮结束，数列有序区包含 <code>1</code> 个元素：<code>{8}</code>。</p><p><strong>第二轮：</strong></p><ul><li>元素3 和元素2 比较，发现 3 大于 2，交换元素3 和 元素2 的位置</li><li>元素3 和元素1 比较，发现 3 大于 1，交换元素3 和 元素1 的位置</li><li>元素3 和元素4 比较，发现 3 小于 4，所以位置不变</li><li>元素4 和元素5 比较，发现 4 小于 5，所以位置不变</li><li>元素5 和元素6 比较，发现 5 小于 6，所以位置不变</li><li>元素6 和元素7 比较，发现 6 小于 7，所以位置不变</li><li>元素7 和元素8 比较，发现 7 小于 8，所以位置不变</li></ul><p>第二轮结束，数列有序区包含 <code>2</code> 个元素：<code>{7, 8}</code>。</p><div class="hint-container note"><p class="hint-container-title">注</p><p><code>{3, 4, 2, 1, 5, 6, 7, 8}</code> 这个数组，右面的许多元素已经是有序的了，可是每一轮还是白白地比较了许多次</p></div><p>按照现有的逻辑，有序区的长度和排序的轮数是相等的。例如：第一轮排序过后的有序区长度是 <code>1</code>，第二轮排序过后的有序区长度是 <code>2</code>……</p><p>实际上，数列真正的有序区可能会大于这个长度，如上述例子中在第二轮排序时，后面的 <code>5</code> 个元素实际上都已经属于有序区了。因此后面的多次元素比较是没有意义的。</p><p>为了避免这种情况，可以在每一轮排序后，记录下最后一次元素交换的位置，该位置即为 <strong>无序数列的边界</strong>，再往后就是 <strong>有序区</strong> 了。</p><details class="hint-container details"><summary>冒泡排序算法第三版代码</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">bubble_sort_v3</span><span class="token punctuation">(</span>array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 记录最后一次交换的位置</span>
    last_exchange_index <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token comment"># 无序数列的边界，每次比较只需要比到这里</span>
    sort_border <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 有序标记，每一轮的初始值是 True</span>
        is_sorted <span class="token operator">=</span> <span class="token boolean">True</span>
        
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>sort_border<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
                array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp
                <span class="token comment"># 有元素交换，所以不是有序的，标记变为 False</span>
                is_sorted <span class="token operator">=</span> <span class="token boolean">False</span>
                <span class="token comment"># 把无序数列的边界更新为最后一次交换元素的位置</span>
                last_exchange_index <span class="token operator">=</span> j
        
        sort_border <span class="token operator">=</span> last_exchange_index
        
        <span class="token keyword">if</span> is_sorted<span class="token punctuation">:</span>
            <span class="token keyword">break</span>


my_array <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
bubble_sort_v3<span class="token punctuation">(</span>my_array<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_array<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>在第三版代码中，<code>sort_border</code> 就是无序数列的边界。在每一轮排序过程中，处于 <code>sort_border</code> 之后的元素就不需要再进行比较了，肯定是有序的。</p><h3 id="鸡尾酒排序" tabindex="-1"><a class="header-anchor" href="#鸡尾酒排序" aria-hidden="true">#</a> 鸡尾酒排序</h3><p>鸡尾酒排序的元素比较和交换过程是 <strong>双向</strong> 的。</p><p>例如：由 <code>8</code> 个数字组成一个无序数列 <code>{2, 3, 4, 5, 6, 7, 8, 1}</code>，希望对其进行从小到大的排序。</p><p>按照 <strong>冒泡排序</strong> 的思想，排序过程如下：</p><figure><img src="`+u+'" alt="bubble_sort_6" tabindex="0" loading="lazy"><figcaption>bubble_sort_6</figcaption></figure><p>按照 <strong>鸡尾酒排序</strong> 的思想，排序过程如下：</p><p><strong>第一轮：</strong></p><p>和冒泡排序一样，元素8 和元素1 交换。</p><figure><img src="'+r+'" alt="cock_tail_sort" tabindex="0" loading="lazy"><figcaption>cock_tail_sort</figcaption></figure><p><strong>第二轮：</strong></p><p>反过来从右往左比较并进行交换。</p><figure><img src="'+d+`" alt="cock_tail_sort_1" tabindex="0" loading="lazy"><figcaption>cock_tail_sort_1</figcaption></figure><p><strong>第三轮：</strong></p><p>虽然实际上已经有序，但是流程并没有结束。</p><p>在鸡尾酒排序的第三轮，需要重新从左向右比较并进行交换。</p><p>元素1 和元素2 比较，位置不变；元素2 和元素3 比较，位置不变；元素3 和元素4 比较，位置不变…… 元素6 和元素7 比较，位置不变。</p><p>没有元素位置进行交换，证明已经有序，排序结束。</p><p>这就是鸡尾酒排序的思路。排序过程就像钟摆一样，第一轮从左到右，第二轮从右到左，第三轮再从左到右……</p><details class="hint-container details"><summary>鸡尾酒排序算法代码</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">cock_tail_sort</span><span class="token punctuation">(</span>array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 有序标记，每一轮的初始值是 True</span>
        is_sorted <span class="token operator">=</span> <span class="token boolean">True</span>
        
        <span class="token comment"># 奇数轮，从左向右比较和交换</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
                array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp
                <span class="token comment"># 有元素交换，所以不是有序的，标记变为 False</span>
                is_sorted <span class="token operator">=</span> <span class="token boolean">False</span>
        
        <span class="token keyword">if</span> is_sorted<span class="token punctuation">:</span>
            <span class="token keyword">break</span>
        
        <span class="token comment"># 偶数轮之前，重新标记为 True</span>
        is_sorted <span class="token operator">=</span> <span class="token boolean">True</span>

        <span class="token comment"># 偶数轮，从右向左比较和交换</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
                array<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp
                <span class="token comment"># 有元素交换，所以不是有序的，标记变为 False</span>
                is_sorted <span class="token operator">=</span> <span class="token boolean">False</span>
        
        <span class="token keyword">if</span> is_sorted<span class="token punctuation">:</span>
            <span class="token keyword">break</span>


my_array <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
cock_tail_sort<span class="token punctuation">(</span>my_array<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_array<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>这段代码是鸡尾酒排序的原始实现。代码外层的大循环控制着所有排序回合，大循环内包含 <code>2</code> 个小循环，第 <code>1</code> 个小循环从左向右比较并交换元素，第 <code>2</code> 个小循环从右向左比较并交换元素。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>之前所学的优化方法也可以在鸡尾酒排序中使用</p></div><p><strong>鸡尾酒排序优点</strong>：能够在特定条件下，减少排序的回合数；在大部分元素已经有序的情况下使用 <strong>鸡尾酒排序缺点</strong>：代码量几乎增加了一倍</p><h2 id="快速排序" tabindex="-1"><a class="header-anchor" href="#快速排序" aria-hidden="true">#</a> 快速排序</h2><p>同冒泡排序一样，快速排序也属于交换排序，通过元素之间的比较和交换位置来达到排序的目的。</p><p>不同的是，冒泡排序在每一轮中只把 <code>1</code> 个元素冒泡到数列的一端，而快速排序则在每一轮挑选一个基准元素，并让其他比它大的元素移动到数列一边，比它小的元素移动到数列的另一边，从而把数列拆解成两个部分。这种思路就叫作 <strong>分治法。</strong></p><p>分治法的好处是：每一轮的比较和交换，需要把数组中的全部元素都遍历一遍，时间复杂度是 <strong>O(n)</strong>。假如元素个数是 <code>n</code>，那么平均情况下需要 <strong>log<sub>2</sub>n</strong> 轮，因此快速排序算法总体的平均时间复杂度是 <strong>O(nlog<sub>2</sub>n)。</strong></p><h3 id="基准元素的选择" tabindex="-1"><a class="header-anchor" href="#基准元素的选择" aria-hidden="true">#</a> 基准元素的选择</h3><p><strong>基准元素（pivot）</strong>，在分治过程中，以基准元素为中心，把其他元素移动到它的左右两边。</p><p>最简单的方式是选择数列的第一个元素。这种选择在绝大多数情况下是没有问题的。但是，假如有一个原本逆序的数列，期望排序成顺序数列，这种情况整个数列并没有被分成两半，每一轮都只确定了基准元素的位置。在这种极端情况下，快速排序需要进行 <code>n</code> 轮，时间复杂度退化成了 <strong>O(n<sup>2</sup>)。</strong></p><p>为了避免这种情况发生，可以 <strong>随机选择一个元素</strong> 作为基准元素，并且让基准元素和数列首元素交换位置。</p><p>当然，即使是随机选择基准元素，也会有极小的概率选到数列的最大值或最小值，同样会影响分治的效果。所以，虽然快速排序的平均时间复杂度是 <strong>O(nlog<sub>2</sub>n)</strong>，但最坏情况下的时间复杂度是 <strong>O(n<sup>2</sup>)。</strong></p><h3 id="元素的交换" tabindex="-1"><a class="header-anchor" href="#元素的交换" aria-hidden="true">#</a> 元素的交换</h3><p>选定了基准元素，我们要做的就是把其他元素中小于基准元素的都交换到基准元素的一边，大于基准元素的都交换到基准元素的另一边。</p><p><strong>有两种方法：</strong></p><ul><li><strong>双边循环法</strong></li><li><strong>单边循环法</strong></li></ul><p>例如：对数列 <code>{4, 7, 6, 5, 3, 2, 8, 1}</code> 从小到大进行排序。详细过程如下：</p><p>首先，选定基准元素 <code>pivot</code>，并且设置两个指针 <code>left</code> 和 <code>right</code>，指向数列的最左和最右两个元素。</p><figure><img src="`+k+'" alt="pivot" tabindex="0" loading="lazy"><figcaption>pivot</figcaption></figure><p><strong>第一次循环</strong></p><p>从 <code>right</code> 指针开始，让指针所指向的元素和基准元素做比较。如果 <strong>大于或等于</strong> <code>pivot</code>，则指针向左移动；如果 <strong>小于</strong> <code>pivot</code>，则 <code>right</code> 指针停止移动，切换到 <code>left</code> 指针。</p><p>在当前数列中，<code>1 &lt; 4</code>，所以 <code>right</code> 直接停止移动，换到 <code>left</code> 指针，进行下一步行动。</p><p>轮到 <code>left</code> 指针行动，让指针所指向的元素和基准元素做比较。如果 <strong>小于或等于</strong> <code>pivot</code>，则指针向右移动；如果 <strong>大于</strong> <code>pivot</code>，则 <code>left</code> 指针停止移动。</p><p>由于 <code>left</code> 开始指向的是基准元素，判断肯定相等，所以 <code>left</code> 右移 <code>1</code> 位。</p><figure><img src="'+m+'" alt="pivot_1" tabindex="0" loading="lazy"><figcaption>pivot_1</figcaption></figure><p>由于 <code>7 &gt; 4</code>，<code>left</code> 指针在元素7 的位置停下。这时，让 <code>left</code> 指针和 <code>right</code> 指针所指向的元素进行交换。</p><figure><img src="'+b+'" alt="pivot_2" tabindex="0" loading="lazy"><figcaption>pivot_2</figcaption></figure><p><strong>第二次循环</strong></p><p>重新切换到 <code>right</code> 指针，向左移动。<code>right</code> 指针先移动到 <code>8</code>，<code>8 &gt; 4</code>，继续左移。由于 <code>2 &lt; 4</code>，停止在 <code>2</code> 的位置。</p><p>按照这个思路，后续步骤如下图所示：</p><figure><img src="'+v+`" alt="pivot_3" tabindex="0" loading="lazy"><figcaption>pivot_3</figcaption></figure><details class="hint-container details"><summary>双边循环实现的快速算法排序，代码使用了递归的方式</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>start_index<span class="token punctuation">,</span> end_index<span class="token punctuation">,</span> array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 递归结束条件：start_index 大于或等于 end_index 的时候</span>
    <span class="token keyword">if</span> start_index <span class="token operator">&gt;=</span> end_index<span class="token punctuation">:</span>
        <span class="token keyword">return</span>
    
    <span class="token comment"># 得到基准元素位置</span>
    pivot_index <span class="token operator">=</span> partition_v1<span class="token punctuation">(</span>start_index<span class="token punctuation">,</span> end_index<span class="token punctuation">,</span> array<span class="token punctuation">)</span>
    <span class="token comment"># 根据基准元素，分成两部分递归排序</span>
    quick_sort<span class="token punctuation">(</span>start_index<span class="token punctuation">,</span> pivot_index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span>
    quick_sort<span class="token punctuation">(</span>pivot_index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end_index<span class="token punctuation">,</span> array<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">partition_v1</span><span class="token punctuation">(</span>start_index<span class="token punctuation">,</span> end_index<span class="token punctuation">,</span> array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 取第一个位置的元素作为基准元素（也可以选择随机位置）</span>
    pivot <span class="token operator">=</span> array<span class="token punctuation">[</span>start_index<span class="token punctuation">]</span>
    left <span class="token operator">=</span> start_index
    right <span class="token operator">=</span> end_index

    <span class="token keyword">while</span> left <span class="token operator">!=</span> right<span class="token punctuation">:</span>
        <span class="token comment"># 控制 right 指针进行比较并左移</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;</span> pivot<span class="token punctuation">)</span><span class="token punctuation">:</span>
            right <span class="token operator">-=</span> <span class="token number">1</span>
        
        <span class="token comment"># 控制 left 指针进行比较并右移</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span><span class="token punctuation">:</span>
            left <span class="token operator">+=</span> <span class="token number">1</span>
        
        <span class="token comment"># 交换 left 指针和 right 指针指向的元素</span>
        <span class="token keyword">if</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
            p <span class="token operator">=</span> array<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
            array<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span>
            array<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> p
    
    <span class="token comment"># pivot 和指针重合点交换</span>
    array<span class="token punctuation">[</span>start_index<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
    array<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> pivot
    <span class="token keyword">return</span> left


my_array <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
quick_sort<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>my_array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> my_array<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_array<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>在上述代码中，<code>quick_sort</code> 方法通过递归的方式，实现了分而治之的思想。<code>partition_v1</code> 方法则实现了元素的交换，让数列中的元素依据自身大小，分别交换到基准元素的左右两边。在这里使用的交换方式是 <strong>双边循环法。</strong></p><h3 id="单边循环法" tabindex="-1"><a class="header-anchor" href="#单边循环法" aria-hidden="true">#</a> 单边循环法</h3><p>双边循环法从数组的两边交替遍历元素，虽然更加直观，但是代码实现相对烦琐。而单边循环法则简单得多，只从数组的一边对元素进行遍历和交换。</p><p>例如：对数列 <code>{4, 7, 3, 5, 6, 2, 8, 1}</code> 从小到大进行排序。详细过程如下：</p><p>开始和双边循环法相似，首先选定基准元素 <code>pivot</code>。同时，设置一个 <code>mark</code> 指针指向数列起始位置，这个 <code>mark</code> 指针代表 <strong>小于基准元素的区域边界。</strong></p><figure><img src="`+g+'" alt="unilateral_loop" tabindex="0" loading="lazy"><figcaption>unilateral_loop</figcaption></figure><p>接下来，从基准元素的下一个位置开始遍历数组。</p><p>如果遍历到的元素大于基准元素，就继续往后遍历。如果遍历到的元素小于基准元素，则需要做两件事：<strong>第一</strong>，把 <code>mark</code> 指针右移 <code>1</code> 位，因为小于 <code>pivot</code> 的区域边界增大了 <code>1</code>；<strong>第二</strong>，让最新遍历到的元素和 <code>mark</code> 指针所在位置的元素交换位置，因为最新遍历的元素归属于小于 <code>pivot</code> 的区域。</p><p>首先遍历到元素7，<code>7 &gt; 4</code>，所以继续遍历。</p><figure><img src="'+_+'" alt="unilateral_loop_1" tabindex="0" loading="lazy"><figcaption>unilateral_loop_1</figcaption></figure><p>接下来遍历到的元素是3，<code>3 &lt; 4</code>，所以 <code>mark</code> 指针右移 <code>1</code> 位。</p><figure><img src="'+y+'" alt="unilateral_loop_2" tabindex="0" loading="lazy"><figcaption>unilateral_loop_2</figcaption></figure><p>随后，让元素3 和 <code>mark</code> 指针所在位置的元素交换，因为元素3 归属于小于 <code>pivot</code> 的区域。</p><figure><img src="'+f+'" alt="unilateral_loop_3" tabindex="0" loading="lazy"><figcaption>unilateral_loop_3</figcaption></figure><p>按照这个思路，继续遍历，后续步骤如下图所示：</p><figure><img src="'+h+`" alt="unilateral_loop_4" tabindex="0" loading="lazy"><figcaption>unilateral_loop_4</figcaption></figure><details class="hint-container details"><summary>单边循环实现的快速算法排序，代码使用了递归的方式</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>start_index<span class="token punctuation">,</span> end_index<span class="token punctuation">,</span> array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 递归结束条件：start_index 大于或等于 end_index 的时候</span>
    <span class="token keyword">if</span> start_index <span class="token operator">&gt;=</span> end_index<span class="token punctuation">:</span>
        <span class="token keyword">return</span>
    
    <span class="token comment"># 得到基准元素位置</span>
    pivot_index <span class="token operator">=</span> partition_v2<span class="token punctuation">(</span>start_index<span class="token punctuation">,</span> end_index<span class="token punctuation">,</span> array<span class="token punctuation">)</span>
    <span class="token comment"># 根据基准元素，分成两部分递归排序</span>
    quick_sort<span class="token punctuation">(</span>start_index<span class="token punctuation">,</span> pivot_index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span>
    quick_sort<span class="token punctuation">(</span>pivot_index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end_index<span class="token punctuation">,</span> array<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">partition_v2</span><span class="token punctuation">(</span>start_index<span class="token punctuation">,</span> end_index<span class="token punctuation">,</span> array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 取第一个位置的元素作为基准元素（也可以选择随机位置）</span>
    pivot <span class="token operator">=</span> array<span class="token punctuation">[</span>start_index<span class="token punctuation">]</span>
    mark <span class="token operator">=</span> start_index

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start_index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end_index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">:</span>
            mark <span class="token operator">+=</span> <span class="token number">1</span>
            p <span class="token operator">=</span> array<span class="token punctuation">[</span>mark<span class="token punctuation">]</span>
            array<span class="token punctuation">[</span>mark<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p
    
    array<span class="token punctuation">[</span>start_index<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>mark<span class="token punctuation">]</span>
    array<span class="token punctuation">[</span>mark<span class="token punctuation">]</span> <span class="token operator">=</span> pivot
    <span class="token keyword">return</span> mark


my_array <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
quick_sort<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>my_array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> my_array<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_array<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>可以很明显地看出，单边循环法只要一个大循环就搞定了，比双边循环法简单多了。</p><h3 id="非递归实现" tabindex="-1"><a class="header-anchor" href="#非递归实现" aria-hidden="true">#</a> 非递归实现</h3><p>以上所讲的快速排序实现方法，都是以递归为基础的。其实快速排序也可以基于 <strong>非递归</strong> 的方式来实现。</p><p>绝大多数的递归逻辑，都可以用栈的方式来代替。代码中一层一层的方法调用，本身就使用了一个方法调用栈。每次进入一个新方法，就相当于入栈；每次有方法返回，就相当于出栈。所以，可以把原本的递归实现转化成一个栈的实现，在栈中存储每一次方法调用的参数。</p><figure><img src="`+x+`" alt="quick_sort_stack" tabindex="0" loading="lazy"><figcaption>quick_sort_stack</figcaption></figure><details class="hint-container details"><summary>代码实现</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>start_index<span class="token punctuation">,</span> end_index<span class="token punctuation">,</span> array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 用一个集合栈来代替递归的函数栈</span>
    quick_sort_stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment"># 整个数列的起止下标，以哈希的形式入栈</span>
    root_param <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;startIndex&quot;</span><span class="token punctuation">:</span> start_index<span class="token punctuation">,</span> <span class="token string">&quot;endIndex&quot;</span><span class="token punctuation">:</span> end_index<span class="token punctuation">}</span>
    quick_sort_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root_param<span class="token punctuation">)</span>
    
    <span class="token comment"># 循环结束条件：栈为空时结束</span>
    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>quick_sort_stack<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token comment"># 栈顶元素出栈，得到起止小标</span>
        param <span class="token operator">=</span> quick_sort_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># 得到基准元素位置</span>
        pivot_index <span class="token operator">=</span> partition<span class="token punctuation">(</span>param<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;startIndex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;endIndex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span>
        <span class="token comment"># 根据基准元素分成两部分，把每一部分的起止下标入栈</span>
        <span class="token keyword">if</span> param<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;startIndex&quot;</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> pivot_index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
            left_param <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;startIndex&quot;</span><span class="token punctuation">:</span> param<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;startIndex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;endIndex&quot;</span><span class="token punctuation">:</span> pivot_index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">}</span>
            quick_sort_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left_param<span class="token punctuation">)</span>
        
        <span class="token keyword">if</span> pivot_index <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> param<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;endIndex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            right_param <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;startIndex&quot;</span><span class="token punctuation">:</span> pivot_index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;endIndex&quot;</span><span class="token punctuation">:</span> param<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;endIndex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
            quick_sort_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right_param<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>start_index<span class="token punctuation">,</span> end_index<span class="token punctuation">,</span> array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 取第一个位置的元素作为基准元素（也可以选择随机位置）</span>
    pivot <span class="token operator">=</span> array<span class="token punctuation">[</span>start_index<span class="token punctuation">]</span>
    mark <span class="token operator">=</span> start_index

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start_index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end_index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">:</span>
            mark <span class="token operator">+=</span> <span class="token number">1</span>
            p <span class="token operator">=</span> array<span class="token punctuation">[</span>mark<span class="token punctuation">]</span>
            array<span class="token punctuation">[</span>mark<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p
    
    array<span class="token punctuation">[</span>start_index<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>mark<span class="token punctuation">]</span>
    array<span class="token punctuation">[</span>mark<span class="token punctuation">]</span> <span class="token operator">=</span> pivot
    <span class="token keyword">return</span> mark


my_array <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
quick_sort<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>my_array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> my_array<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_array<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>和刚才的递归实现相比，非递归方式代码的变动只发生在 <code>quick_sort</code> 方法中。该方法引入了一个栈，栈中的字典元素用于存储每一次交换时的起始下标和结束下标。</p><p>每一次循环，都会让栈顶元素出栈，通过 <code>partition</code> 方法进行分治，并且按照基准元素的位置分成左右两部分，左右两部分再分别入栈。当栈为空时，说明排序已经完毕，退出循环。</p><h2 id="堆排序" tabindex="-1"><a class="header-anchor" href="#堆排序" aria-hidden="true">#</a> 堆排序</h2><p>二叉堆的构建、删除、自我调整等基本操作，正是实现堆排序的基础。</p><p>二叉堆的特性：</p><ul><li><strong>最大堆的堆顶是整个堆中的最大元素</strong></li><li><strong>最小堆的堆顶是整个堆中的最小元素</strong></li></ul><p>以最大堆为例，如果删除一个最大堆的堆顶（并不是完全删除，而是跟末尾的节点交换位置），经过自我调整，第 <code>2</code> 大的元素就会被交换上来，成为最大堆的新堆顶。</p><figure><img src="`+w+'" alt="heap_sort" tabindex="0" loading="lazy"><figcaption>heap_sort</figcaption></figure><p>在删除值为 <code>10</code> 的堆顶节点后，经过调整，值为9 的新节点就会顶替上来；在删除值为9 的堆顶节点后，经过调整，值为8 的新节点就会顶替上来……</p><p>由于二叉堆的这个特性，每一次删除旧堆顶，调整后的新堆顶都是大小仅次于旧堆顶的节点。那么只要反复删除堆顶，反复调整二叉堆，所得到的集合就会成为一个有序集合，过程如下：</p><figure><img src="'+O+'" alt="heap_sort_1" tabindex="0" loading="lazy"><figcaption>heap_sort_1</figcaption></figure><p>到此为止，原本的最大二叉堆已经变成了一个从小到大的有序集合。二叉堆实际存储在数组中，数组中的元素排列如下：</p><figure><img src="'+q+`" alt="heap_sort_2" tabindex="0" loading="lazy"><figcaption>heap_sort_2</figcaption></figure><p>由此，可以归纳出 <strong>堆排序算法的步骤：</strong></p><ol><li>把无序数组构建成二叉堆。需要从小到大排序，则构建成最大堆；需要从大到小排序，则构建成最小堆。</li><li>循环删除堆顶元素，替换到二叉堆的末尾，调整堆产生新的堆顶。</li></ol><details class="hint-container details"><summary>堆排序代码实现</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 1. 把无序数组构建成最大堆</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        down_adjust<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span>
    
    <span class="token comment"># 2. 循环交换集合尾部元素到堆顶，并调节堆产生新的堆顶</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 最后一个元素和第一元素进行交换</span>
        temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp
        <span class="token comment"># 下沉调整最大堆</span>
        down_adjust<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> array<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">down_adjust</span><span class="token punctuation">(</span>parent_index<span class="token punctuation">,</span> length<span class="token punctuation">,</span> array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># temp 保存父节点值，用于最后的赋值</span>
    temp <span class="token operator">=</span> array<span class="token punctuation">[</span>parent_index<span class="token punctuation">]</span>
    child_index <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> parent_index <span class="token operator">+</span> <span class="token number">1</span>

    <span class="token keyword">while</span> child_index <span class="token operator">&lt;</span> length<span class="token punctuation">:</span>
        <span class="token comment"># 如果有右孩子，且右孩子的值大于左孩子的值，则定位到右孩子</span>
        <span class="token keyword">if</span> child_index <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> length <span class="token keyword">and</span> array<span class="token punctuation">[</span>child_index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> array<span class="token punctuation">[</span>child_index<span class="token punctuation">]</span><span class="token punctuation">:</span>
            child_index <span class="token operator">+=</span> <span class="token number">1</span>
        
        <span class="token comment"># 如果父节点的值大于等于任何一个孩子的值，直接跳出</span>
        <span class="token keyword">if</span> temp <span class="token operator">&gt;=</span> array<span class="token punctuation">[</span>child_index<span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>
            
        <span class="token comment"># 无须真正交换，单向赋值即可</span>
        array<span class="token punctuation">[</span>parent_index<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>child_index<span class="token punctuation">]</span>
        parent_index <span class="token operator">=</span> child_index
        child_index <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> child_index <span class="token operator">+</span> <span class="token number">1</span>
    
    array<span class="token punctuation">[</span>parent_index<span class="token punctuation">]</span> <span class="token operator">=</span> temp


my_array <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
heap_sort<span class="token punctuation">(</span>my_array<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_array<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>堆排序的空间复杂度是 <strong>O(1)</strong>，因为并没有开辟额外的集合空间。</p><p>堆排序的时间复杂度是 <strong>O(nlog<sub>2</sub>n)</strong>，分析如下：</p><p>二叉堆的节点 “下沉” 调整（<code>down_adjust</code> 方法）是堆排序算法的基础，这个调节操作本身的时间复杂度是 <strong>O(log<sub>2</sub>n)。</strong></p><p>根据堆排序算法的步骤，第 <code>1</code> 步，把无序数组构建成二叉堆，这一步的时间复杂度是 <strong>O(n)</strong>；第 <code>2</code> 步，需要进行 <code>n - 1</code> 次循环。每次循环调用一次 <code>down_adjust</code> 方法，所以第 2 步的计算规模是 <strong>(n - 1) × log<sub>1</sub>n</strong>，时间复杂度为 <strong>O(nlog<sub>2</sub>n)</strong>。两个步骤是并列关系，所以整体的时间复杂度是 <strong>O(nlog<sub>2</sub>n)。</strong></p></div><h2 id="快速排序和堆排序对比" tabindex="-1"><a class="header-anchor" href="#快速排序和堆排序对比" aria-hidden="true">#</a> 快速排序和堆排序对比</h2><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">快速排序</th><th style="text-align:center;">堆排序</th></tr></thead><tbody><tr><td style="text-align:center;">平均时间复杂度</td><td style="text-align:center;"><strong>O(nlog<sub>2</sub>n)</strong>，且是不稳定排序</td><td style="text-align:center;"><strong>O(nlog<sub>2</sub>n)</strong>，且是不稳定排序</td></tr><tr><td style="text-align:center;">最坏时间复杂度</td><td style="text-align:center;"><strong>O(n<sup>2</sup>)</strong></td><td style="text-align:center;"><strong>O(nlog<sub>2</sub>n)</strong></td></tr><tr><td style="text-align:center;">平均空间复杂度</td><td style="text-align:center;"><strong>O(log<sub>2</sub>n)</strong></td><td style="text-align:center;"><strong>O(1)</strong></td></tr></tbody></table><h2 id="计数排序和桶排序" tabindex="-1"><a class="header-anchor" href="#计数排序和桶排序" aria-hidden="true">#</a> 计数排序和桶排序</h2><h3 id="线性时间的排序" tabindex="-1"><a class="header-anchor" href="#线性时间的排序" aria-hidden="true">#</a> 线性时间的排序</h3><p>无论是冒泡排序，还是快速排序，都是基于 <strong>元素之间</strong> 的比较来进行排序的。有一些特殊的排序并不基于元素比较，如：<strong>计数排序</strong>、<strong>桶排序</strong>、<strong>基数排序</strong>。以计数排序来说，这种排序算法是利用 <strong>数组下标</strong> 来确定元素的正确位置的。</p><h3 id="计数排序" tabindex="-1"><a class="header-anchor" href="#计数排序" aria-hidden="true">#</a> 计数排序</h3><p>假设数组中有 <code>20</code> 个随机整数，取值范围为 <code>0~10</code>，要求用最快的速度把这 <code>20</code> 个整数从小到大进行排序。</p><figure><img src="`+j+'" alt="count_sort" tabindex="0" loading="lazy"><figcaption>count_sort</figcaption></figure><p>由于取值范围有限，所以，可以根据这有限的范围，建立一个长度为 <code>11</code> 的数组。数组下标从 <code>0~10</code>，元素初始值全为 <code>0</code>：</p><p>假设 <code>20</code> 个随机整数的值是：<code>9, 3, 5, 4, 9, 1, 2, 7, 8, 1, 3, 6, 5, 3, 4, 0, 10, 9, 7, 9</code></p><p>下面就开始遍历这个无序的随机数列，每一个整数按照其值对号入座，同时，对应数组下标的元素进行加 <code>1</code> 操作。</p><p>第一个整数是 <code>9</code>，那么数组下标为 <code>9</code> 的元素加 <code>1</code>：</p><figure><img src="'+z+'" alt="count_sort_1" tabindex="0" loading="lazy"><figcaption>count_sort_1</figcaption></figure><p>第二个整数是 <code>3</code>，那么数组下标为 <code>3</code> 的元素加 <code>1</code>：</p><figure><img src="'+I+'" alt="count_sort_2" tabindex="0" loading="lazy"><figcaption>count_sort_2</figcaption></figure><p>继续遍历数列并修改数组……最终，当数列遍历完毕时，数组的状态如下：</p><figure><img src="'+T+`" alt="count_sort_3" tabindex="0" loading="lazy"><figcaption>count_sort_3</figcaption></figure><p>该数组中每一个下标位置的值代表数列中对应整数出现的次数。有了这个统计结果，排序就很简单了。直接遍历数组，输出数组元素的下标值，元素的值是几，就输出几次：</p><p><code>0, 1, 1, 2, 3, 3, 3, 4, 4, 5, 5, 6, 7, 7, 8, 9, 9, 9, 9, 10</code></p><p>显然，现在输出的数列已经是有序的了。</p><p>这就是计数排序的基本过程，它适用于一定范围内的整数排序。在取值范围不是很大的情况下，它的性能甚至快过那些时间复杂度为 <strong>O(nlog<sub>2</sub>n)</strong> 的排序。</p><details class="hint-container details"><summary>计数排序代码实现</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">count_sort</span><span class="token punctuation">(</span>array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 1. 得到数列的最大值</span>
    max_value <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max_value<span class="token punctuation">:</span>
            max_value <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>

    <span class="token comment"># 2. 根据数列最大值确定统计数组的长度</span>
    count_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max_value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token comment"># 3. 遍历数列，填充统计数组</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        count_array<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
    
    <span class="token comment"># 4. 遍历统计数组，输出结果</span>
    sorted_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>count_array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> count_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            sorted_array<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> sorted_array


my_array <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>count_sort<span class="token punctuation">(</span>my_array<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>这段代码在开头有一个步骤，就是求数列的最大整数值 <code>max_value</code>。后面创建的统计数组 <code>count_array</code>，长度是 <code>max_value + 1</code>，以此来保证数组的最后一个下标是 <code>max_value</code>。</p><h3 id="计数排序的优化" tabindex="-1"><a class="header-anchor" href="#计数排序的优化" aria-hidden="true">#</a> 计数排序的优化</h3><p>上面代码以数列的最大值来决定统计数组的长度，其实并不严谨。例如数列：<code>95, 94, 91, 98, 99, 90, 99, 93, 91, 92</code>。这个数列的最大值是 <code>99</code>，但最小的整数是 <code>90</code>。如果创建长度为 <code>100</code> 的数组，那么前面从 <code>0~89</code> 的空间位置就都浪费了！</p><p>解决这个问题只要不再以输入数列的 <strong>最大值 + 1</strong> 作为统计数组的长度，而是以数列 <strong>最大值 - 最小值 + 1</strong> 作为统计数组的长度即可。同时，数列的最小值作为一个偏移量，用于计算整数在统计数组中的下标。</p><p>以刚才的数列为例，统计出数组的长度为 <code>99 - 90 + 1 = 10</code>，偏移量等于数列的最小值 <code>90</code>。</p><p>对于第一个整数 <code>95</code>，对应的统计数组下标是 <code>95 - 90 = 5</code>，如下图所示：</p><figure><img src="`+F+'" alt="count_sort_4" tabindex="0" loading="lazy"><figcaption>count_sort_4</figcaption></figure><p>这确实对计数排序进行了优化。此外，朴素版的计数排序只是简单地按照统计数组的下标输出元素值，并没有真正给原始数列进行排序。</p><p>如果只是单纯地给整数排序，这样做并没有问题。但如果在现实业务里，例如：给学生的考试分数进行排序，遇到相同的分数就会分不清谁是谁。</p><table><thead><tr><th style="text-align:center;">姓名</th><th style="text-align:center;">成绩</th></tr></thead><tbody><tr><td style="text-align:center;">张三</td><td style="text-align:center;">90</td></tr><tr><td style="text-align:center;">李四</td><td style="text-align:center;">99</td></tr><tr><td style="text-align:center;">王五</td><td style="text-align:center;">95</td></tr><tr><td style="text-align:center;">赵六</td><td style="text-align:center;">94</td></tr><tr><td style="text-align:center;">孙七</td><td style="text-align:center;">95</td></tr></tbody></table><p>给出一个学生成绩表，要求按成绩从低到高进行排序，如果成绩相同，则遵循原表固有顺序。当填充统计数组以后，只知道有两个成绩并列为 <code>95</code> 分的同学，却不知道哪一个是王五，哪一个是孙七。</p><figure><img src="'+B+'" alt="count_sort_5" tabindex="0" loading="lazy"><figcaption>count_sort_5</figcaption></figure><p>在这种情况下，需要稍微改变之前的逻辑，在填充完统计数组以后，对统计数组做一下变形。仍然以刚才的学生成绩表为例，将之前的统计数组变形成下面的样子：</p><figure><img src="'+E+'" alt="count_sort_6" tabindex="0" loading="lazy"><figcaption>count_sort_6</figcaption></figure><p>数组变形就是从统计数组的第二个元素开始，每一个元素都加上前面所有元素之和。这样相加的目的，是让统计数组存储的元素值，等于相应整数的最终排序位置的序号。例如：下标是 <code>9</code> 的元素值为 <code>5</code>，代表原始数列的整数 <code>9</code>，最终的排序在第 <code>5</code> 位。</p><p>接下来，创建输出数组 <code>sorted_array</code>，长度和输入数列一致。然后从后向前遍历输入数列。</p><p>第一步，遍历成绩表最后一行的孙七同学的成绩。</p><p>孙七的成绩是 <code>95</code> 分，找到 <code>count_array</code> 下标是 <code>5</code> 的元素，值是 <code>4</code>，代表孙七的成绩排名位置在第 <code>4</code> 位。</p><p>同时，给 <code>count_array</code> 下标是 <code>5</code> 的元素值减 <code>1</code>，从 <code>4</code> 变成 <code>3</code>，代表下次再遇到 <code>95</code> 分的成绩时，最终排名是第 <code>3</code>。</p><figure><img src="'+N+'" alt="count_sort_7" tabindex="0" loading="lazy"><figcaption>count_sort_7</figcaption></figure><p>第二步，遍历成绩表倒数第二行的赵六同学的成绩。</p><p>赵六的成绩是 <code>94</code> 分，找到 <code>count_array</code> 下标是 <code>4</code> 的元素，值是 <code>2</code>，代表赵六的成绩排名位置在第 <code>2</code> 位。</p><p>同时，给 <code>count_array</code> 下标是 <code>4</code> 的元素值减 <code>1</code>，从 <code>2</code> 变成 <code>1</code>，代表下次再遇到 <code>94</code> 分的成绩时（实际上已经遇不到了），最终排名是第 <code>1</code>。</p><figure><img src="'+S+'" alt="count_sort_8" tabindex="0" loading="lazy"><figcaption>count_sort_8</figcaption></figure><p>第三步，遍历成绩表倒数第三行的王五同学的成绩。</p><p>王五的成绩是 <code>95</code> 分，找到 <code>count_array</code> 下标是 <code>5</code> 的元素，值是 <code>3</code>（最初是 <code>4</code>，减 <code>1</code> 变成了 <code>3</code>），代表王五的成绩排名位置在第 <code>3</code> 位。</p><p>同时，给 <code>count_array</code> 下标是 <code>5</code> 的元素值减 <code>1</code>，从 <code>3</code> 变成 <code>2</code>，代表下次再遇到 <code>95</code> 分的成绩时（实际上已经遇不到了），最终排名是第 <code>2</code>。</p><figure><img src="'+V+`" alt="count_sort_9" tabindex="0" loading="lazy"><figcaption>count_sort_9</figcaption></figure><p>这样一来，同样是 <code>95</code> 分的王五和孙七就能够清楚地排出顺序了，也正因为这样，优化版本的计数排序属于 <strong>稳定排序</strong>。后面的遍历过程以此类推。</p><details class="hint-container details"><summary>计数排序的优化代码实现</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">count_sort_v2</span><span class="token punctuation">(</span>array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 1. 得到数列的最大值和最小值，并算出差值 d</span>
    max_value <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    min_value <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max_value<span class="token punctuation">:</span>
            max_value <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        
        <span class="token keyword">if</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min_value<span class="token punctuation">:</span>
            min_value <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    
    d <span class="token operator">=</span> max_value <span class="token operator">-</span> min_value

    <span class="token comment"># 2. 创建统计数组并统计对应元素个数</span>
    count_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        count_array<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min_value<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
    
    <span class="token comment"># 3. 统计数组做变形，后面的元素等于前面的元素之和</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        count_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> count_array<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
    
    <span class="token comment"># 4. 倒序遍历原始数列，从统计数组找到正确位置，输出到结果数组</span>
    sorted_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>
    
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        sorted_array<span class="token punctuation">[</span>count_array<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min_value<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        count_array<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min_value<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
    
    <span class="token keyword">return</span> sorted_array


my_array <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>count_sort_v2<span class="token punctuation">(</span>my_array<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>如果原始数列的规模是 <code>n</code>，最大整数和最小整数的差值是 <code>m</code> 那么：</p><p>代码第1、2、4步都涉及遍历原始数列，运算量都是 <code>n</code>，第 3 步遍历统计数列，运算量是 <code>m</code>，所以总体运算量是 <code>3n + m</code>，去掉系数，时间复杂度是 <strong>O(n + m)</strong></p><p>如果不考虑结果数组，只考虑统计数组大小的话，空间复杂度是 <strong>O(m)</strong></p></div><p>计数排序有它的 <strong>局限性</strong>，主要表现为如下两点：</p><ol><li><p>当数列最大和最小值差距过大时，并不适合用计数排序。</p><p>例如：给出 <code>20</code> 个随机整数，范围在 <code>0~1亿</code> 之间，这时如果使用计数排序，需要创建长度为 <code>1亿</code> 的数组。不但严重浪费空间，而且时间复杂度也会随之升高。</p></li><li><p>当数列元素不是整数时，也不适合用计数排序。</p><p>如果数列中的元素都是小数，如：<code>25.213</code> 或 <code>0.00000001</code> 这样的数字，则无法创建对应的统计数组。这样显然无法进行计数排序。</p></li></ol><h3 id="桶排序" tabindex="-1"><a class="header-anchor" href="#桶排序" aria-hidden="true">#</a> 桶排序</h3><p>桶排序同样是一种线性时间的排序算法，它类似于计数排序所创建的统计数组，桶排序需要创建若干个桶来协助排序。每一个桶（bucket）代表一个 <strong>区间范围</strong>，里面可以承载一个或多个元素。</p><p>假设有一个非整数数列，如：<code>4.5, 0.84, 3.25, 2.18, 0.5</code></p><p><strong>桶排序的工作原理如下：</strong></p><p>第一步，创建这些桶，并确定每一个桶的区间范围。</p><figure><img src="`+A+'" alt="bucket_sort" tabindex="0" loading="lazy"><figcaption>bucket_sort</figcaption></figure><p>具体需要建立多少个桶，如何确定桶的区间范围，有很多种不同的方式。这里创建的桶数量等于原始数列的元素数量，除最后一个桶只包含数列最大值外，前面各个桶的区间按照比例来确定。</p><p><strong>桶的区间比例</strong>：区间跨度 = (最大值 - 最小值) / (桶的数量 - 1)</p><p>第二步，遍历原始数列，把元素对号入座放入各个桶中。</p><figure><img src="'+C+'" alt="bucket_sort_1" tabindex="0" loading="lazy"><figcaption>bucket_sort_1</figcaption></figure><p>第三步，对每个桶内部的元素分别进行排序（显然，只有第一个桶需要排序）。</p><figure><img src="'+D+`" alt="bucket_sort_2" tabindex="0" loading="lazy"><figcaption>bucket_sort_2</figcaption></figure><p>第四步，遍历所有的桶，输出所有元素。</p><p><code>0.5, 0.84, 2.18, 3.25, 4.5</code></p><p>到此为止，排序结束。</p><details class="hint-container details"><summary>桶排序的代码</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">bucket_sort</span><span class="token punctuation">(</span>array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 1. 得到数列的最大值和最小值，并算出差值 d</span>
    max_value <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    min_value <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max_value<span class="token punctuation">:</span>
            max_value <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        
        <span class="token keyword">if</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min_value<span class="token punctuation">:</span>
            min_value <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    
    d <span class="token operator">=</span> max_value <span class="token operator">-</span> min_value

    <span class="token comment"># 2. 初始化桶</span>
    bucket_num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>
    bucket_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> bucket_num<span class="token punctuation">)</span><span class="token punctuation">:</span>
        bucket_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 3. 遍历原始数组，将每个元素放入桶中</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min_value<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>bucket_num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> d<span class="token punctuation">)</span>
        bucket <span class="token operator">=</span> bucket_list<span class="token punctuation">[</span>num<span class="token punctuation">]</span>
        bucket<span class="token punctuation">.</span>append<span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 4. 对每个桶内部进行排序</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>bucket_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># list 采用了归并排序或归并的优化版本</span>
        bucket_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 5. 输出全部元素</span>
    sorted_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> sub_list <span class="token keyword">in</span> bucket_list<span class="token punctuation">:</span>
        <span class="token keyword">for</span> element <span class="token keyword">in</span> sub_list<span class="token punctuation">:</span>
            sorted_array<span class="token punctuation">.</span>append<span class="token punctuation">(</span>element<span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> sorted_array


my_array <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4.12</span><span class="token punctuation">,</span> <span class="token number">6.421</span><span class="token punctuation">,</span> <span class="token number">0.0023</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">2.123</span><span class="token punctuation">,</span> <span class="token number">8.122</span><span class="token punctuation">,</span> <span class="token number">4.12</span><span class="token punctuation">,</span> <span class="token number">10.09</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>bucket_sort<span class="token punctuation">(</span>my_array<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>在上述代码中，所有的桶都保存在 <code>bucket_list</code> 集合中，每个桶都是一个列表。</p><p>同时，上述代码使用了 <code>sort</code> 方法对桶内元素进行排序。<code>sort</code> 方法底层采用的是 <code>Timsort</code> 排序算法，可以简单地理解为是一种时间复杂度为 <strong>O(nlog<sub>2</sub>n)</strong> 的排序。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>假设原始数列有 <code>n</code> 个元素，分成 <code>n</code> 个桶。桶排序的时间复杂度如下：</p><ul><li><strong>第一步</strong>：求数列最大值、最小值，运算量为 <code>n</code></li><li><strong>第二步</strong>：创建空桶，运算量为 <code>n</code></li><li><strong>第三步</strong>：把原始数列的元素分配到各个桶中，运算量为 <code>n</code></li><li><strong>第四步</strong>：在每个桶内部做排序，在元素分布相对均匀的情况下，所有桶的运算量之和为 <code>n</code></li><li><strong>第五步</strong>：输出排序数列，运算量为 <code>n</code></li></ul><p>因此，桶排序的总体时间复杂度为 <strong>O(n)</strong></p><p>至于空间复杂度就很容易得到了，同样是 <strong>O(n)</strong></p><p>桶排序的性能 <strong>并非绝对稳定</strong>。如果元素的分布极不均衡，在极端情况下，第一个桶中有 <code>n - 1</code> 个元素，最后一个桶中有 <code>1</code> 个元素。此时的时间复杂度将退化为 <strong>O(nlog<sub>2</sub>n)</strong>，而且还白白创建了许多空桶。</p></div><h2 id="排序算法对比" tabindex="-1"><a class="header-anchor" href="#排序算法对比" aria-hidden="true">#</a> 排序算法对比</h2><table><thead><tr><th style="text-align:center;">排序算法</th><th style="text-align:center;">平均时间复杂度</th><th style="text-align:center;">最坏时间复杂度</th><th style="text-align:center;">空间复杂度</th><th style="text-align:center;">是否稳定排序</th></tr></thead><tbody><tr><td style="text-align:center;">冒泡排序</td><td style="text-align:center;"><strong>O(n<sup>2</sup>)</strong></td><td style="text-align:center;"><strong>O(n<sup>2</sup>)</strong></td><td style="text-align:center;"><strong>O(1)</strong></td><td style="text-align:center;"><strong>稳定</strong></td></tr><tr><td style="text-align:center;">鸡尾酒排序</td><td style="text-align:center;"><strong>O(n<sup>2</sup>)</strong></td><td style="text-align:center;"><strong>O(n<sup>2</sup>)</strong></td><td style="text-align:center;"><strong>O(1)</strong></td><td style="text-align:center;"><strong>稳定</strong></td></tr><tr><td style="text-align:center;">快速排序</td><td style="text-align:center;"><strong>O(nlog<sub>2</sub>n)</strong></td><td style="text-align:center;"><strong>O(n<sup>2</sup>)</strong></td><td style="text-align:center;"><strong>O(log<sub>2</sub>n)</strong></td><td style="text-align:center;"><strong>不稳定</strong></td></tr><tr><td style="text-align:center;">堆排序</td><td style="text-align:center;"><strong>O(nlog<sub>2</sub>n)</strong></td><td style="text-align:center;"><strong>O(nlog<sub>2</sub>n)</strong></td><td style="text-align:center;"><strong>O(1)</strong></td><td style="text-align:center;"><strong>不稳定</strong></td></tr><tr><td style="text-align:center;">计数排序</td><td style="text-align:center;"><strong>O(n + m)</strong></td><td style="text-align:center;"><strong>O(n + m)</strong></td><td style="text-align:center;"><strong>O(m)</strong></td><td style="text-align:center;"><strong>稳定</strong></td></tr><tr><td style="text-align:center;">桶排序</td><td style="text-align:center;"><strong>O(n)</strong></td><td style="text-align:center;"><strong>O(nlog<sub>2</sub>n)</strong></td><td style="text-align:center;"><strong>O(n)</strong></td><td style="text-align:center;"><strong>稳定</strong></td></tr></tbody></table>`,210),J=[H];function K(L,M){return s(),a("div",null,J)}const R=n(G,[["render",K],["__file","sorting.html.vue"]]);export{R as default};
