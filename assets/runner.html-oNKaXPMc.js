import{_ as r}from"./share_runner-2aL-vIxq.js";import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as c,c as p,b as n,e as a,d as e,w as u,f as s}from"./app-v7B34r-e.js";const d="/assets/build_pipeline-EuTrUWgD.jpg",b="/assets/pipeline_status-m3PsnVij.jpg",v={},k=s('<p>极狐GitLab Runner 是在流水线中运行作业的应用，与 极狐GitLab CI/CD 配合运作。</p><h2 id="范围" tabindex="-1"><a class="header-anchor" href="#范围" aria-hidden="true">#</a> 范围</h2><p>极狐GitLab Runner 包含三种范围：</p><ul><li><strong>共享 runners</strong>：可用于 极狐GitLab 实例中的所有群组和项目</li><li><strong>群组 runners</strong>：可用于群组中的所有项目和子组</li><li><strong>项目 runners</strong>：与特定项目相关联。通常，项目 runner 只用于一个项目</li></ul><h3 id="共享-runner" tabindex="-1"><a class="header-anchor" href="#共享-runner" aria-hidden="true">#</a> 共享 runner</h3><p>共享 runners 可用于 极狐GitLab 实例中的每一个项目。</p><p>当您有多个具有相似要求的作业时，请使用共享 runner。与其让多个 runner 闲置在许多项目中，不如让几个 runner 处理多个项目。</p><p>使用 极狐GitLab 的私有化部署实例：</p><ul><li>依次点击 <em>管理中心 -&gt; CI/CD -&gt; Runner -&gt; 新建实例 runner</em></li><li>右边三个点，可以查看 <strong>注册令牌</strong></li></ul><h3 id="群组-runner" tabindex="-1"><a class="header-anchor" href="#群组-runner" aria-hidden="true">#</a> 群组 runner</h3><p>当您希望群组中的所有项目都可以访问一组 runner 时，请使用群组 runner。群组 runner 使用先进先出（FIFO）队列来处理作业。</p><p>使用 极狐GitLab 的私有化部署实例：</p><ul><li>依次点击 <em>群组 -&gt; 选择群组 -&gt; 构建 -&gt; Runner -&gt; 新建群组 runner</em></li><li>右边三个点，可以查看 <strong>注册令牌</strong></li></ul><h3 id="项目-runner" tabindex="-1"><a class="header-anchor" href="#项目-runner" aria-hidden="true">#</a> 项目 runner</h3><p>当您想将 runner 用于特定项目时，请使用项目 runner。例如，当您有：</p><ul><li>具有特定要求的作业，例如需要凭据的部署作业</li><li>具有大量 CI 活动的项目可以从与其它 runner 分开中受益</li></ul><p>您可以设置一个项目 Runner 供多个项目使用，必须为每个项目明确启用项目 Runner。项目 Runner 使用先进先出（FIFO）队列来处理作业。</p><p>使用 极狐GitLab 的私有化部署实例：</p><ul><li>依次点击 <em>项目 -&gt; 选择项目 -&gt; 设置 -&gt; CI/CD -&gt; Runner -&gt; 新建项目 runner</em></li><li>右边三个点，可以查看 <strong>注册令牌</strong></li></ul><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>极狐GitLab Runner 是开源的，用 Go 编写。它可以作为单个二进制文件运行，且没有特定于语言的要求。</p><p>极狐GitLab Runner 还可以在 Docker 容器内运行或部署到 Kubernetes 集群。</p>',22),g={href:"https://docs.gitlab.cn/runner/install/",target:"_blank",rel:"noopener noreferrer"},m=s(`<ul><li>在容器中</li><li>通过手动下载二进制文件</li><li>使用 rpm/deb 软件包仓库</li></ul><p>极狐GitLab Runner 官方支持的二进制文件在以下架构中可用：</p><ul><li>x86、AMD64、ARM64、ARM、s390x 和 ppc64le</li></ul><p>官方软件包在以下 Linux 发行版中可用：</p><ul><li>CentOS、Debian、Ubuntu、RHEL、Fedora、Mint、Oracle 和 Amazon</li></ul><p>极狐GitLab Runner 官方支持以下操作系统。如果您喜欢使用非官方支持的操作系统，则其必须能够编译 Go 二进制文件。</p><ul><li>Linux、Windows、macOS 和 FreeBSD</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>出于安全和性能原因，您不应该在托管 极狐GitLab 实例的机器上安装 极狐GitLab Runner。</p></div><h3 id="linux-安装" tabindex="-1"><a class="header-anchor" href="#linux-安装" aria-hidden="true">#</a> Linux 安装</h3><p>由于兼容性原因，极狐GitLab Runner 的 <strong>主版本.小版本</strong> 应和 极狐GitLab 的 <strong>主版本.小版本</strong> 保持同步。老版本的 极狐GitLab Runner 可能适用于新版本的 极狐 GitLab，反之亦然。但是如果存在版本差异，功能特性可能不可用或无法正常工作。</p><p>在小版本更新之间保证向后兼容。但是有时小版本更新会引入要求 极狐GitLab Runner 处于相同版本的新特性功能。</p><p>添加官方 极狐GitLab 仓库：</p><ul><li><p>Debian/Ubuntu 系统</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">&quot;https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh&quot;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>RHEL/CentOS 系统</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">&quot;https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh&quot;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>安装最新版本的 极狐GitLab Runner，或跳到下一步，安装特定版本。</p><ul><li><p>Debian/Ubuntu 系统</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gitlab-runner
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>RHEL/CentOS 系统</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> gitlab-runner
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>安装特定版本的 极狐GitLab Runner：</p><ul><li><p>Debian/Ubuntu 系统</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">apt-cache</span> madison gitlab-runner
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gitlab-runner<span class="token operator">=</span><span class="token number">16.11</span>.1-1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>RHEL/CentOS 系统</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum list gitlab-runner <span class="token parameter variable">--showduplicates</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-r</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> gitlab-runner-16.11.1-1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="docker-安装" tabindex="-1"><a class="header-anchor" href="#docker-安装" aria-hidden="true">#</a> Docker 安装</h3><p>一般来说，Docker Engine 的版本和 极狐GitLab Runner 容器镜像的版本不需要匹配。极狐GitLab Runner 镜像应该向后和向前兼容。然而，为确保您拥有最新的功能和安全更新，您应该使用最新的稳定 Docker 引擎版本。</p><p>一般规则是每个 极狐GitLab Runner 命令通常会被执行为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gitlab-runner <span class="token operator">&lt;</span>runner <span class="token builtin class-name">command</span> and options<span class="token punctuation">..</span>.<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以使用以下命令执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token operator">&lt;</span>chosen <span class="token function">docker</span> options<span class="token punctuation">..</span>.<span class="token operator">&gt;</span> gitlab/gitlab-runner <span class="token operator">&lt;</span>runner <span class="token builtin class-name">command</span> and options<span class="token punctuation">..</span>.<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，可以执行以下命令获取最高级别的 极狐GitLab Runner 的帮助信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">-i</span> gitlab/gitlab-runner <span class="token parameter variable">--help</span>

NAME:
   gitlab-runner - a GitLab Runner

USAGE:
   gitlab-runner <span class="token punctuation">[</span>global options<span class="token punctuation">]</span> <span class="token builtin class-name">command</span> <span class="token punctuation">[</span>command options<span class="token punctuation">]</span> <span class="token punctuation">[</span>arguments<span class="token punctuation">..</span>.<span class="token punctuation">]</span>

VERSION:
   <span class="token number">15.11</span>.0 <span class="token punctuation">(</span>436955cb<span class="token punctuation">)</span>

<span class="token punctuation">(</span><span class="token punctuation">..</span>.<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简而言之，命令的 <code>gitlab-runner</code> 部分由 <code>docker run [docker options] gitlab/gitlab-runner</code> 替代，剩余部分保持与注册文档中描述的内容相一致。唯一区别是 <code>gitlab-runner</code> 命令是在 Docker 容器中执行的。</p>`,26),h=s(`<p>如果想在 Docker 容器内运行 <code>gitlab-runner</code>，您需要确保重启容器时配置没有丢失。为此，以下描述两个选项：</p><ul><li><p>选项一：使用本地系统卷挂载，启动 Runner 容器</p><p>以下示例使用挂载到 <code>gitlab-runner</code> 容器的配置卷的本地系统。这个卷用于配置资源和其他资源。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> gitlab-runner <span class="token parameter variable">--restart</span> always <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /srv/gitlab-runner/config:/etc/gitlab-runner <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token punctuation">\\</span>
  gitlab/gitlab-runner:v16.11.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 macOS 上，使用 <code>/Users/Shared</code> 而不是 <code>/srv</code>。</p></li><li><p>选项二：使用 Docker 卷启动 Runner 容器</p><p>在这个例子中，您可以使用配置容器挂载您的自定义数据卷。</p><ol><li>创建 Docker 卷：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> volume create gitlab-runner-config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>使用刚创建的卷启动 极狐GitLab Runner 容器：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> gitlab-runner <span class="token parameter variable">--restart</span> always <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> gitlab-runner-config:/etc/gitlab-runner <span class="token punctuation">\\</span>
    gitlab/gitlab-runner:v16.11.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="注册-runner" tabindex="-1"><a class="header-anchor" href="#注册-runner" aria-hidden="true">#</a> 注册 Runner</h2><p>极狐GitLab Runner 容器在注册之前不会处理任何作业。</p><p>引入于 极狐GitLab Runner 15.0，对注册请求格式做了更改，防止 极狐GitLab Runner 与低于 14.8 版本的 极狐GitLab 通信。您必须使用适合 极狐GitLab 版本的 Runner 版本，或升级 极狐GitLab 应用程序。</p><p>Runner 注册是将 Runner 与一个或多个 极狐GitLab 实例连接起来的过程。</p><p>您可以通过重复 <code>register</code> 命令，在同一台主机上注册多个 Runner，每个都有不同的配置。</p><h3 id="linux" tabindex="-1"><a class="header-anchor" href="#linux" aria-hidden="true">#</a> Linux</h3><ol><li><p>运行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> gitlab-runner register
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果您使用代理，您需要添加环境变量再运行注册命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">HTTP_PROXY</span><span class="token operator">=</span>http://yourproxyurl:3128
<span class="token builtin class-name">export</span> <span class="token assign-left variable">HTTPS_PROXY</span><span class="token operator">=</span>http://yourproxyurl:3128

<span class="token function">sudo</span> <span class="token parameter variable">-E</span> gitlab-runner register
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>输入您的 极狐GitLab 实例 URL。例如：<code>http://10.1.1.10:8888</code></p></li><li><p>输入注册 Runner 时获取的令牌。例如：使用共享令牌 <code>fpbUZKthyn1y93CFEarG</code></p></li><li><p>输入 Runner 描述，也是 Runner 的名称，您可以在 极狐GitLab UI 中进行变更。例如：<code>test gitlab runner</code></p></li><li><p>输入以逗号隔开的与 Runner 有关的标签，您可以在 极狐GitLab UI 中进行变更。例如：<code>docker, shell</code></p></li><li><p>为 Runner 输入可选的维护记录。例如：<code>runner</code></p></li><li><p>提供 Runner 执行器。例如：<code>shell</code></p></li></ol><h3 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker</h3><p>以下步骤描述了启动暂时的 gitlab-runner 容器以注册您在安装期间创建的容器。注册完成后，生成的配置将写入您选择的配置卷（例如：<code>/srv/gitlab-runner/config</code>）并且由 Runner 使用配置卷进行加载。</p><p>使用 Docker 容器注册 Runner：</p>`,12),f=s(`<li><p>基于挂载类型运行注册命令：</p><ul><li><p>对于本地系统卷挂载：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">-it</span> <span class="token parameter variable">-v</span> /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果您在安装过程中使用了 <code>/srv/gitlab-runner/config</code> 以外的配置卷，请务必使用正确的卷更新命令。</p></div></li><li><p>对于 Docker 卷挂载：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">-it</span> <span class="token parameter variable">-v</span> gitlab-runner-config:/etc/gitlab-runner gitlab/gitlab-runner:v16.11.1 register
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="hint-container details"><summary>基于挂载类型运行注册命令</summary><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">-it</span> <span class="token parameter variable">-v</span> gitlab-runner-config:/etc/gitlab-runner gitlab/gitlab-runner:v16.11.1 register

Runtime platform                                    <span class="token assign-left variable">arch</span><span class="token operator">=</span>amd64 <span class="token assign-left variable">os</span><span class="token operator">=</span>linux <span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token number">6</span> <span class="token assign-left variable">revision</span><span class="token operator">=</span>535ced5f <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token number">16.11</span>.1
Running <span class="token keyword">in</span> system-mode.

Enter the GitLab instance URL <span class="token punctuation">(</span>for example, https://gitlab.com/<span class="token punctuation">)</span>:
http://192.168.52.186:8888
Enter the registration token:
fpbUZKthyn1y93CFEarG
Enter a description <span class="token keyword">for</span> the runner:
<span class="token punctuation">[</span>dd5c1e8f4040<span class="token punctuation">]</span>: <span class="token builtin class-name">test</span> <span class="token function">docker</span> runner
Enter tags <span class="token keyword">for</span> the runner <span class="token punctuation">(</span>comma-separated<span class="token punctuation">)</span>:
docker, shell
Enter optional maintenance note <span class="token keyword">for</span> the runner:
runner
WARNING: Support <span class="token keyword">for</span> registration tokens and runner parameters <span class="token keyword">in</span> the <span class="token string">&#39;register&#39;</span> <span class="token builtin class-name">command</span> has been deprecated <span class="token keyword">in</span> GitLab Runner <span class="token number">15.6</span> and will be replaced with support <span class="token keyword">for</span> authentication tokens. For <span class="token function">more</span> information, see https://docs.gitlab.com/ee/ci/runners/new_creation_workflow
Registering runner<span class="token punctuation">..</span>. succeeded                     <span class="token assign-left variable">runner</span><span class="token operator">=</span>fpbUZKth
Enter an executor: virtualbox, docker-windows, kubernetes, docker-autoscaler, instance, custom, shell, ssh, parallels, docker, docker+machine:
<span class="token function">docker</span>
Enter the default Docker image <span class="token punctuation">(</span>for example, ruby:2.7<span class="token punctuation">)</span>:
docker:latest
Runner registered successfully. Feel <span class="token function">free</span> to start it, but <span class="token keyword">if</span> it&#39;s running already the config should be automatically reloaded<span class="token operator">!</span>

Configuration <span class="token punctuation">(</span>with the authentication token<span class="token punctuation">)</span> was saved <span class="token keyword">in</span> <span class="token string">&quot;/etc/gitlab-runner/config.toml&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details></li></ul></li><li><p>输入您的 极狐GitLab 实例 URL。例如：<code>http://10.1.1.10:8888</code></p></li>`,2),y=n("p",null,[a("输入注册 Runner 时获取的令牌。例如：使用共享令牌 "),n("code",null,"fpbUZKthyn1y93CFEarG")],-1),x={class:"hint-container warning"},R=n("p",{class:"hint-container-title"},"注意",-1),_={href:"https://docs.gitlab.cn/jh/ci/runners/register_runner.html#%E7%94%9F%E6%88%90%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%BB%A4%E7%89%8C",target:"_blank",rel:"noopener noreferrer"},L=s("<li><p>输入 Runner 描述，也是 Runner 的名称，您可以在 极狐GitLab UI 中进行变更。例如：<code>test gitlab runner</code></p></li><li><p>输入以逗号隔开的与 Runner 有关的标签，您可以在 极狐GitLab UI 中进行变更。例如：<code>docker, shell</code></p></li><li><p>为 Runner 输入可选的维护记录。例如：<code>runner</code></p></li><li><p>提供 Runner 执行器。例如：<code>docker</code></p></li><li><p>如果您输入 <code>docker</code> 作为执行器。对于在 <code>.gitlab-ci.yml</code> 中没有定义镜像的项目，系统会要求您使用默认镜像。例如：<code>docker:latest</code></p></li>",5),G=n("figure",null,[n("img",{src:r,alt:"共享 runner",tabindex:"0",loading:"lazy"}),n("figcaption",null,"共享 runner")],-1),E=n("code",null,"config.toml",-1),w=n("code",null,"/etc/gitlab-runner/config.toml",-1),q={href:"https://docs.gitlab.cn/runner/configuration/advanced-configuration.html",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"config.toml",-1),C=n("h2",{id:"gitlab-ci-yml-文件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#gitlab-ci-yml-文件","aria-hidden":"true"},"#"),a(" .gitlab-ci.yml 文件")],-1),U=n("code",null,".gitlab-ci.yml",-1),I={href:"https://docs.gitlab.cn/jh/ci/yaml/index.html",target:"_blank",rel:"noopener noreferrer"},A=s(`<p>在此文件中，您可以定义：</p><ul><li>runner 应执行的作业的结构和顺序</li><li>runner 在遇到特定条件时应做出的决定</li></ul><p>例如：您可能希望在提交到除默认分支之外的任何分支时运行一组测试。当您提交到默认分支时，您希望运行相同的套件，但还要发布您的应用程序。所有这些都在 <code>.gitlab-ci.yml</code> 文件中定义。</p><p>在项目根目录中，创建一个 <code>.gitlab-ci.yml</code> 文件，内容如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">build-job</span><span class="token punctuation">:</span>
  <span class="token key atrule">stage</span><span class="token punctuation">:</span> build
  <span class="token key atrule">tags</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">&quot;shell&quot;</span>
  <span class="token key atrule">script</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> echo &quot;Hello<span class="token punctuation">,</span> $GITLAB_USER_LOGIN<span class="token tag">!</span>&quot;

<span class="token key atrule">test-job1</span><span class="token punctuation">:</span>
  <span class="token key atrule">stage</span><span class="token punctuation">:</span> test
  <span class="token key atrule">tags</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">&quot;shell&quot;</span>
  <span class="token key atrule">script</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> echo &quot;This job tests something&quot;

<span class="token key atrule">test-job2</span><span class="token punctuation">:</span>
  <span class="token key atrule">stage</span><span class="token punctuation">:</span> test
  <span class="token key atrule">tags</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">&quot;shell&quot;</span>
  <span class="token key atrule">script</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> echo &quot;This job tests something<span class="token punctuation">,</span> but takes more time than test<span class="token punctuation">-</span>job1.&quot;
    <span class="token punctuation">-</span> echo &quot;After the echo commands complete<span class="token punctuation">,</span> it runs the sleep command for 20 seconds&quot;
    <span class="token punctuation">-</span> echo &quot;which simulates a test that runs 20 seconds longer than test<span class="token punctuation">-</span>job1&quot;
    <span class="token punctuation">-</span> sleep 20

<span class="token key atrule">deploy-prod</span><span class="token punctuation">:</span>
  <span class="token key atrule">stage</span><span class="token punctuation">:</span> deploy
  <span class="token key atrule">tags</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">&quot;shell&quot;</span>
  <span class="token key atrule">script</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> echo &quot;This job deploys something from the $CI_COMMIT_BRANCH branch.&quot;
  <span class="token key atrule">environment</span><span class="token punctuation">:</span> production
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看构建流水线结果：</p><figure><img src="`+d+'" alt="构建流水线" tabindex="0" loading="lazy"><figcaption>构建流水线</figcaption></figure><h3 id="pipeline-状态" tabindex="-1"><a class="header-anchor" href="#pipeline-状态" aria-hidden="true">#</a> pipeline 状态</h3><ul><li>已创建（create）</li><li>等待中（pending）</li><li>运行中（running）</li><li>已通过（passed）</li><li>失败（failed）</li><li>手动（hand）</li><li>已取消（canceled）</li><li>已跳过（skip）</li></ul><figure><img src="'+b+'" alt="pipeline 状态" tabindex="0" loading="lazy"><figcaption>pipeline 状态</figcaption></figure><h2 id="gitlab-runner-命令" tabindex="-1"><a class="header-anchor" href="#gitlab-runner-命令" aria-hidden="true">#</a> gitlab-runner 命令</h2><p><code>gitlab-runner</code> 常用命令：</p><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>gitlab-runner --help</code></td><td style="text-align:left;">查看命令列表</td></tr><tr><td style="text-align:left;"><code>gitlab-runner register</code></td><td style="text-align:left;">用于注册 Runner</td></tr><tr><td style="text-align:left;"><code>gitlab-runner list</code></td><td style="text-align:left;">列出存储在配置文件中的所有 Runner</td></tr><tr><td style="text-align:left;"><code>gitlab-runner verify</code></td><td style="text-align:left;">检测注册的 Runner 是否可以连接</td></tr><tr><td style="text-align:left;"><code>gitlab-runner verify --delete</code></td><td style="text-align:left;">移除已经从 极狐GitLab 移除的旧 Runner</td></tr><tr><td style="text-align:left;"><code>gitlab-runner unregister --all-runners</code></td><td style="text-align:left;">取消注册所有相关 Runner，但是配置没有更改</td></tr><tr><td style="text-align:left;"><code>gitlab-runner unregister --url http://gitlab.example.com/ --token t0k3n</code></td><td style="text-align:left;">通过 URL 和令牌，取消注册 Runner，会更新配置文件</td></tr><tr><td style="text-align:left;"><code>gitlab-runner unregister --name test-runner</code></td><td style="text-align:left;">通过名称，取消注册 Runner，会更新配置文件</td></tr></tbody></table>',13),S={href:"https://docs.gitlab.cn/runner/commands/",target:"_blank",rel:"noopener noreferrer"};function O(B,F){const t=i("ExternalLinkIcon"),l=i("RouterLink");return c(),p("div",null,[k,n("p",null,[a("极狐GitLab Runner 可以在 GNU/Linux、macOS、FreeBSD 和 Windows 上安装和使用。您可以通过以下方式 "),n("a",g,[a("安装"),e(t)]),a(" 极狐GitLab Runner：")]),m,n("p",null,[a("开始之前，请确保已经 "),e(l,{to:"/devops/docker/tutorials/install.html"},{default:u(()=>[a("安装 Docker")]),_:1}),a("。")]),h,n("ol",null,[f,n("li",null,[y,n("div",x,[R,n("p",null,[a("传递 Runner 注册令牌的功能以及对某些配置参数的支持废弃于 15.6 版本。您应该使用身份验证令牌来注册 runner，注册令牌和对某些配置参数的支持将在 16.6 版本，引入功能标志来禁用，并在 17.0 版本中删除。查看官网 "),n("a",_,[a("如何生成身份验证令牌"),e(t)]),a("。")])])]),L]),G,n("p",null,[a("runner 的所有配置保存在一个名为 "),E,a(" 的文件中，默认位置存放在 "),w,a("。查看 "),n("a",q,[a("官网"),e(t)]),a(" 对 "),D,a(" 文件中各参数的描述。")]),C,n("p",null,[U,a(" 文件是一个 YAML 文件，您可以在其中配置 GitLab CI/CD 的特定指令。查看官网 "),n("a",I,[a(".gitlab-ci.yml"),e(t)]),a(" 语法参考。")]),A,n("p",null,[a("查看官网 "),n("a",S,[a("gitlab-runner"),e(t)]),a(" 命令。")])])}const H=o(v,[["render",O],["__file","runner.html.vue"]]);export{H as default};
