import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-496190d7.js";const e={},p=t(`<p>方法属于类，通过类或对象调用方法。例如：<code>list.append(x)</code></p><h2 id="upper" tabindex="-1"><a class="header-anchor" href="#upper" aria-hidden="true">#</a> upper()</h2><p><code>upper()</code> 方法，用于以大写形式返回字符串。</p><p><strong>语法格式</strong>：<code>str.upper()</code></p><ul><li><strong>str</strong>：表示对 <code>upper</code> 输入的对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：HELLO, WORLD!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lower" tabindex="-1"><a class="header-anchor" href="#lower" aria-hidden="true">#</a> lower()</h2><p><code>lower()</code> 方法，用于以小写形式返回字符串。</p><p><strong>语法格式</strong>：<code>str.lower()</code></p><ul><li><strong>str</strong>：表示对 <code>lower</code> 输入的对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：hello, world!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="strip" tabindex="-1"><a class="header-anchor" href="#strip" aria-hidden="true">#</a> strip()</h2><p><code>strip()</code> 方法，用于从开头或结尾删除任何字符，默认是空格。</p><p><strong>语法格式</strong>：<code>str.strip(&quot;object&quot;)</code></p><ul><li><strong>str</strong>：表示对 <code>strip</code> 输入的对象</li><li><strong>object</strong>：表示要删除的对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr <span class="token operator">=</span> <span class="token string">&quot; Hello, World!  &quot;</span>
mystr01 <span class="token operator">=</span> <span class="token string">&quot;, Hello, World!  &quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：Hello, World!</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mystr01<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果： Hello, World!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lstrip" tabindex="-1"><a class="header-anchor" href="#lstrip" aria-hidden="true">#</a> lstrip()</h2><p><code>lstrip()</code> 方法，用于去掉字符串左侧的空格和特殊字符。</p><p><strong>语法格式</strong>：<code>str.lstrip(&quot;object&quot;)</code></p><ul><li><strong>str</strong>：表示对 <code>strip</code> 输入的对象</li><li><strong>object</strong>：表示要删除的对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr <span class="token operator">=</span> <span class="token string">&quot; Hello, World!  &quot;</span>
mystr01 <span class="token operator">=</span> <span class="token string">&quot;, Hello, World!  &quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：Hello, World!  </span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mystr01<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果： Hello, World!  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rstrip" tabindex="-1"><a class="header-anchor" href="#rstrip" aria-hidden="true">#</a> rstrip()</h2><p><code>rstrip()</code> 方法，用于去掉字符串右侧的空格和特殊字符。</p><p><strong>语法格式</strong>：<code>str.rstrip(&quot;object&quot;)</code></p><ul><li><strong>str</strong>：表示对 <code>strip</code> 输入的对象</li><li><strong>object</strong>：表示要删除的对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr <span class="token operator">=</span> <span class="token string">&quot; Hello, World!  &quot;</span>
mystr01 <span class="token operator">=</span> <span class="token string">&quot;, Hello, World!&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果： Hello, World!</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mystr01<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：, Hello, World</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="replace" tabindex="-1"><a class="header-anchor" href="#replace" aria-hidden="true">#</a> replace()</h2><p><code>replace()</code> 方法，用于替换字符串。默认全部替换。</p><p><strong>语法格式</strong>：<code>str.replace(old, new[, max])</code></p><ul><li><strong>str</strong>：表示对 <code>replace</code> 输入的对象</li><li><strong>old</strong>：表示替换旧的字符对象</li><li><strong>new</strong>：表示替换新的字符对象</li><li><strong>[max]</strong>：最大匹配次数，匹配时从左到右最多次数</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&quot;Hello, World! Hello, Python!&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;H&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;h&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：hello, World! hello, Python!</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;H&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;h&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：hello, World! Hello, Python!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="split" tabindex="-1"><a class="header-anchor" href="#split" aria-hidden="true">#</a> split()</h2><p><code>split()</code> 方法，用于返回一个列表，指定字符串中的分隔符来分割列表。</p><p><strong>语法格式</strong>：<code>str.split(type=&quot;&quot;, num=string.count(str))[n]</code></p><ul><li><strong>str</strong>：表示对 <code>split</code> 输入的对象</li><li><strong>type</strong>：表示进行分割的符号，默认为空格</li><li><strong>num</strong>：表示分割的次数</li><li><strong>[n]</strong>：表示分割后取第几个分片</li></ul><p>例如：以 <code>,</code> 号分割成列表</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&quot;Hello, World!, test&quot;</span>
b <span class="token operator">=</span> <span class="token string">&quot;kkkpythonkiskkkgoodkk&quot;</span>
c <span class="token operator">=</span> <span class="token string">&quot;   kkkpy   thonkisk   kkgoodkk   &quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;Hello&#39;, &#39; World!&#39;, &#39; test&#39;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;Hello&#39;, &#39; World!, test&#39;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：Hello</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;k&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;python&#39;, &#39;is&#39;, &#39;&#39;, &#39;&#39;, &#39;good&#39;, &#39;&#39;, &#39;&#39;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;kkkpy&#39;, &#39;thonkisk&#39;, &#39;kkgoodkk&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果分隔符是空格的话，连续的空格将作为一个分隔符</p></div><h2 id="format" tabindex="-1"><a class="header-anchor" href="#format" aria-hidden="true">#</a> format()</h2><p><code>format()</code> 方法，用于接受传递的参数，格式化它们，并将它们放在占位符 <code>{}</code> 所在的字符串中。</p><p><strong>语法格式</strong>：<code>str.format(value)</code></p><ul><li><strong>str</strong>：表示对 <code>format</code> 输入的对象</li><li><strong>value</strong>：表示要传递的参数</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>您还可以使用索引号 <code>{0}</code> 将参数放到占位符中，不过需要确定索引号和参数位置所对应，否则会导致输出的顺序混乱</p><p>以 <code>key=value</code> 的形式无需注意索引号和参数位置顺序</p></div><p>例如：将数字插入字符串</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>age <span class="token operator">=</span> <span class="token number">20</span>
txt <span class="token operator">=</span> <span class="token string">&quot;张三今年 {}&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>txt<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：张三今年 20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：接受多个参数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span>
age <span class="token operator">=</span> <span class="token number">20</span>

txt <span class="token operator">=</span> <span class="token string">&quot;{} 今年 {}&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>txt<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：张三今年 20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：使用索引号</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span>
age <span class="token operator">=</span> <span class="token number">20</span>

txt <span class="token operator">=</span> <span class="token string">&quot;{0} 今年 {1}&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>txt<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：张三今年 20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span>
age <span class="token operator">=</span> <span class="token number">20</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;我叫{}，今年{}岁了&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;20&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我叫张三，今年20岁了</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;我叫{0}，今年{1}岁了&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;20&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我叫张三，今年20岁了</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;我叫{1}，今年{0}岁了&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;20&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我叫20，今年张三岁了</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;我叫{name}，今年{age}岁了&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我叫张三，今年20岁了</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;我叫{name}，今年{age}岁了&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>age<span class="token operator">=</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我叫张三，今年20岁了</span>


mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;20&quot;</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;我叫{List[0]}，今年{List[1]}岁了&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>List<span class="token operator">=</span>mylist<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我叫张三，今年20岁了</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;我叫{0[0]}，今年{0[1]}岁了&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我叫张三，今年20岁了</span>


mydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;20&quot;</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;我叫{Dict[name]}，今年{Dict[age]}岁了&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>Dict<span class="token operator">=</span>mydict<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我叫张三，今年20岁了</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;我叫{name}，今年{age}岁了&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token operator">**</span>mydict<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我叫张三，今年20岁了</span>


<span class="token keyword">class</span> <span class="token class-name">value</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span>
    age <span class="token operator">=</span> <span class="token string">&quot;20&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;我叫{Value.name}，今年{Value.age}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>Value<span class="token operator">=</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我叫张三，今年20岁了</span>


args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;，&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;。&quot;</span><span class="token punctuation">]</span>
kwargs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;20&quot;</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;我叫{name}{}今年{age}岁了{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我叫张三，今年20岁了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>*args</code> 表示任何多个无名参数，它是一个 <code>tuple</code> 或 <code>list</code></p><p><code>**kwargs</code> 表示关键字参数，它是一个 <code>dict</code></p></div><p><strong>数字格式化</strong></p><table><thead><tr><th style="text-align:center;">数字</th><th style="text-align:center;">格式</th><th style="text-align:center;">输出</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">3.1415926</td><td style="text-align:center;"><strong>{:.2f}</strong></td><td style="text-align:center;">3.14</td><td style="text-align:left;">保留小数点后两位</td></tr><tr><td style="text-align:center;">3.1415926 或 -1</td><td style="text-align:center;"><strong>{:+.2f}</strong></td><td style="text-align:center;">+3.14 或 -1.00</td><td style="text-align:left;">带符号保留小数点后两位</td></tr><tr><td style="text-align:center;">2.71828</td><td style="text-align:center;"><strong>{:.0f}</strong></td><td style="text-align:center;">3</td><td style="text-align:left;">不带小数</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;"><strong>{:0&gt;2d}</strong></td><td style="text-align:center;">05</td><td style="text-align:left;">数字补零（填充左边，宽度为 2）</td></tr><tr><td style="text-align:center;">5 或 10</td><td style="text-align:center;"><strong>{:x&lt;4d}</strong></td><td style="text-align:center;">5xxx 或 10xx</td><td style="text-align:left;">数字补 x（填充右边，宽度为 4）</td></tr><tr><td style="text-align:center;">1000000</td><td style="text-align:center;"><strong>{:,}</strong></td><td style="text-align:center;">1,000,000</td><td style="text-align:left;">以逗号分隔的数字格式</td></tr><tr><td style="text-align:center;">0.25</td><td style="text-align:center;"><strong>{:.2%}</strong></td><td style="text-align:center;">25.00%</td><td style="text-align:left;">百分比格式</td></tr><tr><td style="text-align:center;">1000000000</td><td style="text-align:center;"><strong>{:.2e}</strong></td><td style="text-align:center;">1.00e+09</td><td style="text-align:left;">指数记法</td></tr><tr><td style="text-align:center;">13</td><td style="text-align:center;"><strong>{:&gt;5d}</strong></td><td style="text-align:center;">   13</td><td style="text-align:left;">右对齐（宽度为 5）</td></tr><tr><td style="text-align:center;">13</td><td style="text-align:center;"><strong>{:&lt;5d}</strong></td><td style="text-align:center;">13   </td><td style="text-align:left;">左对齐（宽度为 5）</td></tr><tr><td style="text-align:center;">13</td><td style="text-align:center;"><strong>{:^5d}</strong></td><td style="text-align:center;"> 13  </td><td style="text-align:left;">中间对齐（宽度为 5）</td></tr><tr><td style="text-align:center;">11</td><td style="text-align:center;"><strong>&#39;{:b}&#39;</strong></td><td style="text-align:center;">1011</td><td style="text-align:left;">二进制</td></tr><tr><td style="text-align:center;">11</td><td style="text-align:center;"><strong>&#39;{:d}&#39;</strong></td><td style="text-align:center;">11</td><td style="text-align:left;">十进制</td></tr><tr><td style="text-align:center;">11</td><td style="text-align:center;"><strong><code>&#39;{:o}&#39;</code></strong></td><td style="text-align:center;">13</td><td style="text-align:left;">八进制</td></tr><tr><td style="text-align:center;">11</td><td style="text-align:center;"><strong>&#39;{:x}&#39;</strong></td><td style="text-align:center;">b</td><td style="text-align:left;">十六进制</td></tr><tr><td style="text-align:center;">11</td><td style="text-align:center;"><strong>&#39;{:#x}&#39;</strong></td><td style="text-align:center;">0xb</td><td style="text-align:left;">0x 式十六进制 + 小写</td></tr><tr><td style="text-align:center;">11</td><td style="text-align:center;"><strong>&#39;{:#X}&#39;</strong></td><td style="text-align:center;">0xB</td><td style="text-align:left;">0x 式十六进制 + 大写</td></tr></tbody></table><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">3.1415926</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;保留两位小数：{:.2f}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：保留两位小数：3.14</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>叹号：</strong></p><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{!s}好&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;您&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：您好</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{!r}好&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;您&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&quot;您&quot;好</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{!a}好&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&quot;您&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&quot;\\u4f60&quot;好</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>s</strong>：<code>str()</code> 是面向用户的，目的是可读性</li><li><strong>r</strong>：<code>repr()</code> 带有引号</li><li><strong>a</strong>：<code>ascii()</code> 是面向 Python 解析器的，返回值表示在 python 内部的含义，<code>ascii()</code>，返回 ascii 编码</li></ul><h2 id="insert" tabindex="-1"><a class="header-anchor" href="#insert" aria-hidden="true">#</a> insert()</h2><p><code>insert()</code> 方法，用于在列表中指定的索引处插入一个值。</p><p><strong>语法格式</strong>：<code>list.insert(index, object)</code></p><ul><li><strong>list</strong>：表示对 <code>insert</code> 输入的对象</li><li><strong>index</strong>：指定索引号</li><li><strong>object</strong>：要插入列表的对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span>
mylist<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[10, 20, 60, 30, 40]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="append" tabindex="-1"><a class="header-anchor" href="#append" aria-hidden="true">#</a> append()</h2><p><code>append()</code> 方法，用于在列表结尾处添加一个值，列表只占一个索引位。</p><p><strong>语法格式</strong>：<code>list.append(object)</code></p><ul><li><strong>list</strong>：表示对 <code>append</code> 输入的对象</li><li><strong>object</strong>：要添加列表的对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>
mylist01 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>
mylist<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>
mylist01<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[10, 20, 30, 40]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mylist01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[10, 20, 30, [40, 50]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="extend" tabindex="-1"><a class="header-anchor" href="#extend" aria-hidden="true">#</a> extend()</h2><p><code>extend()</code> 方法，用于合并列表，将列表中的每个元素都追加进来。</p><p><strong>语法格式</strong>：<code>list.extend(object)</code></p><ul><li><strong>list</strong>：表示对 <code>extend</code> 输入的对象</li><li><strong>object</strong>：要合并列表的对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>
mylist01 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span>
mylist<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>mylist01<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[10, 20, 30, 30, 40, 50]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>列表中的元素允许重复</p></div><h2 id="remove" tabindex="-1"><a class="header-anchor" href="#remove" aria-hidden="true">#</a> remove()</h2><p><code>remove()</code> 方法，用于删除列表指定的值。</p><p><strong>语法格式</strong>：<code>list.remove(object)</code></p><ul><li><strong>list</strong>：表示对 <code>remove</code> 输入的对象</li><li><strong>object</strong>：要删除列表的对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span>

mylist<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[10, 20, 40]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pop" tabindex="-1"><a class="header-anchor" href="#pop" aria-hidden="true">#</a> pop()</h2><p><code>pop()</code> 方法，用于删除列表指定的索引，默认删除最后一个元素。</p><p><strong>语法格式</strong>：<code>list.pop(index)</code></p><ul><li><strong>list</strong>：表示对 <code>pop</code> 输入的对象</li><li><strong>index</strong>：指定要删除列表的索引</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span>
mylist01 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span>
mylist02 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span>
mylist<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
mylist01<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
mylist02<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[10, 20, 30]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mylist01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[10, 30, 40]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mylist02<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[10, 20, 30]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="clear" tabindex="-1"><a class="header-anchor" href="#clear" aria-hidden="true">#</a> clear()</h2><p><code>clear()</code> 方法，用于清空列表，并且会删除地址空间，导致这些值被清空无法存储。该列表仍然存在，但没有内容。</p><p><strong>语法格式</strong>：<code>list.clear()</code></p><ul><li><strong>list</strong>：表示对 <code>clear</code> 输入的对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span>
mylist01 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
mylist01<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[[10, 20, 30, 40]]</span>

mylist<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mylist01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[[]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sort" tabindex="-1"><a class="header-anchor" href="#sort" aria-hidden="true">#</a> sort()</h2><p><code>sort()</code> 方法，用于按字母排序，改变原有列表。</p><p><strong>语法格式</strong>：<code>iterable.sort([key[, reverse]])</code></p><ul><li><strong>iterable</strong>：表示对 sort 输入可迭代对象</li><li><strong>key</strong>：指定带有一个参数的函数，用于从每个列表元素中提取比较键</li><li><strong>reverse</strong>：为一个布尔值，默认为 <code>False</code>。如果设为 <code>False</code>，实现升序排序；如果设为 <code>True</code>，实现降序排序</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;zero&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Orange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Kiwi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span><span class="token punctuation">]</span>
mylist01 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;zero&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Orange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Kiwi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span><span class="token punctuation">]</span>
mylist02 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;zero&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Orange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Kiwi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span><span class="token punctuation">]</span>

mylist<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> mylist<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
mylist01<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
mylist02<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">.</span>lower<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;Kiwi&#39;, &#39;Orange&#39;, &#39;banana&#39;, &#39;cherry&#39;, &#39;zero&#39;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：None</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mylist01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;zero&#39;, &#39;cherry&#39;, &#39;banana&#39;, &#39;Orange&#39;, &#39;Kiwi&#39;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mylist02<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;banana&#39;, &#39;cherry&#39;, &#39;Kiwi&#39;, &#39;Orange&#39;, &#39;zero&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reverse" tabindex="-1"><a class="header-anchor" href="#reverse" aria-hidden="true">#</a> reverse()</h2><p><code>reverse()</code> 方法，用于将列表倒序，改变原有列表。</p><p><strong>语法格式</strong>：<code>list.reverse()</code></p><ul><li><strong>list</strong>：表示对 <code>reverse</code> 输入的对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;zero&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Orange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Kiwi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span><span class="token punctuation">]</span>
mylist01 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;zero&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Orange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Kiwi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span><span class="token punctuation">]</span>

mylist<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;cherry&#39;, &#39;Kiwi&#39;, &#39;Orange&#39;, &#39;banana&#39;, &#39;zero&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reversed" tabindex="-1"><a class="header-anchor" href="#reversed" aria-hidden="true">#</a> reversed()</h2><p><code>reversed()</code> 方法，用于将序列反转，不改变原有序列。</p><p><strong>语法格式</strong>：<code>type.reversed(iterable)</code></p><ul><li><strong>type</strong>：表示对 <code>reversed</code> 输入的类型</li><li><strong>iterable</strong>：指定可迭代对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>
b <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[30, 10, 40, 50, 20]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[20, 50, 40, 10, 30]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[30, 10, 40, 50, 20]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="copy" tabindex="-1"><a class="header-anchor" href="#copy" aria-hidden="true">#</a> copy()</h2><p><code>copy()</code> 方法，用于制作列表的副本。</p><p><strong>语法格式</strong>：<code>list.copy()</code></p><ul><li><strong>list</strong>：表示对 <code>copy</code> 输入的对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;zero&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Orange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Kiwi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span><span class="token punctuation">]</span>
mylist01 <span class="token operator">=</span> mylist<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mylist01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;zero&#39;, &#39;banana&#39;, &#39;Orange&#39;, &#39;Kiwi&#39;, &#39;cherry&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="count" tabindex="-1"><a class="header-anchor" href="#count" aria-hidden="true">#</a> count()</h2><p><code>count()</code> 方法，用于返回某字符出现的次数，如果字符不存在，则返回 <code>0</code>。</p><p><strong>语法格式</strong>：<code>str.count(sub[, start[, end=len(string)]])</code></p><ul><li><strong>str</strong>：表示对 <code>count</code> 输入的对象</li><li><strong>sub</strong>：搜索的子字符串</li><li><strong>start</strong>：字符串开始搜索的位置。默认为第一个字符，第一个字符索引值为 <code>0</code></li><li><strong>end</strong>：字符串中结束搜索的位置。默认为字符串的最后一个位置</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&#39;Hello, World! Hello, Python!&#39;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;I&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="index" tabindex="-1"><a class="header-anchor" href="#index" aria-hidden="true">#</a> index()</h2><p><code>index()</code> 方法，用于获取指定元素在列表中首次出现的索引位置。</p><p><strong>语法格式</strong>：<code>list.index(object[, start, [end]])</code></p><ul><li><strong>list</strong>：表示对 <code>index</code> 输入的对象</li><li><strong>object</strong>：指定要查找的元素对象</li><li><strong>start</strong>：指定索引起始位置</li><li><strong>end</strong>：指定索引结束位置</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span>
num <span class="token operator">=</span> mylist<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
num01 <span class="token operator">=</span> mylist<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
num02 <span class="token operator">=</span> mylist<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>num01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>num02<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：报错，10 不在列表</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="get" tabindex="-1"><a class="header-anchor" href="#get" aria-hidden="true">#</a> get()</h2><p><code>get()</code> 方法，用于获取字典中键的值。</p><p><strong>语法格式</strong>：<code>dict.get(key, value)</code></p><ul><li><strong>dict</strong>：表示对 <code>get</code> 输入的对象</li><li><strong>key</strong>：指定在字典中要返回值的键</li><li><strong>value</strong>：指定如果键不存在字典中时，要返回的值，默认为 <code>None</code></li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;24&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：20</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;wangwu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：None</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;wangwu&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;字典中不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：字典中不存在</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="items" tabindex="-1"><a class="header-anchor" href="#items" aria-hidden="true">#</a> items()</h2><p><code>items()</code> 方法，用于以列表返回可遍历的（键, 值）元组数组。</p><p><strong>语法格式</strong>：<code>dict.items()</code></p><ul><li><strong>dict</strong>：表示对 <code>items</code> 输入的对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;24&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mydict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> mydict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">&quot;的年龄是&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
dict_items<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;20&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;24&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
zhangsan 的年龄是 <span class="token number">20</span>
lisi 的年龄是 <span class="token number">24</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="add" tabindex="-1"><a class="header-anchor" href="#add" aria-hidden="true">#</a> add()</h2><p><code>add()</code> 方法，用于添加元素到集合中。</p><p><strong>语法格式</strong>：<code>set.add(object)</code></p><ul><li><strong>set</strong>：表示对 <code>add</code> 输入的对象</li><li><strong>object</strong>：表示要添加的元素对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>myset <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span>
myset<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>myset<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：{40, 10, 20, 30}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="join" tabindex="-1"><a class="header-anchor" href="#join" aria-hidden="true">#</a> join()</h2><p><code>join()</code> 方法，用于合并字符串。</p><p><strong>语法格式</strong>：<code>strnew = string.join(iterable)</code></p><ul><li><strong>strnew</strong>：表示合并后生成的字符串名称</li><li><strong>string</strong>：字符串类型，指定合并时的分隔符</li><li><strong>iterable</strong>：可迭代对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wangwu&#39;</span><span class="token punctuation">]</span>
mystr01 <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>
mystr02 <span class="token operator">=</span> <span class="token string">&#39;@&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mystr01<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：zhangsan lisi wangwu</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;@&#39;</span> <span class="token operator">+</span> mystr02<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：@zhangsan@lisi@wangwu</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="find" tabindex="-1"><a class="header-anchor" href="#find" aria-hidden="true">#</a> find()</h2><p><code>find()</code> 方法，用于检索是否包含指定的子字符串，如果检索的字符串不存在，则返回 <code>-1</code>；如果存在，则返回首次出现该字符串时的索引。</p><p><strong>语法格式</strong>：<code>str.find(sub[, start[, end=len(string)]])</code></p><ul><li><strong>str</strong>：表示对 find 输入的对象</li><li><strong>sub</strong>：搜索的子字符串</li><li><strong>start</strong>：字符串开始搜索的位置。默认为第一个字符，第一个字符索引值为 <code>0</code></li><li><strong>end</strong>：字符串中结束搜索的位置。默认为字符串的最后一个位置</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&#39;Hello, World! Hello, Python!&#39;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;I&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：-1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：14</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="startswith" tabindex="-1"><a class="header-anchor" href="#startswith" aria-hidden="true">#</a> startswith()</h2><p><code>startswith()</code> 方法，用于检索字符串是否以指定子字符串开头，如果是则返回 <code>True</code>，否则返回 <code>False</code>。</p><p><strong>语法格式</strong>：<code>str.startswith(prefix[, start[, end=len(string)]])</code></p><ul><li><strong>str</strong>：表示对 <code>startswith</code> 输入的对象</li><li><strong>prefix</strong>：搜索的子字符串</li><li><strong>start</strong>：字符串开始搜索的位置。默认为第一个字符，第一个字符索引值为 <code>0</code></li><li><strong>end</strong>：字符串中结束搜索的位置。默认为字符串的最后一个位置</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&#39;Hello, World! Hello, Python!&#39;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;I&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="endswith" tabindex="-1"><a class="header-anchor" href="#endswith" aria-hidden="true">#</a> endswith()</h2><p><code>endswith()</code> 方法，用于检索字符串是否以指定子字符串结尾，如果是则返回 <code>True</code>，否则返回 <code>False</code>。</p><p><strong>语法格式</strong>：<code>str.endswith(suffix[, start[, end=len(string)]])</code></p><ul><li><strong>str</strong>：表示对 <code>endswith</code> 输入的对象</li><li><strong>suffix</strong>：搜索的子字符串</li><li><strong>start</strong>：字符串开始搜索的位置。默认为第一个字符，第一个字符索引值为 <code>0</code></li><li><strong>end</strong>：字符串中结束搜索的位置。默认为字符串的最后一个位置</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>string <span class="token operator">=</span> <span class="token string">&#39;Hello, World! Hello, Python!&#39;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;I&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="encode" tabindex="-1"><a class="header-anchor" href="#encode" aria-hidden="true">#</a> encode()</h2><p><code>encode()</code> 方法，用于将字符串转换为二进制数据（即 bytes），也称为 “编码”。</p><p><strong>语法格式</strong>：<code>str.encode([encoding=&quot;utf-8&quot;][, error=&quot;strict&quot;])</code></p><ul><li><strong>str</strong>：表示对 <code>encode</code> 输入的字符串</li><li><strong>encoding=&quot;utf-8</strong>&quot;：用于指定进行转码时采用的字符编码，默认为 <code>UTF-8</code>，如果使用简体中文，则设置为 <code>GB2312</code></li><li><strong>error</strong>：指定错误处理方式，值为 <code>strict</code> 时，遇到非法字符就抛出异常；值为 <code>ignore</code> 时，忽略非法字符；值为 <code>replace</code> 时，用 <code>?</code> 替换非法字符；值为 <code>xmlcharrefreplace</code> 时，使用 <code>XML</code> 的字符引用等。默认为 <code>strict</code></li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mystr <span class="token operator">=</span> <span class="token string">&quot;我喜欢用 Python&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;UTF-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：b&#39;\\xe6\\x88\\x91\\xe5\\x96\\x9c\\xe6\\xac\\xa2\\xe7\\x94\\xa8 Python&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;GB2312&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：b&#39;\\xce\\xd2\\xcf\\xb2\\xbb\\xb6\\xd3\\xc3 Python&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;GBK&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：b&#39;\\xce\\xd2\\xcf\\xb2\\xbb\\xb6\\xd3\\xc3 Python&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="decode" tabindex="-1"><a class="header-anchor" href="#decode" aria-hidden="true">#</a> decode()</h2><p><code>decode()</code> 方法，将二进制数据转换为字符串，将 <code>encode()</code> 方法转换的结果再转换为字符串，也称为 “解码”。</p><p><strong>语法格式</strong>：<code>bytes.decode([encoding=&quot;utf-8&quot;][, error=&quot;strict&quot;])</code></p><ul><li><strong>bytes</strong>：表示对 <code>decode</code> 输入的二进制数据</li><li><strong>encoding=&quot;utf-8&quot;</strong>：用于指定进行转码时采用的字符编码，默认为 <code>UTF-8</code>，如果使用简体中文，则设置为 <code>GB2312</code></li><li><strong>error</strong>：指定错误处理方式，值为 <code>strict</code> 时，遇到非法字符就抛出异常；值为 <code>ignore</code> 时，忽略非法字符；值为 <code>replace</code> 时，用 <code>?</code> 替换非法字符；值为 <code>xmlcharrefreplace</code> 时，使用 <code>XML</code> 的字符引用等。默认为 <code>strict</code></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在设置解码采用的字符编码时，需要与编码时采用的字符编码一致</p></div><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mybytes01 <span class="token operator">=</span> <span class="token string">b&#39;\\xe6\\x88\\x91\\xe5\\x96\\x9c\\xe6\\xac\\xa2\\xe7\\x94\\xa8 Python&#39;</span>
mybytes02 <span class="token operator">=</span> <span class="token string">b&#39;\\xce\\xd2\\xcf\\xb2\\xbb\\xb6\\xd3\\xc3 Python&#39;</span>
mybytes03 <span class="token operator">=</span> <span class="token string">b&#39;\\xce\\xd2\\xcf\\xb2\\xbb\\xb6\\xd3\\xc3 Python&#39;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>mybytes01<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;UTF-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我喜欢用 Python</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mybytes01<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;GB2312&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：UnicodeDecodeError: &#39;gb2312&#39; codec can&#39;t decode byte 0xe6 in position 0: illegal multibyte sequence。GB2312 解码器无法解码</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mybytes02<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;GB2312&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我喜欢用 Python</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mybytes03<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;GBK&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我喜欢用 Python</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="new" tabindex="-1"><a class="header-anchor" href="#new" aria-hidden="true">#</a> __new__()</h2><p><code>__new__()</code> 方法，用于创建一个 cls 类的新实例。<code>__new__()</code> 是一个由 <code>object</code> 基类提供的 <strong>静态方法</strong>（因为是特例所以您不需要显式地声明），它会将所请求实例所属的类作为第一个参数。其余的参数会被传递给对象构造器表达式（对类的调用）。<code>__new__()</code> 的返回值应为新对象实例（通常是 cls 的实例）。</p><p>如果 <code>__new__()</code> 在构造对象期间被发起调用并且它返回了一个 cls 的实例，则新实例的 <code>__init__()</code> 方法将以 <code>__init__(self[, ...])</code> 的形式被发起调用，其中 <code>self</code> 为新实例而其余的参数与被传给对象构造器的参数相同。</p><p>如果 <code>__new__()</code> 未返回一个 cls 的实例，则新实例的 <code>__init__()</code> 方法就不会被执行。</p><p><strong>语法格式</strong>：<code>__new__(cls[, ...])</code></p><ul><li><strong>cls</strong>：必须指定且必须是第一个参数</li><li><strong>[, ...]</strong>：可以指定一些 <code>*arg</code> 和 <code>**kwargs</code></li></ul><p>当 Python 实例化一个对象时，首先调用 <code>__new__()</code> 方法构造一个类的实例，并为其分配对应类型的内存空间，该实例的内存地址就是它的唯一标识符。然后再调用 <code>__init__()</code> 方法对实例进行初始化，通常是对该实例的属性进行初始化。</p><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;先调用 __new__() 方法再调用 __init__() 方法&quot;&quot;&quot;</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;__new__ called&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;__init__ called&quot;</span><span class="token punctuation">)</span>


a <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
__new__ called
__init__ called


<span class="token triple-quoted-string string">&quot;&quot;&quot;__new__() 方法构造一个类实例，并将该实例传递给自身的 __init__() 方法，即 __init__() 方法的 self 参数&quot;&quot;&quot;</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;__new__ called&quot;</span><span class="token punctuation">)</span>
        instance <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> instance
    
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;__init__ called&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span>


b <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
__new__ called
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;__main__.Person&#39;</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Person <span class="token builtin">object</span> at <span class="token number">0x1093c1580</span><span class="token operator">&gt;</span>
<span class="token number">4449899904</span>
__init__ called
<span class="token number">4449899904</span>


<span class="token triple-quoted-string string">&quot;&quot;&quot;如果 __new__() 方法不返回任何实例的话，__init__() 方法将不会被调用&quot;&quot;&quot;</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;__new__ called&quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;__init__ called&quot;</span><span class="token punctuation">)</span>


c <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
__new__ called


<span class="token triple-quoted-string string">&quot;&quot;&quot;如果 __new__() 方法返回一个其他类的实例的话，那它自身的 __init__() 方法将不会被调用。而且 __new__() 方法将会初始化一个其他类的对象&quot;&quot;&quot;</span>
<span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;__new__ called&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> Animal<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;__init__ called&quot;</span><span class="token punctuation">)</span>


d <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
__new__ called
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;__main__.Animal&#39;</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Animal <span class="token builtin">object</span> at <span class="token number">0x10fea3550</span><span class="token operator">&gt;</span>


<span class="token triple-quoted-string string">&quot;&quot;&quot;如果重写 __new__() 方法时，除了 cls 参数外不再设置其他参数的话，将无法用 __init__() 方法来设置初始化参数&quot;&quot;&quot;</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;__new__ called&quot;</span><span class="token punctuation">)</span>
        instance <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>
        <span class="token keyword">return</span> instance
    
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;__init__ called&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name


e <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&quot;Eric&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>name<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;example.py&quot;</span><span class="token punctuation">,</span> line <span class="token number">102</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
    e <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&quot;Eric&quot;</span><span class="token punctuation">)</span>
TypeError<span class="token punctuation">:</span> __new__<span class="token punctuation">(</span><span class="token punctuation">)</span> takes <span class="token number">1</span> positional argument but <span class="token number">2</span> were given


<span class="token triple-quoted-string string">&quot;&quot;&quot;在重写 __new__() 方法时，需要在参数中加入 *args,**kwargs，或者显式地加入对应的参数，才能通过 __init__() 方法初始化参数&quot;&quot;&quot;</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 或者 def __new__(cls, name)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;__new__ called&quot;</span><span class="token punctuation">)</span>
        instance <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>
        <span class="token keyword">return</span> instance
    
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;__init__ called&quot;</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name


e <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&quot;Eric&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>name<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
__new__ called
__init__ called
Eric
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="init" tabindex="-1"><a class="header-anchor" href="#init" aria-hidden="true">#</a> __init__()</h2><p><code>__init__()</code> 方法，这种方法是 <strong>构造方法</strong>。该方法是一个特殊的方法，每当创建一个类的新实例时，Python 都会自动执行它。<code>__init__()</code> 方法必须包含一个 <code>self</code> 参数，并且必须是第一个参数。<code>self</code> 参数是一个指向实例本身的引用，用于访问类中属性和方法。在方法调用时会自动传递实际参数 <code>self</code>，因此当 <code>__init__()</code> 方法只有一个参数时，在创建类的实例时，就不需要指定实际参数了。</p><p><strong>语法格式</strong>：<code>__init__(self[, parameter[, parameter[,...]]])</code></p><ul><li><strong>self</strong>：必须指定且必须是第一个参数，<code>self</code> 参数是一个指向实例本身的引用，用于访问类中属性和方法</li><li><strong>[, parameter[, parameter[,...]]]</strong>：可选参数，用于指定类中的属性</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 构造方法</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age


dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">&quot;球球&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 创建实例化对象，调用构造方法</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;我们家的狗狗叫：{0}，{1} 岁了。&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">,</span> dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：我们家的狗狗叫：球球，2 岁了。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="str" tabindex="-1"><a class="header-anchor" href="#str" aria-hidden="true">#</a> __str__()</h2><p><code>__str__()</code> 方法，该方法是一个特殊的方法，每当创建一个类的新实例时，Python 都会自动执行它。用于返回一个字符串，当做这个对象的描述。</p><p><strong>语法格式</strong>：<code>__str__(self[, parameter[, parameter[,...]]])</code></p><ul><li><strong>self</strong>：必须指定且必须是第一个参数，<code>self</code> 参数是一个指向实例本身的引用，用于访问类中属性和方法</li><li><strong>[, parameter[, parameter[,...]]]</strong>：可选参数，用于指定类中的属性</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>__str__()</code> 方法与 <code>__init__()</code> 方法一样，首尾双下划线修饰，也是一个默认方法</p><p>作用：用于返回一个字符串，当做这个对象的描述</p><p>如果用 <code>print</code> 打印将会打印生成器对象，所以要用 <code>__str__()</code> 方法将对象的描述符格式化</p></div><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;定义一个猫类&quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> new_name<span class="token punctuation">,</span> new_age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;在创建完对象之后会自动调用, 它完成对象的初始化的功能&quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> new_name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> new_age

    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;返回一个对象的描述信息&quot;&quot;&quot;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;名字是: %s, 年龄是: %d&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;%s在吃鱼....&quot;</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">drink</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;%s在喝可乐...&quot;</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">introduce</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;名字是: %s, 年龄是: %d&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span>


tom <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token string">&quot;汤姆&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>  <span class="token comment"># 创建了一个对象</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：名字是: 汤姆, 年龄是: 30</span>
tom<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：汤姆在吃鱼....</span>
tom<span class="token punctuation">.</span>drink<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：汤姆在喝可乐...</span>
tom<span class="token punctuation">.</span>introduce<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：名字是: 汤姆, 年龄是: 30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="name-main" tabindex="-1"><a class="header-anchor" href="#name-main" aria-hidden="true">#</a> __name__ == &#39;__main__&#39;</h2><p><code>__name__ == &#39;__main__&#39;</code> 方法，是用来控制 Python 文件执行的场景。</p><p>Python 文件通常有两种执行方法：</p><ul><li>作为脚本文件直接执行</li><li>作为模块 import 导入到其它的 Python 脚本中执行</li></ul><p><code>if __name__ == &#39;__main__&#39;</code> 中的代码只有在作为脚本文件才会被执行，而作为模块 <code>import</code> 导入到其它的 Python 脚本中不会执行。</p><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
创建名为 test.py 文件
&quot;&quot;&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;__name__：&quot;</span><span class="token punctuation">,</span> __name__<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, Python!&quot;</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果。if __name__==&quot;__main__&quot;: 语句之前和之后的代码都被执行</span>
Hello<span class="token punctuation">,</span> World!
__name__： __main__
Hello<span class="token punctuation">,</span> Python!

<span class="token triple-quoted-string string">&quot;&quot;&quot;
创建名为 test01.py 文件，将 test.py 文件作为模块导入
&quot;&quot;&quot;</span>

<span class="token keyword">import</span> test


<span class="token comment"># 输出结果。if __name__==&quot;__main__&quot;: 之前的语句被执行，之后的没有被执行</span>
Hello<span class="token punctuation">,</span> World!
__name__： test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>每个 Python 模块（Python 文件，也就是此处的 <code>test.py</code> 和 <code>test01.py</code>）都包含内置的变量 <code>__name__</code>，当该模块被直接执行的时候，<code>__name__</code> 等于文件名（包含后缀 <code>.py</code> ）；如果该模块 import 到其他模块中，则该模块的 <code>__name__</code> 等于模块名称（不包含后缀 <code>.py</code>），而 <code>__main__</code> 始终指当前执行模块的名称（包含后缀 <code>.py</code>）。进而当模块被直接执行时，<code>__name__ == &#39;__main__&#39;</code> 结果为假</p></div><h2 id="close" tabindex="-1"><a class="header-anchor" href="#close" aria-hidden="true">#</a> close()</h2><p><code>close()</code> 方法，对打开的文件进行关闭，以免对文件造成不必要的破坏。</p><p><strong>语法格式</strong>：<code>file.close()</code></p><ul><li><strong>file</strong>：为打开的文件对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;_io.TextIOWrapper name=&#39;test.txt&#39; mode=&#39;r&#39; encoding=&#39;utf-8&#39;&gt;</span>

<span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>close()</code> 方法先刷新缓冲区中还没有写入的信息，然后再关闭文件。这样可以将没有写入到文件的内容写入到文件中，在关闭文件后，便不能再进行写入操作了</p></div><h2 id="write" tabindex="-1"><a class="header-anchor" href="#write" aria-hidden="true">#</a> write()</h2><p><code>write()</code> 方法，可以向文件中写入内容。</p><p><strong>语法格式</strong>：<code>file.write(string)</code></p><ul><li><strong>file</strong>：指定要打开的文件对象</li><li><strong>string</strong>：指定要写入的内容</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在调用 <code>write()</code> 方法向文件中写入内容的前提是在打开文件时，指定打开模式为 <code>w</code>（可写）或 <code>a</code>（追加），否则会报错</p></div><p>使用 <code>w</code> 读写模式写入内容。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;Hello, World!\\n&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;写入内容&quot;</span><span class="token punctuation">)</span>

<span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
写入内容
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在写入文件后，一定要调用 <code>close()</code> 方法关闭文件，否则写入的内容不会保存到文件中。这是因为当写入文件内容时，操作系统不会立刻把数据写入到磁盘中，而是先缓存起来，只有调用 <code>close()</code> 方法时才会将数据写入到磁盘中</p></div><p>使用 <code>a</code> 追加模式写入内容。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;Hello, Python!&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;写入内容&quot;</span><span class="token punctuation">)</span>

<span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="read" tabindex="-1"><a class="header-anchor" href="#read" aria-hidden="true">#</a> read()</h2><p><code>read()</code> 方法，用于读取指定个数的字符。</p><p><strong>语法格式</strong>：<code>file.read([size])</code></p><ul><li><strong>file</strong>：指定要读取的文件对象</li><li><strong>size</strong>：指定要读取字符的个数，如果省略，则读取所有内容</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在调用 <code>read()</code> 方法读取文件内容的前提时在打开文件时，指定打开模式为 <code>r</code>（只读）或 <code>r+</code>（读写），否则会报错</p></div><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    mystr <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
Hello<span class="token punctuation">,</span> World!
Hello<span class="token punctuation">,</span> Python!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="seek" tabindex="-1"><a class="header-anchor" href="#seek" aria-hidden="true">#</a> seek()</h2><p><code>seek()</code> 方法，用于将文件的指针移动到只读位置，然后再应用 <code>read()</code> 方法读取，可以读取文件部分内容。</p><p><strong>语法格式</strong>：<code>file.seek(offset[, whence])</code></p><ul><li><strong>file</strong>：指定已经打开的文件对象</li><li><strong>offset</strong>：指定移动的字符个数，具体位置与 <code>whence</code> 参数有关</li><li><strong>whence</strong>：指定从什么位置开始计算。默认为 <code>0</code>，值为 <code>0</code> 表示从文件头开始计算，值为 <code>1</code> 表示从当前位置开始计算，值为 <code>2</code> 表示从文件末尾开始计算</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    <span class="token builtin">file</span><span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
    mystr <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
 World!
He
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>对于 <code>whence</code> 参数，如果在打开文件时，没有使用 <code>b</code> 模式（即 <code>rb</code>），那么只允许从文件头开始计算相对位置，从文件末尾计算时就会抛出异常</p><p>在使用 <code>seek()</code> 方法时，如果采用 <code>GBK</code> 编码，那么 <code>offset</code> 的值是按一个汉字（包括中文标点符号）占两个字符计算，采用 <code>UTF-8</code> 编码，则一个汉字占三个字符，不过无论采用何种编码英文和数字都是按一个字符计算</p></div><h2 id="readline" tabindex="-1"><a class="header-anchor" href="#readline" aria-hidden="true">#</a> readline()</h2><p><code>readline()</code> 方法，用于每次读取一行数据。</p><p><strong>语法格式</strong>：<code>file.readline()</code></p><ul><li><strong>file</strong>：指定已经打开的文件对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    num <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        num <span class="token operator">+=</span> <span class="token number">1</span>
        line <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> line <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> line<span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token number">1</span> Hello<span class="token punctuation">,</span> World!

<span class="token number">2</span> Hello<span class="token punctuation">,</span> Python!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="readlines" tabindex="-1"><a class="header-anchor" href="#readlines" aria-hidden="true">#</a> readlines()</h2><p><code>readlines()</code> 方法，用于读取全部行，返回的是一个字符串列表，每行内容为一个元素。</p><p><strong>语法格式</strong>：<code>file.readlines()</code></p><ul><li><strong>file</strong>：指定要打开的文件对象</li></ul><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    lines <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：[&#39;Hello, World!\\n&#39;, &#39;Hello, Python!&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="all" tabindex="-1"><a class="header-anchor" href="#all" aria-hidden="true">#</a> __all__</h2><p><code>__all__</code> 方法，在模块中用于控制可以被导入的功能列表；但在包里面，<code>__all__</code> 是控制可以被导入的模块列表，即声明哪些模块可以被导入。</p><p>包里面的 <code>__all__</code> 是在 <code>__init__</code> 文件中声明的，而不是在哪个模块中写的。</p><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
在模块中使用：
新建了一个叫 module1 的模块，模块代码有两个功能：fun1 和 fun2
&quot;&quot;&quot;</span>
<span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;这是功能 1&quot;</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;这是功能 2&quot;</span><span class="token punctuation">)</span>


__all__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;fun1&quot;</span><span class="token punctuation">]</span>  <span class="token comment"># 声明只能调用 fun1() 模块</span>


<span class="token triple-quoted-string string">&quot;&quot;&quot;
在另一个 Python 文件中导入模块中的所有方法
&quot;&quot;&quot;</span>
<span class="token keyword">from</span> module1 <span class="token keyword">import</span> <span class="token operator">*</span>

fun1<span class="token punctuation">(</span><span class="token punctuation">)</span>
fun2<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
这是功能 <span class="token number">1</span>


<span class="token triple-quoted-string string">&quot;&quot;&quot;
在包中使用：
在名为 demo 的包里面有 module1 和 module2 两个模块，但在 __init__ 文件中被 __all__ 声明只有 module1 模块可以使用，__init__ 文件的代码如下
&quot;&quot;&quot;</span>
__all__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;module1&quot;</span><span class="token punctuation">]</span>  <span class="token comment"># module1 模块允许被导入</span>


<span class="token triple-quoted-string string">&quot;&quot;&quot;
在新的 Python 文件中导入 demo 包里面的 module1 和 module2 两个模块
&quot;&quot;&quot;</span>
<span class="token keyword">from</span> demo <span class="token keyword">import</span> <span class="token operator">*</span>

module1<span class="token punctuation">.</span>fun1<span class="token punctuation">(</span><span class="token punctuation">)</span>
module2<span class="token punctuation">.</span>fun1<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
这是功能 <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iter" tabindex="-1"><a class="header-anchor" href="#iter" aria-hidden="true">#</a> __iter__()</h2><p><code>__iter__()</code> 方法，用于返回一个迭代器，与 <code>iter()</code> 内置函数作用一样</p><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
ite <span class="token operator">=</span> mylist<span class="token punctuation">.</span>__iter__<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 接收一下 __iter__() 干了什么</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>ite<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;list_iterator object at 0x0000022FAB878670&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="next" tabindex="-1"><a class="header-anchor" href="#next" aria-hidden="true">#</a> __next__()</h2><p><code>__next__()</code> 方法，用于获取迭代器中的每一个元素，与 <code>next()</code> 内置函数作用一样</p><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
ite <span class="token operator">=</span> mylist<span class="token punctuation">.</span>__iter__<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 接收一下 __iter__() 干了什么</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>ite<span class="token punctuation">)</span>  <span class="token comment"># 输出结果：&lt;list_iterator object at 0x0000022FAB878670&gt;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>ite<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>ite<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>ite<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>ite<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="call" tabindex="-1"><a class="header-anchor" href="#call" aria-hidden="true">#</a> __call__</h2><p><code>__call__</code> 方法，是一个特殊方法，用于将一个类实例要变成一个可调用对象，<code>__call__</code> 参数可变。平时自定义的函数、内置函数和类都属于可调用对象，但凡是可以把一对括号 <code>()</code> 应用到某个对象身上都可称之为可调用对象，判断对象是否为可调用对象可以用函数 <code>callable</code>。</p><p>此方法会在实例作为一个函数被 <strong>调用</strong> 时被调用；如果定义了此方法，则 <code>x(arg1, arg2, ...)</code> 就大致可以被改写为 <code>type(x).__call__(x, arg1, ...)</code>。</p><p>例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>gender <span class="token operator">=</span> gender

    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> friend<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;My name is %s...&#39;</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;My friend is %s...&#39;</span> <span class="token operator">%</span> friend<span class="token punctuation">)</span>


p <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">)</span>
p<span class="token punctuation">(</span><span class="token string">&#39;Tony&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">callable</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
My name <span class="token keyword">is</span> Tom<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
My friend <span class="token keyword">is</span> Tony<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token boolean">True</span>


<span class="token comment"># 对于自定义函数的调用，通常情况下是在函数名后加 () 来调用。但同样也可以用 __call__() 方法来调用</span>
<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Function test() is called&quot;</span><span class="token punctuation">)</span>


<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Function test() is callable: %s&quot;</span> <span class="token operator">%</span> <span class="token builtin">callable</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span>
test<span class="token punctuation">(</span><span class="token punctuation">)</span>
test<span class="token punctuation">.</span>__call__<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment"># 输出结果</span>
Function test<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token builtin">callable</span><span class="token punctuation">:</span> <span class="token boolean">True</span>
Function test<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">is</span> called
Function test<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">is</span> called
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,284),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","methods.html.vue"]]);export{d as default};
