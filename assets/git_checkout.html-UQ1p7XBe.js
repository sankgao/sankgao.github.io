import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as c,c as d,b as a,e,d as l,w as o,f as s}from"./app-r9fg6lkk.js";const r={},p=s(`<h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述" aria-hidden="true">#</a> 描述</h2><p><code>git checkout</code> 用于切换分支或恢复工作目录树文件。</p><h2 id="选项" tabindex="-1"><a class="header-anchor" href="#选项" aria-hidden="true">#</a> 选项</h2><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>-q, --quiet</code></td><td style="text-align:left;">不显示输出内容</td></tr><tr><td style="text-align:center;"><code>-f, --force</code></td><td style="text-align:left;">放弃工作区和暂存区的所有修改</td></tr><tr><td style="text-align:center;"><code>-b</code></td><td style="text-align:left;">创建并切换分支</td></tr><tr><td style="text-align:center;"><code>-t, --track</code></td><td style="text-align:left;">创建分支并与远程分支关联</td></tr><tr><td style="text-align:center;"><code>--orphan=&lt;new_branch&gt;</code></td><td style="text-align:left;">新建并切换到新分支上，同时这个分支没有任何 <code>commit</code></td></tr></tbody></table><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><h3 id="切换分支" tabindex="-1"><a class="header-anchor" href="#切换分支" aria-hidden="true">#</a> 切换分支</h3><p>使用 <code>git checkout &lt;branch-name&gt;</code> 可以切换到指定的分支。如果该分支不存在 Git 会报错。</p><p>例如：切换到 <code>dev</code> 分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="切换上一个分支" tabindex="-1"><a class="header-anchor" href="#切换上一个分支" aria-hidden="true">#</a> 切换上一个分支</h3><p>例如：切换到上一个分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout -
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="从另一个分支签出单个文件" tabindex="-1"><a class="header-anchor" href="#从另一个分支签出单个文件" aria-hidden="true">#</a> 从另一个分支签出单个文件</h3><p>如果本地有相同文件，则会覆盖本地文件。</p><p>例如：从 <code>dev</code> 分支签出 <code>test</code> 文件到本地。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout dev -- <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>为避免引用（或者提交 ID）和路径同名而发生冲突，可以在 <code>&lt;path&gt;</code> 前用两个连续的短线（<code>--</code>）作为分隔。</p></div><p>例如：从历史（前一次提交）中恢复 <code>welcome.txt</code> 文件到当前工作区中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout HEAD~1 -- welcome.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="恢复工作区文件" tabindex="-1"><a class="header-anchor" href="#恢复工作区文件" aria-hidden="true">#</a> 恢复工作区文件</h3><p>如果工作区的文件被修改了但还没有提交到暂存区，可以使用 <code>git checkout -- &lt;file&gt;</code> 来恢复这个文件到最新的提交状态，这实际上会丢弃工作区中对这个文件的修改。</p>`,21),u=a("code",null,"test",-1),h=a("code",null,"git checkout -- <file>",-1),v=s(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> <span class="token builtin class-name">test</span>
<span class="token function">git</span> status
<span class="token function">git</span> checkout -- <span class="token builtin class-name">test</span>
<span class="token function">git</span> status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：放弃对工作区所有文件的修改。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout -- <span class="token builtin class-name">.</span>
<span class="token comment"># 或</span>
<span class="token function">git</span> checkout <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="恢复工作区和暂存区文件" tabindex="-1"><a class="header-anchor" href="#恢复工作区和暂存区文件" aria-hidden="true">#</a> 恢复工作区和暂存区文件</h3><p>如果工作区的文件修改后并提交到暂存区，可以使用 <code>git checkout -f</code> 命令，将丢弃工作区和暂存区文件所有文件的修改。</p><p>例如：放弃工作区和暂存区的所有修改。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> <span class="token builtin class-name">test</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">test</span>
<span class="token function">vim</span> test01.txt
<span class="token function">git</span> status
<span class="token function">git</span> checkout <span class="token parameter variable">-f</span>
<span class="token function">git</span> status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：放弃工作区和暂存区的所有修改，并切换到 <code>test</code> 分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> <span class="token builtin class-name">test</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">test</span>
<span class="token function">vim</span> test01.txt
<span class="token function">git</span> status
<span class="token function">git</span> checkout <span class="token parameter variable">-f</span> <span class="token builtin class-name">test</span>
<span class="token function">git</span> status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建并切换分支" tabindex="-1"><a class="header-anchor" href="#创建并切换分支" aria-hidden="true">#</a> 创建并切换分支</h3><p>使用 <code>git checkout -b &lt;new-branch-name&gt;</code> 可以创建一个新的分支，并立即切换到这个新分支。</p><p>例如：创建并切换到 <code>test</code> 分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：在指定基准点（<code>&lt;commit id&gt;</code>）处创建并切换到 <code>test</code> 分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token builtin class-name">test</span> <span class="token operator">&lt;</span>commit id<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：创建并切换到 <code>test</code> 分支，并与远程分支关联。</p><p>如果本地文件名有和远程分支名一样，也可以使用此方法切换到远程分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token builtin class-name">test</span> origin/test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="创建并与远程分支关联" tabindex="-1"><a class="header-anchor" href="#创建并与远程分支关联" aria-hidden="true">#</a> 创建并与远程分支关联</h3><p>例如：创建并切换到 <code>test</code> 分支，并与远程分支关联。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-t</span> origin/test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,21);function b(m,g){const n=i("RouterLink");return c(),d("div",null,[p,a("p",null,[e("例如：放弃对工作区 "),u,e(" 文件的修改。在修改工作区文件后和执行 "),h,e(" 命令后分别用 "),l(n,{to:"/commands/git/git_status.html"},{default:o(()=>[e("git status")]),_:1}),e(" 命令查看当前 Git 状态。")]),v])}const x=t(r,[["render",b],["__file","git_checkout.html.vue"]]);export{x as default};
