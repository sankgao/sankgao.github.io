import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as d,o as n,c,b as t,e,d as r,w as o,f as l}from"./app-yqwln4NR.js";const i={},p=t("h2",{id:"描述",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#描述","aria-hidden":"true"},"#"),e(" 描述")],-1),h=t("code",null,"git format-patch",-1),g=l(`<p><code>git format-patch</code> 命令会为每个指定的提交生成一个 <code>.patch</code> 文件，这些文件是文本文件，包含了将提交应用到另一个 Git 仓库所需的更改。文件名通常基于提交的哈希值（但会缩短并添加 <code>.patch</code> 后缀）。</p><p>这些补丁文件可以通过电子邮件、版本控制系统、文件共享服务等方式发送给其他人，或者用于自动化脚本中的代码迁移。</p><h2 id="选项" tabindex="-1"><a class="header-anchor" href="#选项" aria-hidden="true">#</a> 选项</h2><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>--root</code></td><td style="text-align:left;">从仓库的根提交（即第一个提交）开始生成补丁</td></tr><tr><td style="text-align:center;"><code>-n, --number=&lt;n&gt;</code></td><td style="text-align:left;">指定要生成的补丁数量</td></tr><tr><td style="text-align:center;"><code>-o &lt;directory&gt;, --output-directory=&lt;directory&gt;</code></td><td style="text-align:left;">指定输出补丁文件的目录</td></tr><tr><td style="text-align:center;"><code>-s, --signoff</code></td><td style="text-align:left;">在补丁文件中添加当前用户签名信息（<code>Signed-off-by:</code>）</td></tr><tr><td style="text-align:center;"><code>--cover-letter</code></td><td style="text-align:left;">生成一个封面信（cover letter），通常用于描述补丁集合的总体目的或注意事项</td></tr><tr><td style="text-align:center;"><code>--subject-prefix=&lt;prefix&gt;</code></td><td style="text-align:left;">为补丁的主题添加前缀</td></tr></tbody></table><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><p>例如：从最近的未推送提交开始，生成所有补丁到当前目录下的 <code>patches</code> 文件夹中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> format-patch <span class="token parameter variable">-o</span> patches/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：从特定的提交 <code>abc123</code> 开始，生成 <code>3</code> 个补丁。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> format-patch <span class="token parameter variable">-n</span> <span class="token number">3</span> abc123
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：将最近 3 个提交转换为补丁，并添加签名信息并输出到 <code>signed_patches</code> 目录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> format-patch <span class="token parameter variable">-s</span> <span class="token parameter variable">-o</span> signed_patches/ HEAD~3<span class="token punctuation">..</span>HEAD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,11);function u(m,f){const a=d("RouterLink");return n(),c("div",null,[p,t("p",null,[h,e(" 用于生成一系列基于某个提交（或提交范围）的补丁文件（patch files）。这些补丁文件可以被其他 Git 仓库通过 "),r(a,{to:"/commands/git/git_am.html"},{default:o(()=>[e("git am")]),_:1}),e(" 命令应用，以实现代码迁移或合并。")]),g])}const x=s(i,[["render",u],["__file","git_format-patch.html.vue"]]);export{x as default};
