import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o as l,c as d,b as t,e as n,d as s,w as a,f as i}from"./app-tWdy4GVC.js";const r={},p=i(`<h2 id="初始化仓库" tabindex="-1"><a class="header-anchor" href="#初始化仓库" aria-hidden="true">#</a> 初始化仓库</h2><p>如果您有一个当前未受版本控制的项目目录或一个空目录，并且想要开始使用 Git 控制它，则首先需要转到该项目的目录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /opt/git_tutorials
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),u=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>git init</code> 此命令将在当前目录下创建一个新的 <code>.git</code> 子目录，该目录包含了 Git 仓库所需要的所有必要文件。如：元数据对象、HEAD 文件、索引文件、配置信息等。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ls</span> <span class="token parameter variable">-F1</span> .git/

branches/
config
description
HEAD
hooks/
info/
objects/
refs/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于一个新建的 Git 仓库，这是默认结构。各文件目录描述如下：</p><ul><li><strong>branches</strong>：此目录存储所有分支内容</li><li><strong>config</strong>：此文件包含项目特有的配置选项</li><li><strong>description</strong>：此文件仅供 GitWeb 程序使用，我们无需关心</li><li><strong>HEAD</strong>：此文件指向目前被检出的分支</li><li><strong>hooks</strong>：此目录包含客户端或服务端的钩子脚本（hook scripts）</li><li><strong>info</strong>：此目录包含一个全局性排除（global exclude）文件，用以放置那些不希望被记录在 <code>.gitignore</code> 文件中的忽略模式（ignored patterns）</li><li><strong>objects</strong>：此目录存储数据库的所有内容</li><li><strong>refs</strong>：此目录存储指向数据（分支、远程仓库和标签等）的提交对象的指针</li></ul><h2 id="初始配置" tabindex="-1"><a class="header-anchor" href="#初始配置" aria-hidden="true">#</a> 初始配置</h2>`,6),g=i(`<ol><li><code>/etc/gitconfig</code> 文件: 对系统上每一个用户及他们仓库生效。传递 <code>--system</code> 选项，那么它就会读写该文件中的配置变量。由于它是系统配置文件，因此需要管理员或超级用户权限来修改它。</li><li><code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 文件：只对当前用户生效。传递 <code>--global</code> 选项让 Git 读写此文件，这会对你系统上所有的仓库生效。</li><li>当前使用仓库的 Git 目录中的 config 文件（即 <code>.git/config</code>）：只对该仓库生效。传递 <code>--local</code> 选项让 Git 强制读写此文件，默认选项。这需要进入某个 Git 仓库中才能让该选项生效。</li></ol><p>每一个级别会覆盖上一级别的配置，所以 <code>.git/config</code> 的配置变量会覆盖 <code>/etc/gitconfig</code> 中的配置变量。</p><p>在 Windows 系统中，Git 会查找 <code>$HOME</code> 目录下（一般情况下是 <code>C:\\Users\\$USER</code>）的 <code>.gitconfig</code> 文件。Git 同样也会寻找 <code>/etc/gitconfig</code> 文件，但只限于 MSys 的根目录下，即安装 Git 时所选的目标位置。如果你在 Windows 上使用 Git 2.x 以后的版本，那么还有一个系统级的配置文件。此文件只能以管理员权限通过 <code>git config -f &lt;file&gt;</code> 来修改。</p><p>通过以下命令查看所有的配置以及它们所在的文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--list</span> --show-origin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完 Git 之后，要做的第一件事就是设置你的用户名和邮件地址。这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;Sank Gao&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email sankgao@example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看配置信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">-l</span>

<span class="token assign-left variable">user.name</span><span class="token operator">=</span>Sank Gao
<span class="token assign-left variable">user.email</span><span class="token operator">=</span>sankgao@example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="初始化提交" tabindex="-1"><a class="header-anchor" href="#初始化提交" aria-hidden="true">#</a> 初始化提交</h2>`,10),m=i(`<p>如果是空目录，则在该目录中创建文件后再开始追踪这些文件并进行初始提交。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">touch</span> test01.txt
<span class="token function">git</span> <span class="token function">add</span> test01.txt
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;add test01.txt&#39;</span>

<span class="token punctuation">[</span>master <span class="token punctuation">(</span>root-commit<span class="token punctuation">)</span> 508c4dc<span class="token punctuation">]</span> <span class="token function">add</span> test01.txt
 <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span>
 create mode <span class="token number">100644</span> test01.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>git add</code> 将 <code>test01.txt</code> 文件从工作区添加到暂存区</li><li><code>git commit</code> 将 <code>test01.txt</code> 文件从暂存区提交到本地仓库，<code>-m</code> 选项添加描述信息</li></ul>`,3);function v(b,h){const e=c("RouterLink");return l(),d("div",null,[p,t("p",null,[n("使用 "),s(e,{to:"/computers/commands/git/git_init.html"},{default:a(()=>[n("git init")]),_:1}),n(" 命令将此项目目录，初始化为 Git 仓库。")]),u,t("p",null,[n("初次运行 Git 需要配置几个 Git 环境。Git 自带一个 "),s(e,{to:"/computers/commands/git/git_config.html"},{default:a(()=>[n("git config")]),_:1}),n(" 的工具来帮助设置控制 Git 外观和行为的配置变量。这些变量存储在三个不同的位置：")]),g,t("p",null,[n("如果在一个已存在文件的文件夹（而非空文件夹）中进行版本控制，应该开始追踪这些文件并进行初始提交。可以通过 "),s(e,{to:"/computers/commands/git/git_add.html"},{default:a(()=>[n("git add")]),_:1}),n(" 命令来指定所需的文件来进行追踪，然后执行 "),s(e,{to:"/computers/commands/git/git_commit.html"},{default:a(()=>[n("git commit")]),_:1}),n(" 命令。")]),m])}const _=o(r,[["render",v],["__file","initialize_repo.html.vue"]]);export{_ as default};
