import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-d71d2a3e.js";const e="/assets/array-a8dd25af.png",p="/assets/array_storage-909b1161.png",o="/assets/singly_linked_list-5132a440.png",c="/assets/doubly_linked_list-f306138d.png",i="/assets/linked_list_storage-30aba862.png",l="/assets/stack_array-27cf0f53.png",u="/assets/stack_linked-a05264f5.png",r="/assets/queue_array-cea20a7f.png",d="/assets/queue_linked-71d2b360.png",k="/assets/deque-5153e876.png",v="/assets/priority_queue-ee07ab09.png",m={},b=t('<h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><p><strong>数组（array）</strong> 是由有限个相同类型的变量所组成的有序集合，数组中的每一个变量被称为 <strong>元素</strong>。数组是最为简单、最为常用的数据结构。</p><p>以整型数组为例，数组的存储形式如下图所示：</p><figure><img src="'+e+'" alt="array" tabindex="0" loading="lazy"><figcaption>array</figcaption></figure><p>数组中的每一个元素都有自己的下标，只不过这个下标从 <code>0</code> 开始，一直到数组长度 <code>-1</code>。</p><p>数组的另一个特点，是在内存中按 <strong>顺序存储</strong>，因此可以很好地实现逻辑上的 <strong>顺序表。</strong></p><p>内存是由一个个连续的内存单元组成的，每一个内存单元都有自己的地址。在这些内存单元中，有些被其他数据占用了，有些是空闲的。</p><p>数组中的每一个元素，都存储在小小的内存单元中，并且元素之间紧密排列，既不能打乱元素的存储顺序，也不能跳过某个存储单元进行存储。</p><figure><img src="'+p+`" alt="array_storage" tabindex="0" loading="lazy"><figcaption>array_storage</figcaption></figure><p>在上图中，橙色的格子代表空闲的存储单元，灰色的格子代表已占用的存储单元，而红色的连续格子代表数组在内存中的位置。</p><p>不同类型的数组，每个元素所占的字节个数也不同，本图只是一个简单的示意图。</p><h3 id="数组的基本操作" tabindex="-1"><a class="header-anchor" href="#数组的基本操作" aria-hidden="true">#</a> 数组的基本操作</h3><ol><li><p>读取元素</p><p>由于数组在内存中顺序存储，所以只要给出一个数组下标，就可以读取到对应的数组元素。</p><p>创建一个数组：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要读取数组下标为 <code>3</code> 的元素，就写作 <code>my_list[3]</code>；读取数组下标为 <code>5</code> 的元素，就写作 <code>my_list[5]</code>。需要注意的是，输入的下标必须在数组的长度范围之内，否则会出现数组越界。像这种根据下标读取元素的方式叫作 <strong>随机读取</strong>。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>更新元素</p><p>要把数组中某一个元素的值替换为一个新值，也是非常简单的操作。直接利用数组下标，就可以把新值赋给该元素。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_list<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>数组读取元素和更新元素的时间复杂度都是 <strong>O(1)</strong></p></div><ol start="3"><li><p>插入元素</p><p>插入数组元素的操作存在三种情况：</p><ul><li><p><strong>尾部插入</strong></p><p>直接把插入的元素放在数组尾部的空闲位置即可，等同于更新元素的操作。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>中间插入</strong></p><p>由于数组的每一个元素都有其固定下标，所以不得不首先把插入位置及后面的元素向后移动，腾出地方，再把要插入的元素放到对应的数组位置上。例如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>my_list<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了更好地理解数组的工作方式，实现一段插入操作的代码：</p><details class="hint-container details"><summary>代码</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyArray</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> capacity
        self<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 判断访问下标是否超出范围</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;超出数组实际元素范围！&quot;</span><span class="token punctuation">)</span>

        <span class="token comment"># 从右向左循环，逐个元素向右挪一位</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>

        <span class="token comment"># 腾出的位置放入新元素</span>
        self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element
        self<span class="token punctuation">.</span>size <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">def</span> <span class="token function">output</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>


array <span class="token operator">=</span> MyArray<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
array<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
array<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>
array<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span>
array<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details></li><li><p><strong>超范围插入</strong></p><p>假如现在有一个长度为 <code>6</code> 的数组，已经装满了元素，这时还想插入一个新元素。</p><p>此时可以创建一个新数组，长度是旧数组的 <code>2</code> 倍，再把旧数组中的元素统统复制过去，这样就实现了数组的扩容。</p><p>如此一来，插入元素方法也需要改写了，改写后的代码如下：</p><details class="hint-container details"><summary>代码</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyArray</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> capacity
        self<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">def</span> <span class="token function">insert_v2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 判断访问下标是否超出范围</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;超出数组实际元素范围！&quot;</span><span class="token punctuation">)</span>

        <span class="token comment"># 如果实际元素达到数组容量上线，数组扩容</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>size <span class="token operator">&gt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>array<span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token comment"># 从右向左循环，逐个元素向右挪一位</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>

        <span class="token comment"># 腾出的位置放入新元素</span>
        self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element
        self<span class="token punctuation">.</span>size <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">def</span> <span class="token function">resize</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        array_new <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>array<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>
        <span class="token comment"># 从旧数组复制到新数组</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
            array_new<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>array <span class="token operator">=</span> array_new

    <span class="token keyword">def</span> <span class="token function">output</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>


array <span class="token operator">=</span> MyArray<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
array<span class="token punctuation">.</span>insert_v2<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
array<span class="token punctuation">.</span>insert_v2<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>
array<span class="token punctuation">.</span>insert_v2<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>
array<span class="token punctuation">.</span>insert_v2<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span>
array<span class="token punctuation">.</span>insert_v2<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span>
array<span class="token punctuation">.</span>insert_v2<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
array<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details></li></ul></li><li><p>删除元素</p><p>数组的删除操作和插入操作的过程相反，如果删除的元素位于数组中间，其后的元素都需要向前挪动 <code>1</code> 位。</p><p>为了更好地理解数组的工作方式，实现一段删除操作的代码：</p><details class="hint-container details"><summary>代码</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyArray</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> capacity
        self<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">def</span> <span class="token function">insert_v2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 判断访问下标是否超出范围</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;超出数组实际元素范围！&quot;</span><span class="token punctuation">)</span>

        <span class="token comment"># 如果实际元素达到数组容量上线，数组扩容</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>size <span class="token operator">&gt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>array<span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token comment"># 从右向左循环，逐个元素向右挪一位</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>

        <span class="token comment"># 腾出的位置放入新元素</span>
        self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element
        self<span class="token punctuation">.</span>size <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 判断访问下标是否超出范围</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&quot;超出数组实际元素范围！&quot;</span><span class="token punctuation">)</span>

        <span class="token comment"># 从左到右，逐个元素向左挪一位</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>

        self<span class="token punctuation">.</span>size <span class="token operator">-=</span> <span class="token number">1</span>

    <span class="token keyword">def</span> <span class="token function">resize</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        array_new <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>array<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>
        <span class="token comment"># 从旧数组复制到新数组</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
            array_new<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>array <span class="token operator">=</span> array_new

    <span class="token keyword">def</span> <span class="token function">output</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>array<span class="token punctuation">)</span>


array <span class="token operator">=</span> MyArray<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
array<span class="token punctuation">.</span>insert_v2<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
array<span class="token punctuation">.</span>insert_v2<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>
array<span class="token punctuation">.</span>insert_v2<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>
array<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
array<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details></li></ol><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>数组扩容的时间复杂度是 <strong>O(n)</strong>，插入并移动元素的时间复杂度也是 <strong>O(n)</strong>，综合起来插入操作的时间复杂度是 <strong>O(n)</strong>。至于删除操作，只涉及元素的移动，时间复杂度也是 <strong>O(n)</strong></p></div><h3 id="数组的优势和劣势" tabindex="-1"><a class="header-anchor" href="#数组的优势和劣势" aria-hidden="true">#</a> 数组的优势和劣势</h3><p>数组拥有非常高效的随机访问能力，只要给出下标，就可以用常量时间找到对应元素。有一种高效查找元素的算法叫作二分查找，就是利用了数组的这个优势。</p><p>至于数组的劣势，体现在插入和删除元素方面。由于数组元素连续紧密地存储在内存中，插入、删除元素都会导致大量元素被迫移动，影响效率。</p><p>数组适合读操作多、写操作少的场景。</p><h2 id="链表" tabindex="-1"><a class="header-anchor" href="#链表" aria-hidden="true">#</a> 链表</h2><p><strong>链表（linked list）</strong> 是一种在物理上非连续、非顺序的数据结构，由若干节点（node）所组成，每个节点包含指向下一节点的 next 指针。</p><h3 id="单向链表" tabindex="-1"><a class="header-anchor" href="#单向链表" aria-hidden="true">#</a> 单向链表</h3><p><strong>单向链表的结构：</strong></p><figure><img src="`+o+`" alt="singly_linked_list" tabindex="0" loading="lazy"><figcaption>singly_linked_list</figcaption></figure><p>单向链表的每一个节点又包含两部分，一部分是 <strong>存放数据的变量 data</strong>，另一部分是 <strong>指向下一个节点的 next 指针。</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>链表的第一个节点被称为 <strong>头节点</strong>，最后一个节点被称为 <strong>尾节点</strong>，尾节点的 <strong>next 指针</strong> 指向空。</p><p>与数组按照下标来随机寻找元素不同，对于链表的其中一个节点A，只能根据节点A 的 <strong>next 指针</strong> 来找到该节点的下一个节点B，再根据节点B 的 <strong>next 指针</strong> 找到下一个节点C……</p><h3 id="双向链表" tabindex="-1"><a class="header-anchor" href="#双向链表" aria-hidden="true">#</a> 双向链表</h3><p>双向链表比单向链表稍微复杂一些，它的每一个节点除了拥有 <strong>data</strong> 和 <strong>next 指针</strong>，还拥有指向前置节点的 <strong>prev 指针。</strong></p><p><strong>双向链表的结构：</strong></p><figure><img src="`+c+'" alt="doubly_linked_list" tabindex="0" loading="lazy"><figcaption>doubly_linked_list</figcaption></figure><p>如果说数组在内存中的存储方式是 <strong>顺序存储</strong>，那么链表在内存中的存储方式则是 <strong>随机存储。</strong></p><p>数组在内存中占用了 <strong>连续完整的</strong> 存储空间。而链表则采用了 <strong>见缝插针</strong> 的方式，链表的每一个节点分布在内存中的不同位置，依靠 <strong>next 指针</strong> 进行关联。这样可以灵活有效地利用零散的碎片空间。</p><figure><img src="'+i+`" alt="linked_list_storage" tabindex="0" loading="lazy"><figcaption>linked_list_storage</figcaption></figure><p>图中的箭头代表链表节点的 <strong>next 指针。</strong></p><h3 id="链表的基本操作" tabindex="-1"><a class="header-anchor" href="#链表的基本操作" aria-hidden="true">#</a> 链表的基本操作</h3><ol><li><p>查找节点</p><p>在查找元素时，链表不像数组那样可以通过下标快速进行定位，只能从头节点开始向后一个一个节点逐一查找。</p></li></ol><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>链表中的数据只能按顺序进行访问，最坏的时间复杂度是 <strong>O(n)</strong></p></div><ol start="2"><li><p>更新节点</p><p>如果不考虑查找节点的过程，链表的更新过程会像数组那样简单，直接把旧数据替换成新数据即可。</p></li><li><p>插入节点</p><p>与数组类似，在链表中插入节点时，同样分为三种情况：</p><ul><li><p><strong>尾部插入</strong></p><p>把最后一个节点的 <strong>next 指针</strong> 指向新插入的节点即可。</p></li><li><p><strong>头部插入</strong></p><p>可以分成两个步骤：</p><ul><li>把新节点的 <strong>next 指针</strong> 指向原先的头节点</li><li>把新节点变为链表的头节点</li></ul></li><li><p><strong>中间插入</strong></p><p>可以分成两个步骤：</p><ul><li>新节点的 <strong>next 指针</strong> 指向插入位置的节点</li><li>插入位置前置节点的 <strong>next 指针</strong>，指向新节点</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>只要内存空间允许，能够插入链表的元素是无穷无尽的，不需要像数组那样考虑扩容的问题</p></div></li><li><p>删除元素</p><p>链表的删除操作同样分为三种情况：</p><ul><li><p><strong>尾部删除</strong></p><p>把倒数第 <code>2</code> 个节点的 <strong>next 指针</strong> 指向空即可。</p></li><li><p><strong>头部删除</strong></p><p>把链表的头节点设为原先头节点的 <strong>next 指针</strong> 所指向的节点即可。</p></li><li><p><strong>中间删除</strong></p><p>把要删除节点的前置节点的 <strong>next 指针</strong>，指向要删除元素的下一个节点即可。</p></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>许多高级语言，如：Java、Python，拥有自动化的垃圾回收机制，所以不用刻意去释放被删除的节点，只要没有外部引用指向它们，被删除的节点会被自动回收</p></div></li></ol><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>如果不考虑插入、删除操作之前查找元素的过程，只考虑纯粹的插入和删除操作，时间复杂度都是 <strong>O(1)</strong></p></div><p>为了更好地理解链表的工作方式，实现一段代码：</p><details class="hint-container details"><summary>代码</summary><p>以下是对单链表相关操作的代码实现。为了尾部插入的方便，代码中额外增加了指向链表尾节点的 <strong>last 指针。</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>


<span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token boolean">None</span>
        self<span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token boolean">None</span>
    
    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&#39;超出链表节点范围！&#39;</span><span class="token punctuation">)</span>
        
        p <span class="token operator">=</span> self<span class="token punctuation">.</span>head

        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
            p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">next</span>
        
        <span class="token keyword">return</span> p
    
    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&#39;超出链表节点范围！&#39;</span><span class="token punctuation">)</span>
        
        node <span class="token operator">=</span> Node<span class="token punctuation">(</span>data<span class="token punctuation">)</span>

        <span class="token keyword">if</span> self<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token comment"># 空链表</span>
            self<span class="token punctuation">.</span>head <span class="token operator">=</span> node
            self<span class="token punctuation">.</span>last <span class="token operator">=</span> node
        <span class="token keyword">elif</span> index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token comment"># 插入头部</span>
            node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>head
            self<span class="token punctuation">.</span>head <span class="token operator">=</span> node
        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>size <span class="token operator">==</span> index<span class="token punctuation">:</span>
            <span class="token comment"># 插入尾部</span>
            self<span class="token punctuation">.</span>last<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node
            self<span class="token punctuation">.</span>last <span class="token operator">=</span> node
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token comment"># 插入中间</span>
            prev_node <span class="token operator">=</span> self<span class="token punctuation">.</span>get<span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
            node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> prev_node<span class="token punctuation">.</span><span class="token builtin">next</span>
            prev_node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node
        
        self<span class="token punctuation">.</span>size <span class="token operator">+=</span> <span class="token number">1</span>
    
    <span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&#39;超出链表节点范围！&#39;</span><span class="token punctuation">)</span>
        
        <span class="token comment"># 暂存被删除的节点，用于返回</span>
        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token comment"># 删除头节点</span>
            removed_node <span class="token operator">=</span> self<span class="token punctuation">.</span>head
            self<span class="token punctuation">.</span>head <span class="token operator">=</span> self<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">elif</span> index <span class="token operator">==</span> self<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token comment"># 删除尾节点</span>
            prev_node <span class="token operator">=</span> self<span class="token punctuation">.</span>get<span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
            removed_node <span class="token operator">=</span> prev_node<span class="token punctuation">.</span><span class="token builtin">next</span>
            prev_node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>
            self<span class="token punctuation">.</span>last <span class="token operator">=</span> prev_node
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token comment"># 删除中间节点</span>
            prev_node <span class="token operator">=</span> self<span class="token punctuation">.</span>get<span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
            next_node <span class="token operator">=</span> prev_node<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
            removed_node <span class="token operator">=</span> prev_node<span class="token punctuation">.</span><span class="token builtin">next</span>
            prev_node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> next_node
        
        self<span class="token punctuation">.</span>size <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> removed_node
    
    <span class="token keyword">def</span> <span class="token function">output</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        p <span class="token operator">=</span> self<span class="token punctuation">.</span>head

        <span class="token keyword">while</span> p <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
            p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">next</span>


linkedList <span class="token operator">=</span> LinkedList<span class="token punctuation">(</span><span class="token punctuation">)</span>
linkedList<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
linkedList<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
linkedList<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
linkedList<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
linkedList<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
linkedList<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
linkedList<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="数组-vs-链表" tabindex="-1"><a class="header-anchor" href="#数组-vs-链表" aria-hidden="true">#</a> 数组 VS 链表</h3><table><thead><tr><th style="text-align:center;">数据结构</th><th style="text-align:center;">查找</th><th style="text-align:center;">更新</th><th style="text-align:center;">插入</th><th style="text-align:center;">删除</th></tr></thead><tbody><tr><td style="text-align:center;">数组</td><td style="text-align:center;">O(1)</td><td style="text-align:center;">O(1)</td><td style="text-align:center;">O(n)</td><td style="text-align:center;">O(n)</td></tr><tr><td style="text-align:center;">链表</td><td style="text-align:center;">O(n)</td><td style="text-align:center;">O(1)</td><td style="text-align:center;">O(1)</td><td style="text-align:center;">O(1)</td></tr></tbody></table><p>从表格可以看出，数组的优势在于能够快速定位元素，对于读操作多、写操作少的场景来说，用数组更合适一些。</p><p>相反地，链表的优势在于能够灵活地进行插入和删除操作，如果需要频繁插入、删除元素，用链表更合适一些。</p><h2 id="栈和队列" tabindex="-1"><a class="header-anchor" href="#栈和队列" aria-hidden="true">#</a> 栈和队列</h2><h3 id="物理结构和逻辑结构" tabindex="-1"><a class="header-anchor" href="#物理结构和逻辑结构" aria-hidden="true">#</a> 物理结构和逻辑结构</h3><p><strong>物理结构</strong> 都是内存中实实在在的存储结构。而 <strong>逻辑结构</strong> 是抽象的概念，它依赖于物理结构而存在。</p><p>数组和链表可以被看作数据存储的 <strong>物理结构。</strong></p><ul><li><p><strong>逻辑结构</strong></p><ul><li><strong>线性结构</strong>：顺序表、栈、队列</li><li><strong>非线性结构</strong>：树、图</li></ul></li><li><p><strong>物理结构</strong></p><ul><li><strong>顺序存储结构</strong>：数组</li><li><strong>链式存储结构</strong>：链表</li></ul></li></ul><h3 id="栈" tabindex="-1"><a class="header-anchor" href="#栈" aria-hidden="true">#</a> 栈</h3><p><strong>栈（stack）</strong> 是一种线性数据结构，栈中的元素只能 <strong>先入后出</strong>（First In Last Out，简称 <code>FILO</code>）。最早进入的元素存放的位置叫作 <strong>栈底（bottom）</strong>，最后进入的元素存放的位置叫作 <strong>栈顶（top）。</strong></p><details class="hint-container details"><summary>生活中的例子</summary><p>假如有一个又细又长的圆筒，圆筒一端封闭，另一端开口。往圆筒里放入乒乓球，先放入的靠近圆筒底部，后放入的靠近圆筒入口</p><p>那么，要想取出这些乒乓球，则只能按照和放入顺序相反的顺序来取，先取出后放入的，再取出先放入的，而不可能把最里面最先放入的乒乓球优先取出</p></details><p>栈这种数据结构既可以用数组来实现，也可以用链表来实现。</p><p><strong>栈的数组实现如下：</strong></p><figure><img src="`+l+'" alt="stack_array" tabindex="0" loading="lazy"><figcaption>stack_array</figcaption></figure><p><strong>栈的链表实现如下：</strong></p><figure><img src="'+u+'" alt="stack_linked" tabindex="0" loading="lazy"><figcaption>stack_linked</figcaption></figure><p><strong>栈的基本操作：</strong></p><ol><li><p>入栈</p><p><strong>入栈（push）</strong> 操作就是把新元素放入栈中，只允许从栈顶一侧放入元素，新元素的位置将会成为新的栈顶。</p></li><li><p>出栈</p><p><strong>出栈（pop）</strong> 操作就是把元素从栈中弹出，只有栈顶元素才允许出栈，出栈元素的前一个元素将会成为新的栈顶。</p></li></ol><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>在 Python 语言中，列表很好地实现了栈的功能，<code>append</code> 方法相当于入栈，<code>pop</code> 方法相当于出栈</p><p>入栈和出栈只会影响最后一个元素，不涉及其他元素的整体移动，所以无论是以数组还是以链表实现，入栈、出栈的时间复杂度都是 <code>O(1)</code></p></div><h3 id="队列" tabindex="-1"><a class="header-anchor" href="#队列" aria-hidden="true">#</a> 队列</h3><p><strong>队列（queue）</strong> 是一种线性数据结构。不同于栈的 <strong>先入后出</strong>，队列中的元素只能 <strong>先入先出</strong>（First In First Out，简称 <code>FIFO</code>）。队列的出口端叫作 <strong>队头（front）</strong>，队列的入口端叫作 <strong>队尾（rear）。</strong></p><details class="hint-container details"><summary>生活中的例子</summary><p>假如公路上有一条单行隧道，所有通过隧道的车辆只允许从隧道入口驶入，从隧道出口驶出，不允许逆行</p><p>因此，要想让车辆驶出隧道，只能按照它们驶入隧道的顺序，先驶入的车辆先驶出，后驶入的车辆后驶出，任何车辆都无法跳过它前面的车辆提前驶出</p></details><p>与栈类似，队列这种数据结构既可以用数组来实现，也可以用链表来实现。</p><p><strong>队列的数组实现如下：</strong></p><figure><img src="'+r+'" alt="queue_array" tabindex="0" loading="lazy"><figcaption>queue_array</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>用数组实现时，为了入队操作的方便，把队尾位置规定为最后入队元素的下一个位置</p></div><p><strong>队列的链表实现如下：</strong></p><figure><img src="'+d+`" alt="queue_linked" tabindex="0" loading="lazy"><figcaption>queue_linked</figcaption></figure><p><strong>队列的基本操作：</strong></p><ol><li><p>入队</p><p>把新元素放入队列中，只允许在队尾的位置放入元素，新元素的下一个位置将会成为新的队尾。</p></li><li><p>出队</p><p>把元素移出队列，只允许在队头一侧移出元素，出队元素的后一个元素将会成为新的队头。</p></li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>像这样不断出队，队头左边的空间失去作用，队列的容量越来越小。用数组实现的队列可以采用 <strong>循环队列</strong> 的方式来维持队列容量的恒定</p></div><p>在数组不做扩容的前提下，可以利用已出队元素留下的空间，让队尾指针重新指回数组的首位。</p><p>这样一来，整个队列的元素就 “循环” 起来了。在物理存储上，队尾的位置也可以在队头之前。当再有元素入队时，将其放入数组的首位，队尾指针继续后移即可。一直到 <strong>（队尾下标 + 1）% 数组长度 = 队头下标时</strong>，代表此队列真的已经满了。需要注意的是，队尾指针指向的位置永远空出 <code>1</code> 位，所以队列最大容量比数组长度小 <code>1</code>。</p><p>为了更好地理解队列的工作方式，实现一段代码：</p><details class="hint-container details"><summary>代码</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyQueue</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span> <span class="token operator">*</span> capacity
        self<span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token number">0</span>
    
    <span class="token keyword">def</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>front<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&#39;队列已满！&#39;</span><span class="token punctuation">)</span>
        
        self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> element
        self<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">dequeue</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>rear <span class="token operator">==</span> self<span class="token punctuation">.</span>front<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&#39;队列已满！&#39;</span><span class="token punctuation">)</span>
        
        dequeue_element <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>front<span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> dequeue_element
    
    <span class="token keyword">def</span> <span class="token function">output</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        i <span class="token operator">=</span> self<span class="token punctuation">.</span>front

        <span class="token keyword">while</span> i <span class="token operator">!=</span> self<span class="token punctuation">.</span>rear<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">)</span>


myQueue <span class="token operator">=</span> MyQueue<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
myQueue<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
myQueue<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
myQueue<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
myQueue<span class="token punctuation">.</span>dequeue<span class="token punctuation">(</span><span class="token punctuation">)</span>
myQueue<span class="token punctuation">.</span>dequeue<span class="token punctuation">(</span><span class="token punctuation">)</span>
myQueue<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
myQueue<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
myQueue<span class="token punctuation">.</span>output<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>循环队列不但充分利用了数组的空间，还避免了数组元素整体移动。入队和出队的时间复杂度是 <strong>O(1)</strong></p></div><h3 id="栈和队列的应用" tabindex="-1"><a class="header-anchor" href="#栈和队列的应用" aria-hidden="true">#</a> 栈和队列的应用</h3><ol><li><p>栈的应用</p><p>栈的输出顺序和输入顺序相反，所以栈通常用于对 “历史” 的 <strong>回溯</strong>，也就是逆流而上追溯 “历史”。</p><p>例如：实现递归的逻辑，就可以用栈来代替，因为栈可以回溯方法的调用链。</p><p>栈还有一个著名的应用场景是面包屑导航，使用户在浏览页面时可以轻松地回溯到上一级或更上一级页面。</p></li><li><p>队列的应用</p><p>队列的输出顺序和输入顺序相同，所以队列通常用于对 “历史” 的 <strong>回放</strong>，也就是按照 “历史” 顺序，把 “历史” 重演一遍。</p><p>例如：在多线程中，争夺公平锁的等待队列，就是按照访问顺序来决定线程在队列中的次序的。</p><p>再如网络爬虫实现网站抓取时，也是把待抓取的网站 URL 存入队列中，再按照存入队列的顺序来依次抓取和解析的。</p></li><li><p>双端队列</p><p>把栈和队列的特点结合起来，既可以先入先出，也可以先入后出。这种数据结构叫作 <strong>双端队列（deque）。</strong></p><figure><img src="`+k+'" alt="deque" tabindex="0" loading="lazy"><figcaption>deque</figcaption></figure><p>双端队列这种数据结构，综合了栈和队列的优点，对双端队列来说，从队头一端可以入队或出队，从队尾一端也可以入队或出队。</p></li><li><p>优先队列</p><p>还有一种队列，它遵循的不是先入先出，而是谁的优先级最高，谁先出队。这种队列叫作 <strong>优先队列。</strong></p><figure><img src="'+v+'" alt="priority_queue" tabindex="0" loading="lazy"><figcaption>priority_queue</figcaption></figure><p>优先队列已经不属于线性数据结构的范畴了，它是基于二叉堆来实现的。</p></li></ol><h2 id="神奇的哈希表" tabindex="-1"><a class="header-anchor" href="#神奇的哈希表" aria-hidden="true">#</a> 神奇的哈希表</h2><h3 id="为什么需要哈希表" tabindex="-1"><a class="header-anchor" href="#为什么需要哈希表" aria-hidden="true">#</a> 为什么需要哈希表</h3><p>例如：开发一个学生管理系统，需要有通过输入学号快速查出对应学生的姓名的功能。这里不必每次都去查询数据库，而可以在内存中建立一个缓存表，这样做可以提高查询效率。</p><table><thead><tr><th style="text-align:center;">学号</th><th style="text-align:center;">姓名</th></tr></thead><tbody><tr><td style="text-align:center;">001121</td><td style="text-align:center;">张三</td></tr><tr><td style="text-align:center;">002123</td><td style="text-align:center;">李四</td></tr><tr><td style="text-align:center;">002931</td><td style="text-align:center;">王五</td></tr><tr><td style="text-align:center;">003278</td><td style="text-align:center;">赵六</td></tr></tbody></table><p>例如：想统计一本英文书里某些单词出现的频率，就需要遍历整本书的内容，把这些单词出现的次数记录在内存中。</p><table><thead><tr><th style="text-align:center;">单词</th><th style="text-align:center;">出现次数</th></tr></thead><tbody><tr><td style="text-align:center;">this</td><td style="text-align:center;">108</td></tr><tr><td style="text-align:center;">and</td><td style="text-align:center;">56</td></tr><tr><td style="text-align:center;">are</td><td style="text-align:center;">79</td></tr><tr><td style="text-align:center;">by</td><td style="text-align:center;">46</td></tr></tbody></table><p>因为这些需求，一个重要的数据结构诞生了，这个数据结构叫作 <strong>哈希表。</strong></p><p>哈希表（hash table）也叫作 <strong>散列表</strong>，这种数据结构提供了 <strong>键（Key）</strong> 和 <strong>值（Value）</strong> 的映射关系。只要给出一个 <code>Key</code>，就可以高效查找到它所匹配的 <code>Value</code>，时间复杂度接近于 <strong>O(1)。</strong></p><table><thead><tr><th style="text-align:center;">Key</th><th style="text-align:center;">Value</th></tr></thead><tbody><tr><td style="text-align:center;">Key1</td><td style="text-align:center;">Value1</td></tr><tr><td style="text-align:center;">Key2</td><td style="text-align:center;">Value2</td></tr><tr><td style="text-align:center;">Key3</td><td style="text-align:center;">Value3</td></tr><tr><td style="text-align:center;">Key4</td><td style="text-align:center;">Value4</td></tr></tbody></table><h3 id="哈希函数" tabindex="-1"><a class="header-anchor" href="#哈希函数" aria-hidden="true">#</a> 哈希函数</h3><p>在上面几个数据结构中，<strong>数组</strong> 的查询效率最高，数组可以根据下标进行元素的随机访问。哈希表在本质上也是一个数组，但哈希表在查询的时候需要一个 <strong>中转站</strong>，通过某种方式，把 <strong>Key</strong> 和 <strong>数组下标</strong> 进行转换。这个中转站就叫做 <strong>哈希函数。</strong></p><p>在不同的语言中，哈希函数的实现方式是不一样的，在 Python 语言中，哈希表对应的集合叫作 <strong>字典（dict）。</strong></p><p>在 Python 及大多数面向对象的语言中，每一个对象都有属于自己的 hash 值，这个 hash 值是区分不同对象的重要标识。无论对象自身的类型是什么，它们的 hash 值都是一个整型变量。</p><p>既然都是整型变量，想要转化成数组的下标也就不难实现了，可以按照数组长度进行取模运算。</p><p><code>index = hash(key) % size</code></p><p>实际上，Python 中的哈希函数并没有直接采用取模运算，而是利用了位运算的方式来优化性能。不过在这里可以姑且把它简单理解成取模操作。通过哈希函数，可以把字符串或其他类型的 Key，转化成数组的下标 index。</p><p>例如：给出一个长度为 <code>8</code> 的数组，则当 <code>key = 001121</code> 时，<code>index = hash(&quot;001121&quot;) % size=1420036703 % 8 = 7</code>；而当 <code>key = &quot;this&quot;</code> 时，<code>index = hash(&quot;this&quot;) % size=3559070 % 8 = 6</code>。</p><h3 id="哈希表的读写操作" tabindex="-1"><a class="header-anchor" href="#哈希表的读写操作" aria-hidden="true">#</a> 哈希表的读写操作</h3><ol><li><p>写操作</p><p><strong>写（put）</strong> 操作就是在哈希表中插入新的键值对（也被称为 <code>Entry</code>）。</p><p>例如：调用 <code>dict[&quot;002931&quot;] = &quot;王五&quot;</code>，意思是插入一组 <code>Key</code> 为 <strong>002931</strong>，<code>Value</code> 为 <strong>王五</strong> 的键值对。</p><p>第 1 步，通过哈希函数，把 <code>Key</code> 转化成数组下标 <code>5</code>。第 2 步，如果数组下标 <code>5</code> 对应的位置没有元素，就把这个 <code>Entry</code> 填充到数组下标 <code>5</code> 的位置。</p><p>但是，由于数组的长度是有限的，当插入的 <code>Entry</code> 越来越多时，不同的 <code>Key</code> 通过哈希函数获得的下标有可能是相同的。例如：<code>002936</code> 这个 <code>Key</code> 对应的数组下标是 <code>2</code>；<code>002947</code> 这个 <code>Key</code> 对应的数组下标也是<code>2</code>。这种情况，就叫作 <strong>哈希冲突。</strong></p><p>哈希冲突是无法避免的。解决哈希冲突的方法主要有两种：</p><ul><li><strong>开放寻址法</strong>：当一个 <code>Key</code> 通过哈希函数获得对应的数组下标已被占用时，可以 “另谋高就”，寻找下一个空当位置</li><li><strong>链表法</strong>：哈希表数组的每一个元素不仅是一个 <code>Entry</code> 对象，还是一个 <strong>链表的头节点</strong>。每一个 <code>Entry</code> 对象通过 <code>next</code> 指针指向它的下一个 <code>Entry</code> 节点。当新来的 <code>Entry</code> 映射到与之冲突的数组位置时，只需要插入对应的链表中即可</li></ul></li><li><p>读操作</p><p><strong>读（get）</strong> 操作就是通过给定的 <code>Key</code>，在哈希表中查找对应的 <code>Value</code>。</p><p>例如：调用 <code>dict[&quot;002936&quot;]</code>，意思是查找 <code>Key</code> 为 <code>002936</code> 的 <code>Entry</code> 在哈希表中所对应的值。</p><p>第 1 步，通过哈希函数，把 <code>Key</code> 转化成数组下标 <code>2</code>。第 2 步，找到数组下标 <code>2</code> 所对应的元素，如果这个元素的 <code>Key</code> 是 <code>002936</code>，那么就找到了；如果这个 <code>Key</code> 不是 <code>002936</code> 也没关系，由于数组的每个元素都与一个链表对应，可以顺着链表慢慢往下找，看看能否找到与 <code>Key</code> 相匹配的节点。</p></li></ol>',102),g=[b];function y(f,h){return s(),a("div",null,g)}const w=n(m,[["render",y],["__file","data_structure_base.html.vue"]]);export{w as default};
