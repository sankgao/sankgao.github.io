import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as u,o as l,c as o,b as n,F as v,h as m,e,d as a,f as t,t as i}from"./app-1VwwuWsd.js";const k=t(`<h2 id="v-for" tabindex="-1"><a class="header-anchor" href="#v-for" aria-hidden="true">#</a> v-for</h2><p>可以使用 <code>v-for</code> 指令基于一个数组来渲染一个列表。<code>v-for</code> 指令的值需要使用 <code>item in items</code> 形式的特殊语法，其中 <code>items</code> 是源数据的数组，而 <code>item</code> 是迭代项的 <strong>别名</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Foo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Bar&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;li v-for=&quot;item in items&quot;&gt;
  {{ item.message }}
&lt;/li&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>v-for</code> 块中可以完整地访问父作用域内的属性和变量。<code>v-for</code> 也支持使用可选的第二个参数表示当前项的位置索引。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> parentMessage <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;Parent&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Foo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Bar&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;li v-for=&quot;(item, index) in items&quot;&gt;
  {{ parentMessage }} - {{ index }} - {{ item.message }}
&lt;/li&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),g={class:"demo"},b={href:"https://play.vuejs.org/#eNpdTsuqwjAQ/ZVDNlFQu5d64bpwJ7g3LopOJdAmIRlFCPl3p60PcDWcM+eV1X8Iq/uN1FrV6RxtYCTiW/gzzvbBR0ZGpBYFbfQ9tEi1ccadvUuM0ERyvKeUmithMyhn+jCSev4WWaY+vZ7HjH5Sr6F33muUhTR8uW0ThTuJua6mPbJEgGSErmEaENedxX3Z+rgxajbEL2DdhR5zOVOdUSIEDOf8M7IULCHsaPgiMa1eK4QcS6rOSkhdfapVeQLQEWnH",target:"_blank",rel:"noopener noreferrer"},h=t(`<p><code>v-for</code> 变量的作用域和下面的 JavaScript 代码很类似：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> parentMessage <span class="token operator">=</span> <span class="token string">&#39;Parent&#39;</span>
<span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">]</span>

items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 可以访问外层的 parentMessage</span>
  <span class="token comment">// 而 item 和 index 只在这个作用域可用</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parentMessage<span class="token punctuation">,</span> item<span class="token punctuation">.</span>message<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 <code>v-for</code> 是如何对应 <code>forEach</code> 回调的函数签名的。实际上，您也可以在定义 <code>v-for</code> 的变量别名时使用解构，和解构函数参数类似：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;li v-for=&quot;{ message } in items&quot;&gt;
  {{ message }}
&lt;/li&gt;

&lt;!-- 有 index 索引时 --&gt;
&lt;li v-for=&quot;({ message }, index) in items&quot;&gt;
  {{ message }} {{ index }}
&lt;/li&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于多层嵌套的 <code>v-for</code>，作用域的工作方式和函数的作用域很类似。每个 <code>v-for</code> 作用域都可以访问到父级作用域：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;li v-for=&quot;item in items&quot;&gt;
  &lt;span v-for=&quot;childItem in item.children&quot;&gt;
    {{ item.message }} {{ childItem }}
  &lt;/span&gt;
&lt;/li&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您也可以使用 <code>of</code> 作为分隔符来替代 <code>in</code>，这更接近 JavaScript 的迭代器语法：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;div v-for=&quot;item of items&quot;&gt;&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="v-for-与对象" tabindex="-1"><a class="header-anchor" href="#v-for-与对象" aria-hidden="true">#</a> v-for 与对象</h2><p>您也可以使用 <code>v-for</code> 来遍历一个对象的所有属性。遍历的顺序会基于对该对象调用 <code>Object.keys()</code> 的返回值来决定。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myObject <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;How to do lists in Vue&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token string">&#39;Jane Doe&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">publishedAt</span><span class="token operator">:</span> <span class="token string">&#39;2016-04-10&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;ul&gt;
  &lt;li v-for=&quot;value in myObject&quot;&gt;
    {{ value }}
  &lt;/li&gt;
&lt;/ul&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过提供第二个参数表示属性名（例如：key）：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;li v-for=&quot;(value, key) in myObject&quot;&gt;
  {{ key }}: {{ value }}
&lt;/li&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三个参数表示位置索引：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;li v-for=&quot;(value, key, index) in myObject&quot;&gt;
  {{ index }}. {{ key }}: {{ value }}
&lt;/li&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),f={href:"https://play.vuejs.org/#eNo9jjFvgzAQhf/KE0sSCQKpqg7IqRSpQ9WlWycvBC6KW2NbcKaNEP+9B7Tx4nt33917Y3IKYT9ESspE9XVnAqMnjuFZO9MG3zFGdFTVbAbChEvnW2yE32inXe1dz2hv7+dPqhnHO7kdtQPYsKUSm1f/DfZoPKzpuYdx+JAL6cxUka++E+itcoQX/9cO8SzslZoTy+yhODxlxWN2KMR22mmn8jWrpBTB1AZbMc2KVbTyQ56yBkN28d1RJ9uhspFSfNEtFf+GfnZzjP/oOll2NQPjuM4xTftZyIaU5VwuN0SsqMqtWZxUvliq/J4jmX4BTCp08A==",target:"_blank",rel:"noopener noreferrer"},x=t(`<h2 id="在-v-for-里使用范围值" tabindex="-1"><a class="header-anchor" href="#在-v-for-里使用范围值" aria-hidden="true">#</a> 在 v-for 里使用范围值</h2><p><code>v-for</code> 可以直接接受一个整数值。在这种用例中，会将该模板基于 <code>1...n</code> 的取值范围重复多次。</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;span v-for=&quot;n in 10&quot;&gt;{{ n }}&lt;/span&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>此处 <code>n</code> 的初值是从 <code>1</code> 开始而非 <code>0</code></p></div><h2 id="template-上的-v-for" tabindex="-1"><a class="header-anchor" href="#template-上的-v-for" aria-hidden="true">#</a> &lt;template&gt; 上的 v-for</h2><p>与模板上的 <code>v-if</code> 类似，您也可以在 <code>&lt;template&gt;</code> 标签上使用 <code>v-for</code> 来渲染一个包含多个元素的块。例如：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;ul&gt;
  &lt;template v-for=&quot;item in items&quot;&gt;
    &lt;li&gt;{{ item.msg }}&lt;/li&gt;
    &lt;li class=&quot;divider&quot; role=&quot;presentation&quot;&gt;&lt;/li&gt;
  &lt;/template&gt;
&lt;/ul&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="v-for-与-v-if" tabindex="-1"><a class="header-anchor" href="#v-for-与-v-if" aria-hidden="true">#</a> v-for 与 v-if</h2>`,8),y={class:"hint-container warning"},q=n("p",{class:"hint-container-title"},"注意",-1),_=n("code",null,"v-if",-1),j=n("code",null,"v-for",-1),E=n("strong",null,"不推荐的",-1),w={href:"https://cn.vuejs.org/style-guide/rules-essential.html#avoid-v-if-with-v-for",target:"_blank",rel:"noopener noreferrer"},M=t(`<p>当它们同时存在于一个节点上时，<code>v-if</code> 比 <code>v-for</code> 的优先级更高。这意味着 <code>v-if</code> 的条件将无法访问到 <code>v-for</code> 作用域内定义的变量别名：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;!--
 这会抛出一个错误，因为属性 todo 此时
 没有在该实例上定义
--&gt;
&lt;li v-for=&quot;todo in todos&quot; v-if=&quot;!todo.isComplete&quot;&gt;
  {{ todo.name }}
&lt;/li&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在外新包装一层 <code>&lt;template&gt;</code> 再在其上使用 <code>v-for</code> 可以解决这个问题（这也更加明显易读——）：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;template v-for=&quot;todo in todos&quot;&gt;
  &lt;li v-if=&quot;!todo.isComplete&quot;&gt;
    {{ todo.name }}
  &lt;/li&gt;
&lt;/template&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="通过-key-管理状态" tabindex="-1"><a class="header-anchor" href="#通过-key-管理状态" aria-hidden="true">#</a> 通过 key 管理状态</h2><p>Vue 默认按照 “就地更新” 的策略来更新通过 <code>v-for</code> 渲染的元素列表。当数据项的顺序改变时，Vue 不会随之移动 DOM 元素的顺序，而是就地更新每个元素，确保它们在原本指定的索引位置上渲染。</p><p>默认模式是高效的，但 <strong>只适用于列表渲染输出的结果不依赖子组件状态或者临时 DOM 状态（例如：表单输入值）的情况。</strong></p><p>为了给 Vue 一个提示，以便它可以跟踪每个节点的标识，从而重用和重新排序现有的元素，您需要为每个元素对应的块提供一个唯一的 <code>key</code> attribute：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;div v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;
  &lt;!-- 内容 --&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当您使用 <code>&lt;template v-for&gt;</code> 时，<code>key</code> 应该被放置在这个 <code>&lt;template&gt;</code> 容器上：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;template v-for=&quot;todo in todos&quot; :key=&quot;todo.name&quot;&gt;
  &lt;li&gt;{{ todo.name }}&lt;/li&gt;
&lt;/template&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>key</code> 在这里是一个通过 <code>v-bind</code> 绑定的特殊 attribute。请不要和 <a href="#v-for-%E4%B8%8E%E5%AF%B9%E8%B1%A1">在 <code>v-for</code> 中使用对象</a> 里所提到的对象属性名相混淆</p></div>`,12),V={href:"https://cn.vuejs.org/style-guide/rules-essential.html#use-keyed-v-for",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"v-for",-1),B=n("code",null,"key",-1),S=n("code",null,"key",-1),D=n("code",null,"v-for",-1),N=n("code",null,"key",-1),T={href:"https://cn.vuejs.org/api/built-in-special-attributes.html#key",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"key",-1),Q=t(`<h2 id="组件上使用-v-for" tabindex="-1"><a class="header-anchor" href="#组件上使用-v-for" aria-hidden="true">#</a> 组件上使用 v-for</h2><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>这一小节假设您已了解 <a href="">组件</a> 的相关知识，或者您也可以先跳过这里，之后再回来看</p></div><p>直接在组件上使用 <code>v-for</code> 和在一般的元素上使用没有区别（别忘记提供一个 <code>key</code>）：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;MyComponent v-for=&quot;item in items&quot; :key=&quot;item.id&quot; /&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是，这不会自动将任何数据传递给组件，因为组件有自己独立的作用域。为了将迭代后的数据传递到组件中，还需要传递 props：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;MyComponent
  v-for=&quot;(item, index) in items&quot;
  :item=&quot;item&quot;
  :index=&quot;index&quot;
  :key=&quot;item.id&quot;
/&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不自动将 <code>item</code> 注入组件的原因是，这会使组件与 <code>v-for</code> 的工作方式紧密耦合。明确其数据的来源可以使组件在其他情况下重用。</p>`,7),Z={href:"https://play.vuejs.org/#eNp1U8Fu2zAM/RXCGGAHTWx02ylwgxZYB+ywYRhyq3dwLGYRYkuCJTsZjPz7KMmK3ay9JBQfH/meKA/Rk1Jp32G0jnJdtVwZ0Gg6tSkEb5RsDQzQ4h4usG9lAzGVxldoK5n8ZrAZsTQLCduRygAKUUmhDQg8WWyLZwMPtmESx4sAGkL0mH6xrMH+AHC2hvuljw03Na4h/iLBHBAY1wfUbsTFVcwoH28o2/KIIDuaQ0TTlvrwNu/TDe+7PDlKXZ6EZxTiN4kuRI3W0dk4u4yUf7bZfScqw6WAkrEf3m+y8AOcw7Qv6w5T1elDMhs7Nbq7e61gdmme60SQAvgfIhExiSSJeeb3SBukAy1D1aVBezL5XrYN9Csp1rrbNdykqsUehXkookl0EVGxlZHX5Q5rIBLhNHFlbRD6xBiUzlOeuZJQz4XqjI+BxjSSYe2pQWwRBZizV01DmsRWeJA1Qzv0Of2TwldE5hZRlVd+FkbuOmOksJLybIwtkmfWqg+7qz47asXpSiaN3lxikSVwwfC8oD+/sEnV+oh/qcxmU85mebepgLjDBD622Mg+oDrVquYVJm7IEu4XoXKTZ1dho3gnmdJhedEymn9ab3ysDPdc4M9WKp28xE5JbB+rzz/Trm3eK3LAu8/E7p2PNzYM/i3ChR7W7L7hsSIvR7L2Aal1EhqTp80vF95sw3WcG7r8A0XaeME=",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"v-for",-1),F=t(`<h2 id="数组变化侦测" tabindex="-1"><a class="header-anchor" href="#数组变化侦测" aria-hidden="true">#</a> 数组变化侦测</h2><h3 id="变更方法" tabindex="-1"><a class="header-anchor" href="#变更方法" aria-hidden="true">#</a> 变更方法</h3><p>Vue 能够侦听响应式数组的变更方法，并在它们被调用时触发相关的更新。这些变更方法包括：</p><ul><li><code>push()</code></li><li><code>pop()</code></li><li><code>shift()</code></li><li><code>unshift()</code></li><li><code>splice()</code></li><li><code>sort()</code></li><li><code>reverse()</code></li></ul><h3 id="替换一个数组" tabindex="-1"><a class="header-anchor" href="#替换一个数组" aria-hidden="true">#</a> 替换一个数组</h3><p>变更方法，顾名思义，就是会对调用它们的原数组进行变更。相对地，也有一些不可变（immutable）方法，例如：<code>filter()</code>，<code>concat()</code> 和 <code>slice()</code>，这些都不会更改原数组，而总是 <strong>返回一个新数组</strong>。当遇到的是非变更方法时，需要将旧的数组替换为新的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// \`items\` 是一个数组的 ref</span>
items<span class="token punctuation">.</span>value <span class="token operator">=</span> items<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Foo</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>您可能认为这将导致 Vue 丢弃现有的 DOM 并重新渲染整个列表——幸运的是，情况并非如此。Vue 实现了一些巧妙的方法来最大化对 DOM 元素的重用，因此用另一个包含部分重叠对象的数组来做替换，仍会是一种非常高效的操作。</p><h2 id="展示过滤或排序后的结果" tabindex="-1"><a class="header-anchor" href="#展示过滤或排序后的结果" aria-hidden="true">#</a> 展示过滤或排序后的结果</h2><p>有时，希望显示数组经过过滤或排序后的内容，而不实际变更或重置原始数据。在这种情况下，您可以创建返回已过滤或已排序数组的计算属性。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> evenNumbers <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> numbers<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;li v-for=&quot;n in evenNumbers&quot;&gt;{{ n }}&lt;/li&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在计算属性不可行的情况下（例如：在多层嵌套的 <code>v-for</code> 循环中），您可以使用以下方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> sets <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">even</span><span class="token punctuation">(</span><span class="token parameter">numbers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> numbers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;ul v-for=&quot;numbers in sets&quot;&gt;
  &lt;li v-for=&quot;n in even(numbers)&quot;&gt;{{ n }}&lt;/li&gt;
&lt;/ul&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在计算属性中使用 <code>reverse()</code> 和 <code>sort()</code> 的该时候务必小心！这两个方法将变更原始数组，计算函数中不应这么做。请在调用这些方法之前创建一个原数组的副本：</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> return numbers.reverse()
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> return [...numbers].reverse()
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,18),z="Parent",R={__name:"list.html",setup(I){const p=[{message:"Foo"},{message:"Bar"}];return(J,K)=>{const s=u("ExternalLinkIcon");return l(),o("div",null,[k,n("div",g,[(l(),o(v,null,m(p,(c,d)=>n("li",null,i(z)+" - "+i(d)+" - "+i(c.message),1)),64))]),n("p",null,[n("a",b,[e("在演练场中尝试一下"),a(s)])]),h,n("p",null,[n("a",f,[e("在演练场中尝试一下"),a(s)])]),x,n("div",y,[q,n("p",null,[e("同时使用 "),_,e(" 和 "),j,e(" 是 "),E,e("，因为这样二者的优先级不明显。请转阅 "),n("a",w,[e("风格指南"),a(s)]),e(" 查看更多细节")])]),M,n("p",null,[n("a",V,[e("推荐"),a(s)]),e(" 在任何可行的时候为 "),A,e(" 提供一个 "),B,e(" attribute，除非所迭代的 DOM 内容非常简单（例如：不包含组件或有状态的 DOM 元素），或者您想有意采用默认行为来提高性能。")]),n("p",null,[S,e(" 绑定的值期望是一个基础类型的值，例如：字符串或 number 类型。不要用对象作为 "),D,e(" 的 key。关于 "),N,e(" attribute 的更多用途细节，请参阅 "),n("a",T,[O,e(" API 文档"),a(s)]),e("。")]),Q,n("p",null,[e("这里是一个简单的 "),n("a",Z,[e("Todo List 的例子"),a(s)]),e("，展示了如何通过 "),W,e(" 来渲染一个组件列表，并向每个实例中传入不同的数据。")]),F])}}},P=r(R,[["__file","list.html.vue"]]);export{P as default};
