import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as e}from"./app-LkOcdYc0.js";const o={},c=e(`<p>C 程序示例文件：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>  <span class="token comment">/* 一个简单的 C 程序 */</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>  <span class="token comment">/* 定义一个名为 num 的变量 */</span>
    num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">/* 为 num 赋一个值 */</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;I am a simple &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* 使用 printf() 函数 */</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;computer.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;My favorite number is %d because it is first.\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="标准库-头文件" tabindex="-1"><a class="header-anchor" href="#标准库-头文件" aria-hidden="true">#</a> 标准库，头文件</h2><p>程序需要用到的功能，不一定需要自己编写，C 语言可能已经自带了。程序员只要去调用这些自带的功能，就省得自己编写代码了。</p><p>C 语言自带的所有这些功能，统称为 <strong>标准库</strong>（<code>standard library</code>），因为它们是写入标准的，到底包括哪些功能，应该怎么使用的，都是规定好的，这样才能保证代码的规范和可移植。</p><p>不同的功能定义在不同的文件里面，这些文件统称为 <strong>头文件</strong>（<code>header file</code>）。如果系统自带某一个功能，就一定还会自带描述这个功能的头文件，比如：<code>printf()</code> 的头文件就是系统自带的 <code>stdio.h</code>。头文件的后缀通常是 <code>.h</code>。</p><p>如果要使用某个功能，就必须先加载对应的头文件，加载使用的是 <code>#include</code> 命令。加载头文件的 <code>#include</code> 语句不需要分号结尾。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>#include &lt;stdio.h&gt;</code> 的作用相当于把 <code>stdio.h</code> 文件中的所有内容都输入该行所在的位置。实际上，这是一种 “拷贝-粘贴” 的操作。</p><p><code>#include</code> 这行代码是一条 C <strong>预处理器指令</strong>（<code>preprocessor directive</code>）。通常，C 编译器在编译前会对源代码做一些准备工作，即 <strong>预处理</strong>（<code>preprocessing</code>）。</p><p><code>stdio.h</code> 文件中包含了供编译器使用的输入和输出函数（如：<code>printf()</code>）信息。该文件名的含义是 <strong>标准输入/输出头文件</strong>。通常，在 C 程序顶部的信息集合被称为 <strong>头文件。</strong></p><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>C 程序一定从 <code>main()</code> 函数开始执行（目前不必考虑例外的情况）。除了 <code>main()</code> 函数，你可以任意命名其他函数，而且 <code>main()</code> 函数必须是开始的函数。圆括号用于识别 <code>main()</code> 是一个函数。</p><p><code>int</code> 是 <code>main()</code> 函数的返回类型。这表明 <code>main()</code> 函数返回的值是整数，并返回给操作系统。</p><p>通常，函数名后面的圆括号中包含一些传入函数的信息。该例中没有传递任何信息。因此，圆括号内是单词 <code>void</code>。</p><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h2><p>注释是对代码的说明，编译器会忽略注释。</p><p>注释有两种表示方法：</p><ul><li><p><code>/* 注释内容 */</code></p><p>将注释内容放在 <code>/* */</code> 之间，内部可以分行。这种注释可以插在行内，跟在它后面的代码依然会有效执行。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* 注释内容 */</span>

<span class="token comment">/* 一行注释内容
    另一行注释内容
*/</span>

<span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">/* i = 1; */</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>// 注释内容</code></p><p>将注释内容放在 <code>//</code> 之后，这种注释只能是单行，可以放在行首，也可以放在一行语句的结尾。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 注释内容</span>
<span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token comment">// 注释内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="语句块" tabindex="-1"><a class="header-anchor" href="#语句块" aria-hidden="true">#</a> 语句块</h2><p>使用一对大括号 <code>{}</code> 将多个语句组成一个块，也称为复合语句（<code>compounded statement</code>）。大括号的结尾不需要添加分号。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">{</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>  <span class="token comment">/* 定义一个名为 num 的变量 */</span>
    num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">/* 为 num 赋一个值 */</span>
    <span class="token comment">// ...省略部分内容</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="声明" tabindex="-1"><a class="header-anchor" href="#声明" aria-hidden="true">#</a> 声明</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>int num<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这行代码叫作 <strong>声明</strong>（<code>declaration</code>）。声明是 C 语言最重要的特性之一，如果事先未声明变量，C 程序将无法通过编译。</p><p>在该例中，声明完成了两件事。其一，在函数中有一个名为 <code>num</code> 的 <strong>变量</strong>（<code>variable</code>）。其二，<code>int</code> 表明 <code>num</code> 是一个整数（即，没有小数点或小数部分的数）。<code>int</code> 是一种 <strong>数据类型</strong>。编译器使用这些信息为 <code>num</code> 变量在内存中分配存储空间。<strong>分号</strong> 在 C 语言中是大部分语句和声明的一部分，不像在 <code>Pascal</code> 中只是语句间的分隔符。</p><p><code>int</code> 是 C 语言的一个 <strong>关键字</strong>（<code>keyword</code>），表示一种基本的 C 语言数据类型。关键字是语言定义的单词，不能做其他用途。例如：不能用 <code>int</code> 作为函数名和变量名。这些关键字在该语言以外不起作用。</p><p><code>num</code> 是一个 <strong>标识符</strong>（<code>identifier</code>），也就是一个变量、函数或其他实体的名称。因此，声明把特定标识符与计算机内存中的特定位置联系起来，同时也确定了存储在某位置的信息类型或数据类型。</p><p>在 C 语言中，所有变量都必须先声明才能使用。这意味着必须列出程序中用到的所有变量名及其类型。</p><ul><li><strong>数据类型</strong>：C 语言可以处理多种类型的数据，如：整数、字符和浮点数。把变量声明为整型或字符类型，计算机才能正确地存储、读取和解释数据</li><li><strong>命名</strong>：给变量命名时要使用有意义的变量名或标识符（如：程序中需要一个变量数羊，该变量名应该是 <code>sheep_count</code> 而不是 <code>x3</code>）。如果变量名无法清楚地表达自身的用途，可在注释中进一步说明。这种方法让程序的可读性更高。</li></ul><h2 id="赋值" tabindex="-1"><a class="header-anchor" href="#赋值" aria-hidden="true">#</a> 赋值</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这行代码是 <strong>赋值表达式语句</strong>。赋值是 C 语言的基本操作之一。该行代码的意思是 “把值 <code>1</code> 赋给变量 <code>num</code>”。在执行 <code>int num;</code> 声明时，编译器在计算机内存中为变量 <code>num</code> 预留了空间，然后在执行这行赋值表达式语句时，把值存储在之前预留的位置。可以给 <code>num</code> 赋不同的值，这就是 <code>num</code> 之所以被称为变量（<code>variable</code>）的原因。<strong>注意</strong>：该赋值表达式语句从右侧把值赋到左侧。</p><p>C 语言是通过赋值运算符而不是赋值语句完成赋值操作。根据 C 标准，C 语言并没有所谓的 “赋值语句”。</p><h2 id="printf" tabindex="-1"><a class="header-anchor" href="#printf" aria-hidden="true">#</a> printf()</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;I am a simple &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;computer.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;My favorite number is %d because it is first.\\n&quot;</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第 <code>1</code> 行把 <code>I am a simple</code> 传递给 <code>printf()</code> 函数。该信息被称为 <strong>参数</strong>，或者更确切地说，是函数的 <strong>实际参数</strong>（<code>actual argument</code>）。在 C 语言中，实际参数（简称 <strong>实参</strong>）是传递给函数的特定值，形式参数（简称 <strong>形参</strong>）是函数中用于存储值的变量。</p><p>第 <code>1</code> 行 <code>printf()</code> 演示了在 C 语言中如何 <strong>调用</strong> 函数。只需输入函数名，把所需的参数填入圆括号即可。当程序运行到这一行时，控制权被转给已命名的函数（该例中是 <code>printf()</code>）。函数执行结束后，控制权被返回至 <strong>主调函数</strong>（<code>calling function</code>），该例中是 <code>main()</code>。</p><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h3><p><code>printf()</code> 的作用是将参数文本输出到屏幕。<code>f</code> 代表 <code>format</code>（格式化），表示可以定制输出文本的格式。</p><p><code>printf()</code> 不会在行尾自动添加 <strong>换行符</strong>，运行结束后，光标就停留在输出结束的地方，不会自动换行。为了让光标移到下一行的开头，可以在输出文本的结尾，添加一个换行符 <code>\\n</code>。换行符是一个 <strong>转义序列</strong>（<code>escape sequence</code>）。转义序列用于代表难以表示或无法输入的字符。如：<code>\\t</code> 代表 <code>Tab</code> 键，<code>\\b</code> 代表 <code>Backspace</code> 键（退格键）。每个转义序列都以 <strong>反斜杠字符</strong>（<code>\\</code>）开始。</p><p><code>printf()</code> 是在标准库的头文件 <code>stdio.h</code> 定义的。使用这个函数之前，必须在源码文件头部引入这个头文件。</p><h3 id="占位符" tabindex="-1"><a class="header-anchor" href="#占位符" aria-hidden="true">#</a> 占位符</h3><p><code>printf()</code> 可以在输出文本中指定 <strong>占位符</strong>。所谓占位符就是这个位置可以用其他值代入。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> num<span class="token punctuation">;</span>
num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;My favorite number is %d because it is first.\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>%d</code> 就是占位符，表示这个位置要用其他值来替换。占位符的第一个字符一律为 <strong>百分号</strong>（<code>%</code>），第二个字符表示占位符的 <strong>类型。</strong></p><p>常用的占位符如下：</p><ul><li><strong>%a</strong>：十六进制浮点数，字母输出为小写</li><li><strong>%A</strong>：十六进制浮点数，字母输出为大写</li><li><strong>%c</strong>：字符</li><li><strong>%d</strong>：十进制整数</li><li><strong>%e</strong>：使用科学计数法的浮点数，指数部分的 e 为小写</li><li><strong>%E</strong>：使用科学计数法的浮点数，指数部分的 E 为大写</li><li><strong>%i</strong>：整数，基本等同于 <code>%d</code></li><li><strong>%f</strong>：小数（包含 float 类型和 double 类型）</li><li><strong>%g</strong>：6 个有效数字的浮点数。整数部分一旦超过 6 位，就会自动转为科学计数法，指数部分的 e 为小写</li><li><strong>%G</strong>：等同于 <code>%g</code>，唯一的区别是指数部分的 E 为大写</li><li><strong>%hd</strong>：十进制 short int 类型</li><li><strong>%ho</strong>：八进制 short int 类型</li><li><strong>%hx</strong>：十六进制 short int 类型</li><li><strong>%hu</strong>：unsigned short int 类型</li><li><strong>%ld</strong>：十进制 long int 类型</li><li><strong>%lo</strong>：八进制 long int 类型</li><li><strong>%lx</strong>：十六进制 long int 类型</li><li><strong>%lu</strong>：unsigned long int 类型</li><li><strong>%lld</strong>：十进制 long long int 类型</li><li><strong>%llo</strong>：八进制 long long int 类型</li><li><strong>%llx</strong>：十六进制 long long int 类型</li><li><strong>%llu</strong>：unsigned long long int 类型</li><li><strong>%Le</strong>：科学计数法表示的 long double 类型浮点数</li><li><strong>%Lf</strong>：long double 类型浮点数</li><li><strong>%n</strong>：已输出的字符串数量。该占位符本身不输出，只将值存储在指定变量之中</li><li><strong>%o</strong>：八进制整数</li><li><strong>%p</strong>：指针</li><li><strong>%s</strong>：字符串</li><li><strong>%u</strong>：无符号整数（unsigned int）</li><li><strong>%x</strong>：十六进制整数</li><li><strong>%X</strong>：等同于 <code>%x</code>，唯一的区别是指数部分的 X 为大写</li><li><strong>%zd</strong>：size_t 类型</li><li><strong>%%</strong>：输出一个百分号</li></ul><h3 id="输出格式" tabindex="-1"><a class="header-anchor" href="#输出格式" aria-hidden="true">#</a> 输出格式</h3><p><code>printf()</code> 可以定制占位符的输出格式。</p><ul><li><p><strong>限定宽度</strong></p><p><code>printf()</code> 允许限定占位符的最小宽度。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5d\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出为 &quot;  123&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>%5d</code> 表示这个占位符的宽度至少为 5 位。如果不满 5 位，对应的值的前面会添加空格。</p><p>输出的值默认是右对齐，即输出内容前面会有空格；如果希望改成左对齐，在输出内容后面添加空格，可以在占位符的 <code>%</code> 的后面插入一个 <code>-</code> 号。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%-5d\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出为 &quot;123  &quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于小数，这个限定符会限制所有数字的最小显示宽度。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%12f\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">123.45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出为 &quot;  123.450000&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>%12f</code> 表示输出的浮点数最少要占据 12 位。由于小数的默认显示精度是小数点后 6 位，所以 123.45 输出结果的头部会添加 2 个空格。</p></li><li><p><strong>总是显示正负号</strong></p><p>默认情况下，<code>printf()</code> 不对正数显示 <code>+</code> 号，只对负数显示 <code>-</code> 号。如果想让正数也输出 <code>+</code> 号，可以在占位符的 <code>%</code> 后面加一个 <code>+</code>。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+d\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 +12</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 -12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>%+d</code> 可以确保输出的数值，总是带有正负号。</p></li><li><p><strong>限定小数位数</strong></p><p>输出小数时，有时希望限定小数的位数。比如：希望小数点后面只保留两位。占位符可以写成 <code>%.2f</code>。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Number is %.2f\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 Number is 0.50</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种写法可以与限定宽度占位符，结合使用。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%6.2f\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出为 &quot;  0.50&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>%6.2f</code> 表示输出字符串最小宽度为 6，小数位数为 2。所以，输出字符串的头部有两个空格。</p><p>最小宽度和小数位数这两个限定值，都可以用 <code>*</code> 代替，通过 <code>printf()</code> 的参数传入。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%*.*f\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%6.2f\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>%*.*f</code> 的两个星号通过 <code>printf()</code> 的两个参数 6 和 2 传入。</p></li><li><p><strong>输出部分字符串</strong></p><p><code>%s</code> 占位符用来输出字符串，默认是全部输出。如果只想输出开头的部分，可以用 <code>%.[m]s</code> 指定输出的长度，其中 <code>[m]</code> 代表一个数字，表示所要输出的长度。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.5s\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>%.5s</code> 表示只输出字符串 “hello world” 的前 5 个字符，即 “hello”。</p></li></ul><h2 id="return" tabindex="-1"><a class="header-anchor" href="#return" aria-hidden="true">#</a> return</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>int main(void)</code> 中的 <code>int</code> 表明 <code>main()</code> 函数应返回一个整数。C 标准要求 <code>main()</code> 这样做。有返回值的 C 函数要有 <code>return</code> 语句。该语句以 <code>return</code> 关键字开始，后面是待返回的值，并以分号结尾。</p><p>如果遗漏 <code>main()</code> 函数中的 <code>return</code> 语句，程序在运行至最外面的右花括号（<code>}</code>）时会返回 <code>0</code>。因此，可以省略 <code>main()</code> 函数末尾的 <code>return</code> 语句。但是，不要在其他有返回值的函数中漏掉它。</p><h2 id="语句" tabindex="-1"><a class="header-anchor" href="#语句" aria-hidden="true">#</a> 语句</h2><p>C 语言的代码由一行行语句（<code>statement</code>）组成。一行语句就是程序执行的一个操作命令。C 语言规定，语句必须使用分号结尾，除非有明确规定可以不写分号，分号表明语句结束符。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> num<span class="token punctuation">;</span>
num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>多个语句可以写在一行。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> num<span class="token punctuation">;</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一个语句也可以写成多行，这时就要依靠分号判断语句在哪一行结束。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span>
num
<span class="token punctuation">;</span>

num
<span class="token operator">=</span>
<span class="token number">1</span>
<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="表达式" tabindex="-1"><a class="header-anchor" href="#表达式" aria-hidden="true">#</a> 表达式</h2><p>C 语言的各种计算，主要通过表达式完成。表达式（<code>expression</code>）是一个计算式，用来获取值。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">表达式与语句的区别</p><ul><li>语句可以包含表达式，但是表达式不构成语句</li><li>表达式都有返回值，语句不一定有。因为语句用来执行某个命令，很多时候不需要返回值，比如：变量声明语句 <code>int i = 1;</code></li></ul></div><h2 id="空格" tabindex="-1"><a class="header-anchor" href="#空格" aria-hidden="true">#</a> 空格</h2><p>空格主要用来帮助编译器区分语法单位，只是为了增加代码的可读性。语法单位之间的多个空格，等同于单个空格。例如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
i <span class="token operator">=</span>     <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,70),t=[c];function i(p,d){return s(),a("div",null,t)}const u=n(o,[["render",i],["__file","syntax.html.vue"]]);export{u as default};
