import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as l,c as d,b as t,e,d as a,w as s,f as o}from"./app-i0zF7vkB.js";const r={},p=o('<h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述" aria-hidden="true">#</a> 描述</h2><p><code>git reflog</code> 用于显示本地仓库的引用日志（Reference logs），即查看分支、标签、HEAD 等引用的操作历史记录。</p><p><code>git reflog</code> 记录了本地仓库中分支和其他引用的提示更新时间。参考日志在各种 Git 命令中都很有用，可以用来指定引用的旧值。例如：<code>HEAD@{2}</code> 表示 “两步前 HEAD 所在的位置”，<code>master@{one.week.ago}</code> 表示 “一周前本仓库中 master 所在的位置” 等等。</p><p><code>git reflog</code> 命令可以显示 HEAD 和分支引用的变动历史，包括每次变化的简要说明（如：<code>commit</code>、<code>reset</code> 等）和对应的提交哈希值。这对于找回丢失的提交（如：在一个被重置（reset）的分支上的提交）特别有用，因为即使某些提交不再被任何分支或标签所引用，只要它们在 <code>reflog</code> 中，您就能找到它们的 SHA-1 哈希，并可以检出或恢复。</p>',4),g=t("code",null,"git reflog",-1),u=t("code",null,"git reflog",-1),m=o(`<h2 id="选项" tabindex="-1"><a class="header-anchor" href="#选项" aria-hidden="true">#</a> 选项</h2><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>show</code></td><td style="text-align:left;">显示命令行中提供的引用日志，<code>git reflog show</code> 接受 <code>git log</code> 接受的任何选项</td></tr><tr><td style="text-align:center;"><code>--all</code></td><td style="text-align:left;">处理所有引用的引用日志</td></tr><tr><td style="text-align:center;"><code>--single-worktree</code></td><td style="text-align:left;">只处理当前工作区的引用日志</td></tr><tr><td style="text-align:center;"><code>--expire=&lt;时间&gt;</code></td><td style="text-align:left;">剪除超过指定时间的条目</td></tr><tr><td style="text-align:center;"><code>-n, --dry-run</code></td><td style="text-align:left;">只显示要修剪的内容，而不做任何改变</td></tr></tbody></table><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><p>例如：查看本地仓库前五行的引用日志。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reflog <span class="token parameter variable">-4</span>

0a1b2c3 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> main<span class="token punctuation">)</span> HEAD@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>: reset: moving to HEAD<span class="token operator">&amp;</span><span class="token comment">#126;1</span>
d34e5f6 HEAD@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>: commit: Add a third line
f56g7h8 HEAD@<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>: commit: Add a second line
i90ja1k HEAD@<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span>: commit <span class="token punctuation">(</span>initial<span class="token punctuation">)</span>: Initial commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>0a1b2c3</strong>：是最新一次提交（在重置操作之后的 HEAD 所指向的提交）的哈希值</li><li><strong>HEAD -&gt; main</strong>：表示 HEAD 当前指向 main 分支</li><li><strong>HEAD@{0}</strong>：表示最近的引用日志条目</li><li><strong>reset: moving to HEAD~1</strong>：是对这次 <code>git reset</code> 操作的描述</li><li><strong>d34e5f6, f56g7h8, i90ja1k</strong>：是之前提交的哈希值</li><li><strong>HEAD@{1}, HEAD@{2}, HEAD@{3}</strong>：是之前引用日志条目的引用</li></ul>`,6),h=o(`<p>例如：想要恢复到 <code>f56g7h8</code> 这个提交。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout f56g7h8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：想要创建一个新的分支 <code>recover-branch</code> 指向那个提交。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch recover-branch f56g7h8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>利用 <code>git reflog</code> 的输出来恢复了丢失的提交或回滚了之前的操作。</p>`,5);function f(b,v){const n=i("RouterLink");return l(),d("div",null,[p,t("p",null,[e("与 "),a(n,{to:"/computers/commands/git/git_log.html"},{default:s(()=>[e("git log")]),_:1}),e(" 不同，"),g,e(" 主要关注的是引用（如：HEAD、分支）的变化，而不是提交对象本身的历史。因此，当需要恢复丢失的提交或理解 HEAD 和分支引用如何变化时，使用 "),u,e(" 更为合适。")]),m,t("p",null,[e("通过这个输出，可以看到 HEAD 的历史移动记录，包括提交和重置操作。如果想要恢复到某个特定的提交，可以使用相应的提交哈希值来检出那个提交，或者使用 "),a(n,{to:"/computers/commands/git/git_reset.html"},{default:s(()=>[e("git reset")]),_:1}),e(" 或 "),a(n,{to:"/computers/commands/git/git_checkout.html"},{default:s(()=>[e("git checkout")]),_:1}),e(" 命令来移动 HEAD 到那个位置。")]),h])}const A=c(r,[["render",f],["__file","git_reflog.html.vue"]]);export{A as default};
