import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as c,o,c as l,b as e,e as n,d as s,w as i,f as t}from"./app-HgYDRmp_.js";const p={},r=t(`<p>几乎所有的版本控制系统都以某种形式支持分支，使用分支意味着您可以把您的工作从开发主线上分离开来，以免影响开发主线。在很多版本控制系统中，这是一个略微低效的过程——常常需要完全创建一个源代码目录的副本，对于大项目来说，这样的过程会耗费很多时间。</p><p>而 Git 可以轻量的处理分支，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。与许多其它版本控制系统不同，Git 鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次。</p><h2 id="分支简介" tabindex="-1"><a class="header-anchor" href="#分支简介" aria-hidden="true">#</a> 分支简介</h2><p>Git 保存数据的方式，不是文件的变化或者差异，而是一系列不同时刻的 <strong>快照。</strong></p><p>在进行提交（<code>commit id</code>）操作时，Git 会保存一个提交对象。该提交对象会包含一个指向暂存内容快照的指针，还包含了作者的姓名和邮箱、提交时输入的信息以及指向它的父对象的指针。首次提交产生的提交对象没有父对象，普通提交操作产生的提交对象有一个父对象，而由多个分支合并产生的提交对象有多个父对象。</p><p>暂存（<code>git add</code>）操作会为每一个文件计算校验和（SHA-1 哈希算法），然后会把当前版本的文件快照保存到 Git 仓库中（Git 使用 <strong>blob 对象</strong> 来保存它们），最终将校验和加入到暂存区域等待提交。</p><p>当使用 <code>git commit</code> 进行提交操作时，Git 会先计算每一个子目录（本例中只有项目根目录）的校验和，然后在 Git 仓库中这些校验和保存为 <strong>树对象</strong>。随后，Git 便会创建一个提交对象，它除了包含上面提到的那些信息外，还包含指向这个树对象（项目根目录）的指针。如此一来，Git 就可以在需要的时候重现此次保存的快照。</p><p>首次提交没有父对象指针，但之后的提交，产生的提交对象会包含一个指向上次提交对象（父对象）的指针。</p><p>当前 Git 仓库中有四个对象：两个 <strong>blob 对象</strong>（保存着文件快照）、一个 <strong>树对象</strong>（记录着目录结构和 <code>blob</code> 对象索引）以及一个 <strong>提交对象</strong>（包含着指向前述树对象的指针和所有提交信息）。</p><p>例如：使用 <code>git log -3 --pretty=raw</code> 查看当前仓库前三个的提交对象（<code>commit</code>）和树对象（<code>tree</code>）。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">-3</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>raw

commit 7333fb5d96fab255ef780add57a41ffb1d3fbfe1
tree 53f69acb505bf9bfce1a4d9299b79df6d2e1c6be
parent 99114d61ea731daf4d5663aa77d83810a8c38680
author Sank Gao <span class="token operator">&lt;</span>sankgao@example.com<span class="token operator">&gt;</span> <span class="token number">1716518590</span> +0800
committer Sank Gao <span class="token operator">&lt;</span>sankgao@example.com<span class="token operator">&gt;</span> <span class="token number">1716533017</span> +0800

    将 test01.txt 文件重命名为 test02.txt，并修改文件内容

commit 99114d61ea731daf4d5663aa77d83810a8c38680
tree 74eeee4b7421028201d7fb950b9d66c8aff22937
parent 232657552142c8fe97ac32f5801c70137ed95246
author Sank Gao <span class="token operator">&lt;</span>sankgao@example.com<span class="token operator">&gt;</span> <span class="token number">1716452905</span> +0800
committer Sank Gao <span class="token operator">&lt;</span>sankgao@example.com<span class="token operator">&gt;</span> <span class="token number">1716452905</span> +0800

    modified test01.txt

commit 232657552142c8fe97ac32f5801c70137ed95246
tree 678664884292fb792d418030055ace3c8dcc5d91
parent f3b964575a8a1d6919e591173d8a788f968a4140
author Sank Gao <span class="token operator">&lt;</span>sankgao@example.com<span class="token operator">&gt;</span> <span class="token number">1716445579</span> +0800
committer Sank Gao <span class="token operator">&lt;</span>sankgao@example.com<span class="token operator">&gt;</span> <span class="token number">1716445579</span> +0800

    change <span class="token function">file</span>

    <span class="token function">add</span> README.md

    modified test01.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：使用 <code>git ls-tree</code> 查看当前仓库指定树对象（<code>tree</code>）的 blob 对象。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> ls-tree 53f69acb505bf9bfce1a4d9299b79df6d2e1c6be

<span class="token number">100644</span> blob e6249324cb83b7d63fa664f4fb4dd1ada0133053    README.md
<span class="token number">100644</span> blob b4682767c489896d37957a8b81d946d262ffbe3e    test02.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Git 的分支，其实本质上仅仅是指向提交对象的可变指针。Git 的默认分支名字是 <code>main</code> 或 <code>master</code>。在多次提交操作之后，您其实已经有一个指向最后那个提交对象的 <code>master</code> 分支。<code>master</code> 分支会在每次提交时自动向前移动。</p>`,14),u={class:"hint-container info"},v=e("p",{class:"hint-container-title"},"相关信息",-1),m=e("code",null,"master",-1),b=e("code",null,"master",-1),g=e("h2",{id:"创建分支",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#创建分支","aria-hidden":"true"},"#"),n(" 创建分支")],-1),h=t(`<p>例如：要开发一个新功能，一般会以主分支（<code>main</code>）为基础，创建一个新分支（<code>dev</code>），并在新分支中开发新功能。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看提交对象指针，<code>main</code> 分支和 <code>dev</code> 分支都指向同一个提交对象指针（<code>7333fb5</code>）。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">-1</span> <span class="token parameter variable">--oneline</span>

7333fb5 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> main, origin/main, dev<span class="token punctuation">)</span> 将 test01.txt 文件重命名为 test02.txt，并修改文件内容
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Git 有一个名为 HEAD 的特殊指针。请注意它和许多其它版本控制系统（如：Subversion 或 CVS）里的 HEAD 概念完全不同。在 Git 中，它是一个指针，指向当前所在的本地分支（将 HEAD 想象为当前分支的别名）。在本例中，HEAD 指针仍然在 <code>main</code> 分支上。因为 <code>git branch</code> 命令仅仅 <strong>创建</strong> 一个新分支，并不会自动切换到新分支中去。</p><h2 id="分支切换" tabindex="-1"><a class="header-anchor" href="#分支切换" aria-hidden="true">#</a> 分支切换</h2><h3 id="head-指向当前所在的分支" tabindex="-1"><a class="header-anchor" href="#head-指向当前所在的分支" aria-hidden="true">#</a> HEAD 指向当前所在的分支</h3>`,7),k=t(`<p>例如：切换到新创建的 <code>dev</code> 分支，且 HEAD 指针指向 <code>dev</code> 分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看 HEAD 指针，HEAD 指针指向 <code>dev</code> 分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">-1</span> <span class="token parameter variable">--oneline</span>

7333fb5 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> dev, origin/main, main<span class="token punctuation">)</span> 将 test01.txt 文件重命名为 test02.txt，并修改文件内容
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="head-指针随着提交操作自动向前移动" tabindex="-1"><a class="header-anchor" href="#head-指针随着提交操作自动向前移动" aria-hidden="true">#</a> HEAD 指针随着提交操作自动向前移动</h3><p>如果再次执行提交（<code>git commit</code>）操作，您的 <code>dev</code> 分支向前移动了，但是 <code>main</code> 分支却没有，HEAD 仍然指向运行 <code>git checkout</code> 时所指的对象。</p><p>例如：在 <code>dev</code> 分支中开发新功能，并执行提交（<code>git commit</code>）操作。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;test01&#39;</span> <span class="token operator">&gt;</span> test01.txt
<span class="token function">git</span> <span class="token function">add</span> test01.txt
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;add test01.txt&#39;</span>

<span class="token punctuation">[</span>dev 0f59771<span class="token punctuation">]</span> <span class="token function">add</span> test01.txt
 <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span>
 create mode <span class="token number">100644</span> test01.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看 <code>dev</code> 分支，HEAD 指针指向新的提交对象 <code>0f59771</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">-2</span> <span class="token parameter variable">--oneline</span>

0f59771 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> dev<span class="token punctuation">)</span> <span class="token function">add</span> test01.txt
7333fb5 <span class="token punctuation">(</span>origin/main, main<span class="token punctuation">)</span> 将 test01.txt 文件重命名为 test02.txt，并修改文件内容
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检出时-head-随之移动" tabindex="-1"><a class="header-anchor" href="#检出时-head-随之移动" aria-hidden="true">#</a> 检出时 HEAD 随之移动</h3><p>再切换回 <code>main</code> 分支，使 HEAD 指针指回 <code>main</code> 分支，并将工作目录恢复成 <code>main</code> 分支所指向的快照内容。</p><p>先查看 <code>dev</code> 分支内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ls</span>

README.md  test01.txt  test02.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>切换回 <code>main</code> 分支：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看 <code>main</code> 分支，HEAD 指针指向的提交对象依旧是 <code>7333fb5</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">-1</span> <span class="token parameter variable">--oneline</span>

7333fb5 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> main, origin/main<span class="token punctuation">)</span> 将 test01.txt 文件重命名为 test02.txt，并修改文件内容
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看 <code>main</code> 分支内容，已恢复成 <code>main</code> 分支所指向的快照内容。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ls</span>

README.md  test02.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="项目分叉历史" tabindex="-1"><a class="header-anchor" href="#项目分叉历史" aria-hidden="true">#</a> 项目分叉历史</h3><p>如果您正在 <code>dev</code> 分支中开发新功能，突然在之前的（主分支 <code>main</code>）环境中有一个紧急问题需要解决，但又不想放弃 <code>dev</code> 分支中的修改，可以通过 Git 回到 <code>main</code> 分支环境。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在您这么做之前，要留意您的工作目录和暂存区里那些还没有被提交的修改，它可能会和您即将检出的分支产生冲突从而阻止 Git 切换到该分支。最好的方法是，在您切换分支之前，保持好一个干净的状态。有一些方法可以绕过这个问题，即 <strong>贮藏</strong>（stashing） 和 <strong>修补提交</strong>（commit amending）。</p></div><p>现在，假设您已经把您的修改全部提交了，这时您可以切换回 <code>main</code> 分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个时候，您的工作目录和您开始在 <code>dev</code> 分支上开发新功能之前一模一样，现在您可以专心修复紧急问题了。<strong>注意</strong>：当您切换分支的时候，Git 会重置您的工作目录，使其看起来像回到了您在那个分支上最后一次提交的样子。Git 会自动添加、删除、修改文件以确保此时您的工作目录和这个分支最后一次提交时的样子一模一样。</p><p>接下来，您要修复这个紧急问题。建立一个 <code>hotfix</code> 分支，在该分支上工作直到问题解决。</p><p>创建并切换到 <code>hotfix</code> 分支：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> hotfix

Switched to a new branch <span class="token string">&#39;hotfix&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>hotfix</code> 分支中修改，解决问题：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;test02\\ntest02test02&#39;</span> <span class="token operator">&gt;</span> test02.txt
<span class="token function">git</span> commit <span class="token parameter variable">-am</span> <span class="token string">&#39;modified test02.txt&#39;</span>

<span class="token punctuation">[</span>hotfix 6a63f37<span class="token punctuation">]</span> modified test02.txt
 <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">2</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">1</span> deletion<span class="token punctuation">(</span>-<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看 <code>hotfix</code> 分支，HEAD 指针指向新的提交对象 <code>6a63f37</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">-2</span> <span class="token parameter variable">--oneline</span>

6a63f37 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> hotfix<span class="token punctuation">)</span> modified test02.txt
7333fb5 <span class="token punctuation">(</span>origin/main, main<span class="token punctuation">)</span> 将 test01.txt 文件重命名为 test02.txt，并修改文件内容
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，这个项目的提交历史已经产生了分叉。因为刚才您创建了一个新分支，并切换过去进行了一些工作，随后又切换回 <code>main</code> 分支进行了另外一些工作。上述两次改动针对的是不同分支，您可以在不同分支间不断地来回切换和工作，并在时机成熟时将它们合并起来。</p><p>使用 <code>git log -5 --oneline --graph --all</code> 命令查看分叉历史，显示所有分支中前五个提交记录，并以简短的 ASCII 图形的方式显示。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">-5</span> <span class="token parameter variable">--oneline</span> <span class="token parameter variable">--graph</span> <span class="token parameter variable">--all</span>

* 6a63f37 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> hotfix<span class="token punctuation">)</span> modified test02.txt
<span class="token operator">|</span> * 0f59771 <span class="token punctuation">(</span>dev<span class="token punctuation">)</span> <span class="token function">add</span> test01.txt
<span class="token operator">|</span>/
* 7333fb5 <span class="token punctuation">(</span>origin/main, main<span class="token punctuation">)</span> 将 test01.txt 文件重命名为 test02.txt，并修改文件内容
* 99114d6 modified test01.txt
* <span class="token number">2326575</span> change <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">创建新分支的同时切换过去</p><p>通常会在创建一个新分支后立即切换过去，这可以用 <code>git checkout -b &lt;newbranchname&gt;</code> 一条命令搞定。</p></div><h2 id="分支合并" tabindex="-1"><a class="header-anchor" href="#分支合并" aria-hidden="true">#</a> 分支合并</h2><h3 id="快进合并" tabindex="-1"><a class="header-anchor" href="#快进合并" aria-hidden="true">#</a> 快进合并</h3>`,39),f=e("code",null,"hotfix",-1),x=e("code",null,"main",-1),_=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout main
<span class="token function">git</span> merge hotfix

Updating 7333fb5<span class="token punctuation">..</span>6a63f37
Fast-forward
 test02.txt <span class="token operator">|</span> <span class="token number">3</span> ++-
 <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">2</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">1</span> deletion<span class="token punctuation">(</span>-<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在合并的时候，您应该注意到了 <strong>快进</strong>（<code>fast-forward</code>）这个词。由于要合并的分支 <code>hotfix</code> 所指向的提交 <code>6a63f37</code> 是您所在的提交 <code>7333fb5</code> 的直接后继，因此 Git 会直接将指针向前移动。换句话说，当您试图合并两个分支时，如果顺着一个分支走下去能够到达另一个分支，那么 Git 在合并两者的时候，只会简单的将指针向前推进（指针右移），因为这种情况下的合并操作没有需要解决的分歧——这就叫做 <strong>快进</strong>（<code>fast-forward</code>）。</p><p>现在，最新的修改已经在 <code>main</code> 分支所指向的提交快照中，您可以着手发布该修复了。查看 <code>main</code> 分支，HEAD 指针指向 <code>hotfix</code> 分支的提交对象 <code>6a63f37</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">-2</span> <span class="token parameter variable">--oneline</span>

6a63f37 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> main, hotfix<span class="token punctuation">)</span> modified test02.txt
7333fb5 <span class="token punctuation">(</span>origin/main<span class="token punctuation">)</span> 将 test01.txt 文件重命名为 test02.txt，并修改文件内容
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于这个紧急问题的解决方案发布之后，您准备回到被打断之前时的工作中。然而，您应该先删除 <code>hotfix</code> 分支，因为您已经不再需要它了，<code>main</code> 分支已经指向了同一个位置。您可以使用带 <code>-d</code> 选项的 <code>git branch</code> 命令来删除分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-d</span> hotfix

Deleted branch hotfix <span class="token punctuation">(</span>was 6a63f37<span class="token punctuation">)</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在可以切换回 <code>dev</code> 分支继续开发新功能：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout dev
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;test02test02\\ntest02&#39;</span> <span class="token operator">&gt;&gt;</span> test02.txt
<span class="token function">git</span> commit <span class="token parameter variable">-am</span> <span class="token string">&#39;modified test02.txt&#39;</span>

<span class="token punctuation">[</span>dev ad6950e<span class="token punctuation">]</span> modified test02.txt
 <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">2</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看 <code>dev</code> 分支，HEAD 指针指向新的提交对象 <code>ad6950e</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">-3</span> <span class="token parameter variable">--oneline</span>

ad6950e <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> dev<span class="token punctuation">)</span> modified test02.txt
0f59771 <span class="token function">add</span> test01.txt
7333fb5 <span class="token punctuation">(</span>origin/main<span class="token punctuation">)</span> 将 test01.txt 文件重命名为 test02.txt，并修改文件内容
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三方合并" tabindex="-1"><a class="header-anchor" href="#三方合并" aria-hidden="true">#</a> 三方合并</h3><p>有时候合并操作不会如此顺利。如果您在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没法自动的合并它们。这种情况称为 <strong>合并冲突。</strong></p><p>例如：已经在 <code>dev</code> 分支中开发完新功能，将 <code>dev</code> 分支合并到 <code>main</code> 分支中。在 <code>dev</code> 和 <code>main</code> 分支中，同时修改了 <code>test02.txt</code> 文件的同一个部分。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout main
<span class="token function">git</span> merge dev

Auto-merging test02.txt
CONFLICT <span class="token punctuation">(</span>content<span class="token punctuation">)</span>: Merge conflict <span class="token keyword">in</span> test02.txt
Automatic merge failed<span class="token punctuation">;</span> fix conflicts and <span class="token keyword">then</span> commit the result.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时 Git 做了合并，但是没有自动地创建一个新的合并提交。Git 会暂停下来，等待您去解决合并产生的冲突。在合并冲突后使用 <code>git status</code> 命令来查看那些因包含合并冲突而处于未合并（<code>unmerged</code>）状态的文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> status

On branch main
You have unmerged paths.
  <span class="token punctuation">(</span>fix conflicts and run <span class="token string">&quot;git commit&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">(</span>use <span class="token string">&quot;git merge --abort&quot;</span> to abort the merge<span class="token punctuation">)</span>

Changes to be committed:
        new file:   test01.txt

Unmerged paths:
  <span class="token punctuation">(</span>use <span class="token string">&quot;git add &lt;file&gt;...&quot;</span> to mark resolution<span class="token punctuation">)</span>
        both modified:   test02.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。Git 会在有冲突的文件中加入标准的冲突解决标记（<code>Unmerged paths</code>），这样您可以打开这些包含冲突的文件然后手动解决冲突。出现冲突的文件会包含一些特殊区段，看起来如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;</span> HEAD
test02
test02test02
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
test02.txt
test02test02
test02
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这表示 HEAD 所指示的版本（也就是您 <code>main</code> 分支所在的位置，因为您在运行 <code>merge</code> 命令的时候已经检出到了这个分支）在这个区段的上半部分（<code>=======</code> 的上半部分），而 <code>dev</code> 分支所指示的版本在 <code>=======</code> 的下半部分。为了解决冲突，您必须选择使用由 <code>=======</code> 分割的两部分中的一个，或者您也可以自行合并这些内容。例如：您可以通过把这段内容换成下面的样子来解决冲突。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>test02
test02test02
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述的冲突解决方案仅保留了其中一个分支的修改，并且 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> 、<code>=======</code> 和 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 这些行被完全删除了。在您解决了所有文件里的冲突之后，对每个文件使用 <code>git add</code> 命令来将其标记为冲突已解决。一旦暂存这些原本有冲突的文件，Git 就会将它们标记为冲突已解决。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> test02.txt
<span class="token function">git</span> status

On branch main
All conflicts fixed but you are still merging.
  <span class="token punctuation">(</span>use <span class="token string">&quot;git commit&quot;</span> to conclude merge<span class="token punctuation">)</span>

Changes to be committed:
        new file:   test01.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您对结果感到满意，并且确定之前有冲突的文件都已经暂存了，这时您可以输入 <code>git commit</code> 来完成合并提交。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;merge dev&#39;</span>

<span class="token punctuation">[</span>main 4b0390e<span class="token punctuation">]</span> merge dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>git log -5 --oneline --graph --all</code> 命令查看分叉历史，显示所有分支中前五个提交记录，并以简短的 ASCII 图形的方式显示。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">-5</span> <span class="token parameter variable">--oneline</span> <span class="token parameter variable">--graph</span> <span class="token parameter variable">--all</span>

*   4b0390e <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> main<span class="token punctuation">)</span> merge dev
<span class="token operator">|</span><span class="token punctuation">\\</span>
<span class="token operator">|</span> * ad6950e <span class="token punctuation">(</span>dev<span class="token punctuation">)</span> modified test02.txt
<span class="token operator">|</span> * 0f59771 <span class="token function">add</span> test01.txt
* <span class="token operator">|</span> 6a63f37 modified test02.txt
<span class="token operator">|</span>/
* 7333fb5 <span class="token punctuation">(</span>origin/main<span class="token punctuation">)</span> 将 test01.txt 文件重命名为 test02.txt，并修改文件内容
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这和您之前合并 <code>hotfix</code> 分支的时候看起来有一点不一样。在这种情况下，您的开发历史从一个更早的地方开始分叉开来（<code>diverged</code>）。因为，<code>main</code> 分支所在提交并不是 <code>dev</code> 分支所在提交的直接祖先，Git 不得不做一些额外的工作。出现这种情况的时候，Git 会使用两个分支的末端所指的快照（<code>6a63f37</code> 和 <code>ad6950e</code>）以及这两个分支的公共祖先（<code>7333fb5</code>），做一个简单的三方合并。</p><p>和之前将分支指针向前推进所不同的是，Git 将此次三方合并的结果做了一个新的快照并且自动创建一个新的提交指向它。这个被称作一次合并提交，它的特别之处在于他有不止一个父提交。</p><p>既然您的修改已经合并进来了，就不再需要 <code>dev</code> 分支了。现在您可以在任务追踪系统中关闭此项任务，并删除这个分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-d</span> dev

Deleted branch dev <span class="token punctuation">(</span>was ad6950e<span class="token punctuation">)</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想使用图形化工具来解决冲突，可以运行 <code>git mergetool</code>，该命令会为您启动一个合适的可视化合并工具，并带领您一步一步解决这些冲突。</p><h2 id="分支管理" tabindex="-1"><a class="header-anchor" href="#分支管理" aria-hidden="true">#</a> 分支管理</h2><p><code>git branch</code> 命令不只是可以创建与删除分支。如果不加任何参数运行它，会得到当前所有分支的一个列表：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch

* main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>main</code> 分支前的 <code>*</code> 字符表示现在检出的那一个分支（也就是说，当前 HEAD 指针所指向的分支）。</p><p>如果需要查看每一个分支的最后一次提交，可以运行 <code>git branch -v</code> 命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-v</span>

* main 4b0390e merge dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请牢记，当您做这么多操作的时候，这些分支全部都存于本地。当您新建和合并分支的时候，所有这一切都只发生在您本地的 Git 版本库中，没有与服务器发生交互。</p><h2 id="远程分支" tabindex="-1"><a class="header-anchor" href="#远程分支" aria-hidden="true">#</a> 远程分支</h2><p>远程引用是对远程仓库的引用（指针），包括分支、标签等等。通过 <code>git ls-remote &lt;remote&gt;</code> 命令来显式地获得远程引用的完整列表，或者通过 <code>git remote show &lt;remote&gt;</code> 获得远程分支的更多信息。然而，一个更常见的做法是利用 远程跟踪 分支。</p><p>远程跟踪分支是远程分支状态的引用。它们是您无法移动的本地引用。一旦您进行了网络通信，Git 就会为您移动它们以精确反映远程仓库的状态。请将它们看做书签，这样可以提醒您该分支在远程仓库中的位置就是您最后一次连接到它们的位置。</p><p>它们以 <code>&lt;remote&gt;/&lt;branch&gt;</code> 的形式命名，例如：如果您想要看您最后一次与远程仓库 <code>origin</code> 通信时 <code>main</code> 分支的状态，您可以查看 <code>origin/main</code> 分支。您与同事合作解决一个问题并且他们推送了一个 <code>dev</code> 分支，您可能有自己的本地 <code>dev</code> 分支，然而在服务器上的分支会以 <code>origin/dev</code> 来表示。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>远程仓库名字 <code>origin</code> 与分支名字 <code>main</code> 一样，在 Git 中并没有任何特别的含义一样。同时 <code>main</code> 是当您运行 <code>git init</code> 时默认的起始分支名字，原因仅仅是它的广泛使用，<code>origin</code> 是当您运行 <code>git clone</code> 时默认的远程仓库名字。如果您运行 <code>git clone -o booyah</code>，那么您默认的远程分支名字将会是 <code>booyah/main</code>。</p></div><p>如果您在本地的 <code>main</code> 分支做了一些工作，在同一段时间内有其他人推送提交到远程 <code>main</code> 分支（<code>origin/main</code>）并且更新了它的 <code>main</code> 分支，这就是说您们的提交历史已走向不同的方向。即便这样，只要您保持不与 <code>origin</code> 服务器连接（并拉取数据），您的 <code>origin/master</code> 指针就不会移动。</p><p>如果要与给定的远程仓库同步数据，运行 <code>git fetch &lt;remote&gt;</code> 命令（在本例中为 <code>git fetch origin</code>）。这个命令查找 <code>origin</code> 是哪一个服务器（在本例中，它是 <code>/home/sankgao/projects/git_tutorials.git</code>），从中抓取本地没有的数据，并且更新本地数据库，移动 <code>origin/main</code> 指针到更新之后的位置。</p>`,45);function A(E,G){const a=c("RouterLink");return o(),l("div",null,[r,e("div",u,[v,e("p",null,[n("Git 的 "),m,n(" 分支并不是一个特殊分支，它跟其它分支完全没有区别。之所以几乎每一个仓库都有 "),b,n(" 分支，是因为 "),s(a,{to:"/computers/commands/git/git_init.html"},{default:i(()=>[n("git init")]),_:1}),n(" 命令默认创建它，并且大多数人都懒得去改动它。")])]),g,e("p",null,[n("分支只是为您创建了一个可以移动的新的指针。使用 "),s(a,{to:"/computers/commands/git/git_branch.html"},{default:i(()=>[n("git branch")]),_:1}),n(" 命令，创建一个新分支，这会在当前所在的提交对象上创建一个指针。")]),h,e("p",null,[n("使用 "),s(a,{to:"/computers/commands/git/git_checkout.html"},{default:i(()=>[n("git checkout")]),_:1}),n(" 或 "),s(a,{to:"/computers/commands/git/git_switch.html"},{default:i(()=>[n("git switch")]),_:1}),n(" 命令，将切换到已存在的其它分支，HEAD 也会指向指定的分支。分支切换会改变您工作目录中的文件。")]),k,e("p",null,[n("您可以运行您的测试，确保您的修改是正确的。使用 "),s(a,{to:"/computers/commands/git/git_merge.html"},{default:i(()=>[n("git merge")]),_:1}),n(" 命令将 "),f,n(" 分支合并到 "),x,n(" 分支来部署到线上。")]),_])}const w=d(p,[["render",A],["__file","branch.html.vue"]]);export{w as default};
