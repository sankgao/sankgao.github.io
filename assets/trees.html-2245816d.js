import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-f41d886f.js";const t="/assets/tree_structure-911782f3.png",p="/assets/binary_tree-2b807114.png",i="/assets/full_binary_tree-fcce6522.png",o="/assets/complete_binary_tree-77dd0de2.png",c="/assets/tree_linked-88016004.png",l="/assets/tree_array-87cbb028.png",r="/assets/binary_search_tree-290fdbbc.png",u="/assets/binary_search_tree_ext-f6fa6f87.png",d="/assets/pre_order-30fd2608.png",k="/assets/inorder_traversal-0158f68d.png",_="/assets/postorder_traversal-8bcb02d1.png",g="/assets/binary_tree_export-af36a583.png",b="/assets/binary_tree_stack_1-63488eb9.png",v="/assets/binary_tree_stack_2-8130f943.png",m="/assets/binary_tree_stack_3-28c5c337.png",f="/assets/binary_tree_stack_4-aa6a63d0.png",y="/assets/binary_tree_stack_5-b958895f.png",h="/assets/binary_tree_stack_6-6975c8f6.png",x="/assets/binary_tree_stack_7-349aee25.png",q="/assets/breadth_first-8ce89dfc.png",w="/assets/binary_tree_sequence_1-1ed8320e.png",z="/assets/binary_tree_sequence_2-831a02dd.png",N="/assets/binary_tree_sequence_3-3fd60c6b.png",j="/assets/binary_tree_sequence_4-15088389.png",O="/assets/binary_tree_sequence_5-898ba578.png",Q="/assets/binary_tree_sequence_6-41cfd5c3.png",B="/assets/binary_tree_sequence_7-e50b4f41.png",C="/assets/max_heap-15220063.png",E="/assets/min_heap-b1b080ec.png",F="/assets/insert_binary_heap_1-40901492.png",P="/assets/insert_binary_heap_2-69a731ad.png",T="/assets/insert_binary_heap_3-97a8ce95.png",V="/assets/insert_binary_heap_4-717e7be1.png",A="/assets/delete_binary_heap_1-dacdcf1d.png",I="/assets/delete_binary_heap_2-54f26c7e.png",L="/assets/delete_binary_heap_3-d5524907.png",S="/assets/delete_binary_heap_4-fddc5cec.png",D="/assets/build_binary_heap_1-529acf38.png",G="/assets/build_binary_heap_2-0edf9ea3.png",H="/assets/build_binary_heap_3-01c8338a.png",J="/assets/build_binary_heap_4-2653125c.png",K="/assets/build_binary_heap_5-c89ed9b3.png",M="/assets/priority_queue_in_1-99ac30bb.png",R="/assets/priority_queue_in_2-fc8eaa7d.png",U="/assets/priority_queue_out_1-f82a64a7.png",W="/assets/priority_queue_out_2-cc0847b9.png",X="/assets/priority_queue_out_3-13890598.png",Y={},Z=e('<h2 id="树和二叉树" tabindex="-1"><a class="header-anchor" href="#树和二叉树" aria-hidden="true">#</a> 树和二叉树</h2><p>有许多逻辑关系并不是简单的 <strong>线性关系</strong>，在实际场景中，常常存在一对多，甚至多对多的情况。其中 <strong>树</strong> 和 <strong>图</strong> 就是典型的 <strong>非线性数据结构。</strong></p><h3 id="树" tabindex="-1"><a class="header-anchor" href="#树" aria-hidden="true">#</a> 树</h3><p><strong>树（tree）</strong> 是 <code>n(n ≥ 0)</code> 个节点的有限集。当 <code>n = 0</code> 时，称为 <strong>空树</strong>。</p><p>在任意一个非空树中，有如下特点：</p><ul><li>有且仅有一个特定的称为 <strong>根节点</strong></li><li>当 <code>n &gt; 1</code> 时，其余节点可分为 <code>m(m &gt; 0)</code> 个互不相交的有限集，每一个集合本身又是一个树，并称为 <strong>根的子树</strong></li></ul><p><strong>标准的树结构如下所示：</strong></p><figure><img src="'+t+'" alt="tree_structure" tabindex="0" loading="lazy"><figcaption>tree_structure</figcaption></figure><p>在上图中，节点1 是 <strong>根节点</strong>（<code>root</code>）；节点5、6、7、8、9 是树的末端，没有 “孩子节点” 被称为 <strong>叶子节点（leaf）</strong>。图中的虚线部分，是根节点1 的 <strong>其中一个子树。</strong></p><p>同时，树的结构从根节点到叶子节点，分为不同的层级。节点4 的上一级节点（节点2）是节点4 的 <strong>父节点（parent）</strong>；从节点4 衍生出来的节点（节点7、8、9）是节点4 的 <strong>孩子节点（child）</strong>；和节点4 同级，由同一个父节点2 衍生出来的节点5 是节点4 的 <strong>兄弟节点（sibling）。</strong></p><p>树的最大层级数，称为 <strong>树的高度</strong> 或 <strong>深度。</strong></p><h3 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树" aria-hidden="true">#</a> 二叉树</h3><p><strong>二叉树（binary tree）</strong> 是树的一种特殊形式。<strong>二叉</strong> 顾名思义，这种树的每个节点最多有 <code>2</code> 个 <strong>孩子节点</strong>。注意，这里是最多有 <code>2</code> 个，也可能只有 <code>1</code> 个，或者没有 <strong>孩子节点。</strong></p><p><strong>二叉树的结构如下图所示：</strong></p><figure><img src="'+p+'" alt="binary_tree" tabindex="0" loading="lazy"><figcaption>binary_tree</figcaption></figure><p>二叉树节点的两个孩子节点，一个被称为 <strong>左孩子（left child）</strong>，一个被称为 <strong>右孩子（right child）</strong>。这两个孩子节点的顺序是固定的，就像人的左手就是左手，右手就是右手，不能够颠倒或混淆。</p><p>此外，二叉树还有两种特殊形式：</p><ul><li><p><strong>满二叉树</strong></p><p>一个二叉树的所有非叶子节点都存在左孩子和右孩子，并且所有叶子节点都在同一层级上，那么这个树就是 <strong>满二叉树</strong>。满二叉树的每一个分支都是满的。</p><figure><img src="'+i+'" alt="full_binary_tree" tabindex="0" loading="lazy"><figcaption>full_binary_tree</figcaption></figure></li><li><p><strong>完全二叉树</strong></p><p>对一个有 <code>n</code> 个节点的二叉树，按层级顺序编号，则所有节点的编号为从 <code>1</code> 到 <code>n</code>。如果这个树所有节点和同样深度的满二叉树的编号为从 <code>1</code> 到 <code>n</code> 的节点位置相同，则这个二叉树为 <strong>完全二叉树。</strong></p><figure><img src="'+o+'" alt="complete_binary_tree" tabindex="0" loading="lazy"><figcaption>complete_binary_tree</figcaption></figure><p>在上图中，二叉树编号从 <code>1</code> 到 <code>12</code> 的 <code>12</code> 个节点，和前面满二叉树编号从 1 到 12 的节点位置完全对应。因此这个树是 <strong>完全二叉树。</strong></p><p>完全二叉树的条件没有满二叉树那么苛刻：满二叉树要求所有分支都是满的；而完全二叉树只需保证最后一个节点之前的节点都齐全即可。</p></li></ul><p>二叉树可以用 <strong>链式存储结构</strong> 也可以用 <strong>数组存储结构。</strong></p><ul><li><p><strong>链式存储结构</strong></p><figure><img src="'+c+'" alt="tree_linked" tabindex="0" loading="lazy"><figcaption>tree_linked</figcaption></figure><p>链式存储是二叉树最直观的存储方式。一个节点最多可以指向左右两个孩子节点，所以二叉树的每一个节点包含三部分。</p><ul><li><strong>存储数据的 data 变量</strong></li><li><strong>指向左孩子的 left 指针</strong></li><li><strong>指向右孩子的 right 指针</strong></li></ul></li><li><p><strong>数组存储结构</strong></p><figure><img src="'+l+'" alt="tree_array" tabindex="0" loading="lazy"><figcaption>tree_array</figcaption></figure><p>使用数组存储时，会按照层级顺序把二叉树的节点放到数组中对应的位置上。如果某一个节点的左孩子或右孩子空缺，则数组的相应位置也空出来。这样可以更方便地在数组中定位二叉树的孩子节点和父节点。</p><p>假设一个父节点的下标是 <code>parent</code>，那么它的左孩子节点的下标就是 <code>2 × parent + 1</code>；右孩子节点的下标就是 <code>2 × parent + 2</code>。反过来，假设一个左孩子节点的下标是 <code>leftChild</code>，那么它的父节点下标就是<code>(leftChild - 1) / 2</code>。</p><p>假如节点4 在数组中的下标是 <code>3</code>，节点4 是节点2 的左孩子，节点2 的下标可以直接通过计算得出：节点2 的下标等于 <code>(3 - 1) / 2 = 1</code>。</p><p>显然，对于一个稀疏的二叉树来说，用数组表示法是非常浪费空间的。</p></li></ul><h3 id="二叉树的应用" tabindex="-1"><a class="header-anchor" href="#二叉树的应用" aria-hidden="true">#</a> 二叉树的应用</h3><p>二叉树包含许多特殊的形式，每一种形式都有自己的作用，但是其最主要的应用还在于进行 <strong>查找操作</strong> 和 <strong>维持相对顺序</strong> 这两个方面。</p><ul><li><p><strong>查找操作</strong></p><p>二叉树的树形结构使它很适合扮演索引的角色。</p><p>这里介绍一种特殊的二叉树：<strong>二叉查找树（binary search tree）</strong>。仅看名字就可以知道，这种二叉树的主要作用就是进行查找操作。</p><p>二叉查找树在二叉树的基础上增加了以下几个条件：</p><ul><li>如果左子树不为空，则左子树上所有节点的值均小于根节点的值</li><li>如果右子树不为空，则右子树上所有节点的值均大于根节点的值</li><li>左子树、右子树也都是二叉查找树</li></ul><p><strong>一个标准的二叉查找树：</strong></p><figure><img src="'+r+'" alt="binary_search_tree" tabindex="0" loading="lazy"><figcaption>binary_search_tree</figcaption></figure><p>二叉查找树的这些条件为了查找方便。例如：查找值为 <code>4</code> 的节点。</p><p>第 1 步，访问根节点6，发现 <code>4 &lt; 6</code>；第 2 步，访问节点6 的左孩子节点3，发现 <code>4 &gt; 3</code>；第 3 步，访问节点3 的右孩子节点4，发现 <code>4 = 4</code>，这正是要查找的节点。</p><p>对于一个节点分布相对均衡的二叉查找树来说，如果节点总数是 <code>n</code>，那么搜索节点的时间复杂度就是 <strong>O(log<sub>2</sub>n)</strong>，和树的深度是一样的。</p><p>这种依靠比较大小来逐步查找的方式，和二分查找算法非常相似。</p></li><li><p><strong>维持相对顺序</strong></p><p>二叉查找树要求左子树节点的值小于父节点的值，右子树节点的值大于父节点的值，正是这样保证了二叉树的有序性。因此二叉查找树还有另一个名字 <strong>二叉排序树（binary sort tree）。</strong></p><p>新插入的节点，同样要遵循二叉排序树的原则。例如：插入新元素 <code>5</code>，由于 <code>5 &lt; 6</code>、<code>5 &gt; 3</code>、<code>5 &gt; 4</code>，所以 <code>5</code> 最终会插到节点4 的右孩子位置。</p><p>这一切看起来很顺利，然而却隐藏着一个致命的问题。例如：在二叉查找树根节点10 中依次插入节点9、8、7、6，就会出现以下现象：</p><figure><img src="'+u+'" alt="binary_search_tree_ext" tabindex="0" loading="lazy"><figcaption>binary_search_tree_ext</figcaption></figure><p>不只是外观看起来变得怪异了，查询节点的时间复杂度也退化成了 <strong>O(n)。</strong></p><p>解决这个问题需要用二叉树的 <strong>自平衡</strong>。二叉树自平衡的方式有多种，例如：红黑树、AVL树、树堆等。</p></li></ul><h2 id="二叉树的遍历" tabindex="-1"><a class="header-anchor" href="#二叉树的遍历" aria-hidden="true">#</a> 二叉树的遍历</h2><p>在计算机程序中，遍历本身是一个线性操作。所以遍历同样具有线性结构的数组或链表，是一件轻而易举的事情。</p><p>反观二叉树，是典型的非线性数据结构，遍历时需要把非线性关联的节点转化成一个线性的序列。以不同的方式来遍历，遍历出的序列顺序也不同。</p><p>从节点之间位置关系的角度来看，二叉树的遍历分为四种：</p><ul><li><strong>前序遍历</strong></li><li><strong>中序遍历</strong></li><li><strong>后序遍历</strong></li><li><strong>层序遍历</strong></li></ul><p>从更宏观的角度来看，二叉树的遍历归结为两大类：</p><ul><li><strong>深度优先遍历</strong>：前序遍历、中序遍历、后序遍历</li><li><strong>广度优先遍历</strong>：层序遍历</li></ul><div class="hint-container note"><p class="hint-container-title">注</p><p>深度优先和广度优先这两个概念不止局限于二叉树，它们更是一种抽象的算法思想，决定了访问某些复杂数据结构的顺序。在访问树、图，或其他一些复杂数据结构时，这两个概念常常被使用到</p></div><h3 id="深度优先遍历" tabindex="-1"><a class="header-anchor" href="#深度优先遍历" aria-hidden="true">#</a> 深度优先遍历</h3><p>所谓深度优先，顾名思义，就是偏向于纵深，“一头扎到底” 的访问方式。可能这种说法有些抽象，通过二叉树的 <strong>前序遍历</strong>、<strong>中序遍历</strong>、<strong>后序遍历</strong> 来理解深度优先。</p><ol><li><p>前序遍历。</p><p>二叉树的前序遍历，输出顺序是根节点、左子树、右子树。</p><figure><img src="'+d+'" alt="pre_order" tabindex="0" loading="lazy"><figcaption>pre_order</figcaption></figure><p>上图就是一个二叉树的前序遍历，每个节点左侧的序号代表该节点的输出顺序，详细步骤如下：</p><p>首先输出的是根节点1；由于根节点1 存在左孩子，输出左孩子节点2；由于节点2 也存在左孩子，输出左孩子节点4；节点4 既没有左孩子，也没有右孩子，那么回到节点2，输出节点2 的右孩子节点5；节点5 既没有左孩子，也没有右孩子，那么回到节点1，输出节点1 的右孩子节点3；节点3 没有左孩子，但是有右孩子，因此输出节点3 的右孩子节点6。到此为止，所有的节点遍历输出完毕。</p></li><li><p>中序遍历。</p><p>二叉树的中序遍历，输出顺序是左子树、根节点、右子树。</p><figure><img src="'+k+'" alt="inorder_traversal" tabindex="0" loading="lazy"><figcaption>inorder_traversal</figcaption></figure><p>上图就是一个二叉树的中序遍历，每个节点左侧的序号代表该节点的输出顺序，详细步骤如下：</p><p>首先访问根节点的左孩子，如果这个左孩子还拥有左孩子，则继续深入访问下去，一直找到不再有左孩子的节点，并输出该节点。显然，第一个没有左孩子的节点是节点4；依照中序遍历的次序，接下来输出节点4 的父节点2；再输出节点2 的右孩子节点5；以节点2 为根的左子树已经输出完毕，这时再输出整个二叉树的根节点1；由于节点3 没有左孩子，所以直接输出根节点1 的右孩子节点3；最后输出节点3 的右孩子节点6。到此为止，所有的节点遍历输出完毕。</p></li><li><p>后序遍历。</p><p>二叉树的后序遍历，输出顺序是左子树、右子树、根节点。</p><figure><img src="'+_+`" alt="postorder_traversal" tabindex="0" loading="lazy"><figcaption>postorder_traversal</figcaption></figure><p>上图就是一个二叉树的后序遍历，每个节点左侧的序号代表该节点的输出顺序，详细步骤如下：</p><p>首先访问根节点的左孩子，如果这个左孩子还拥有左孩子，则继续深入访问下去，一直找到不再有左孩子的节点，并输出该节点。显然，第一个没有左孩子的节点是节点4；依照后序遍历的次序，接下来访问节点4 的父节点2 的右孩子，输出节点5；以节点2 为根的左右子树已经输出完毕，再输出节点2；这时根节点1 的左子树输出完毕，输出根节点1 的右子树，节点3 没有左孩子，所以直接输出节点6；以节点3 为根的左右子树已经输出完毕，再输出节点3；根节点1 的左右节点已经输出完毕，最后输出根节点1。到此为止，所有的节点遍历输出完毕。</p></li></ol><p>二叉树的这三种遍历方式，用递归的思路可以非常简单地实现出来。</p><details class="hint-container details"><summary>代码</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data
        self<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token boolean">None</span>
        self<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token boolean">None</span>


<span class="token keyword">def</span> <span class="token function">create_binary_tree</span><span class="token punctuation">(</span>input_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    构建二叉树
    :param input_list：输出数列
    &quot;&quot;&quot;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>input_list <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>input_list<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    
    data <span class="token operator">=</span> input_list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> data <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    
    node <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    node<span class="token punctuation">.</span>left <span class="token operator">=</span> create_binary_tree<span class="token punctuation">(</span>input_list<span class="token punctuation">)</span>
    node<span class="token punctuation">.</span>right <span class="token operator">=</span> create_binary_tree<span class="token punctuation">(</span>input_list<span class="token punctuation">)</span>

    <span class="token keyword">return</span> node


<span class="token keyword">def</span> <span class="token function">pre_order_traversal</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    前序遍历
    :param node：二叉树节点
    &quot;&quot;&quot;</span>
    <span class="token keyword">if</span> node <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span>
    
    <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    pre_order_traversal<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
    pre_order_traversal<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> node


<span class="token keyword">def</span> <span class="token function">in_order_traversal</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    中序遍历
    :param node：二叉树节点
    &quot;&quot;&quot;</span>
    <span class="token keyword">if</span> node <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span>
    
    in_order_traversal<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    in_order_traversal<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> node


<span class="token keyword">def</span> <span class="token function">post_order_traversal</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    后序遍历
    :param node：二叉树节点
    &quot;&quot;&quot;</span>
    <span class="token keyword">if</span> node <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span>
    
    post_order_traversal<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
    post_order_traversal<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">)</span>

    <span class="token keyword">return</span> node


my_input_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
root <span class="token operator">=</span> create_binary_tree<span class="token punctuation">(</span>my_input_list<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;前序遍历：&#39;</span><span class="token punctuation">)</span>
pre_order_traversal<span class="token punctuation">(</span>root<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;中序遍历：&#39;</span><span class="token punctuation">)</span>
in_order_traversal<span class="token punctuation">(</span>root<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;后序遍历：&#39;</span><span class="token punctuation">)</span>
post_order_traversal<span class="token punctuation">(</span>root<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>这三种遍历方式的区别，仅仅是输出的执行位置不同：前序遍历的输出在前，中序遍历的输出在中间，后序遍历的输出在最后。</p><div class="hint-container warning"><p class="hint-container-title">二叉树的构建</p><p>二叉树的构建方法有很多，这里把一个线性的链表转化成非线性的二叉树，链表节点的顺序恰恰是二叉树前序遍历的顺序。链表中的空值，代表二叉树节点的左孩子或右孩子为空的情况。</p></div><p>在代码中，通过 <code>{3, 2, 9, None, None, 10, None, None, 8, None, 4}</code> 这样一个线性序列，构建成的二叉树如下：</p><figure><img src="`+g+'" alt="binary_tree_export" tabindex="0" loading="lazy"><figcaption>binary_tree_export</figcaption></figure><p>二叉树的深度优先遍历绝大多数可以用递归解决的问题，其实都可以用另一种数据结构来解决，这种数据结构就是 <strong>栈</strong>。因为递归和栈都有回溯的特性。例如：以二叉树的前序遍历为例。</p><ol><li><p>首先遍历二叉树的根节点1，放入栈中。</p><figure><img src="'+b+'" alt="binary_tree_stack_1" tabindex="0" loading="lazy"><figcaption>binary_tree_stack_1</figcaption></figure></li><li><p>遍历根节点1 的左孩子节点2，放入栈中。</p><figure><img src="'+v+'" alt="binary_tree_stack_2" tabindex="0" loading="lazy"><figcaption>binary_tree_stack_2</figcaption></figure></li><li><p>遍历节点2 的左孩子节点4，放入栈中。</p><figure><img src="'+m+'" alt="binary_tree_stack_3" tabindex="0" loading="lazy"><figcaption>binary_tree_stack_3</figcaption></figure></li><li><p>节点4 既没有左孩子，也没有右孩子，需要回溯到上一个节点2。</p><p>这时栈已经存储了刚才遍历的路径，让旧的栈顶元素4 出栈，就可以重新访问节点2，得到节点2 的右孩子节点5。</p><p>此时节点2 已经没有利用价值（已经访问过左孩子和右孩子），节点2 出栈，节点5 入栈。</p><figure><img src="'+f+'" alt="binary_tree_stack_4" tabindex="0" loading="lazy"><figcaption>binary_tree_stack_4</figcaption></figure></li><li><p>节点5 既没有左孩子，也没有右孩子，需要再次回溯，一直回溯到节点1。所以让节点5 出栈。</p><p>根节点1 的右孩子是节点3，节点1 出栈，节点3 入栈。</p><figure><img src="'+y+'" alt="binary_tree_stack_5" tabindex="0" loading="lazy"><figcaption>binary_tree_stack_5</figcaption></figure></li><li><p>节点3 的右孩子是节点6，节点3 出栈，节点6 入栈。</p><figure><img src="'+h+'" alt="binary_tree_stack_6" tabindex="0" loading="lazy"><figcaption>binary_tree_stack_6</figcaption></figure></li><li><p>节点6 既没有左孩子，也没有右孩子，所以节点6 出栈。此时栈为空，遍历结束。</p><figure><img src="'+x+`" alt="binary_tree_stack_7" tabindex="0" loading="lazy"><figcaption>binary_tree_stack_7</figcaption></figure></li></ol><details class="hint-container details"><summary>二叉树非递归前序遍历的代码</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">pre_order_traversal_with_stack</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>
    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">while</span> node <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>
            node <span class="token operator">=</span> node<span class="token punctuation">.</span>left
        
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            node <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
            node <span class="token operator">=</span> node<span class="token punctuation">.</span>right
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>至于二叉树的中序、后序遍历的非递归实现，思路和前序遍历差不多，都是利用栈来进行回溯。</p><h3 id="广度优先遍历" tabindex="-1"><a class="header-anchor" href="#广度优先遍历" aria-hidden="true">#</a> 广度优先遍历</h3><p>如果说深度优先遍历是在一个方向上 “一头扎到底”，那么广度优先遍历则恰恰相反：先在各个方向上各走出 1 步，再在各个方向上走出第 2 步、第 3 步……一直到各个方向全部走完。听起来有些抽象，通过二叉树的 <strong>层序遍历</strong> 来理解广度优先。</p><p>层序遍历，顾名思义，就是二叉树按照从根节点到叶子节点的层次关系，一层一层横向遍历各个节点。</p><figure><img src="`+q+'" alt="breadth_first" tabindex="0" loading="lazy"><figcaption>breadth_first</figcaption></figure><p>上图就是一个二叉树的层序遍历，每个节点左侧的序号代表该节点的输出顺序。</p><p>二叉树同一层次的节点之间是没有直接关联的，实现这种层序遍历需要借助 <strong>队列</strong> 数据结构来辅助工作。详细遍历步骤如下：</p><ol><li><p>根节点1 进入队列。</p><figure><img src="'+w+'" alt="binary_tree_sequence_1" tabindex="0" loading="lazy"><figcaption>binary_tree_sequence_1</figcaption></figure></li><li><p>节点1 出队，输出节点1，并得到节点1 的左孩子节点2、右孩子节点3。让节点2 和节点3 入队。</p><figure><img src="'+z+'" alt="binary_tree_sequence_2" tabindex="0" loading="lazy"><figcaption>binary_tree_sequence_2</figcaption></figure></li><li><p>节点2 出队，输出节点2，并得到节点2 的左孩子节点4、右孩子节点5。让节点4 和节点5 入队。</p><figure><img src="'+N+'" alt="binary_tree_sequence_3" tabindex="0" loading="lazy"><figcaption>binary_tree_sequence_3</figcaption></figure></li><li><p>节点3 出队，输出节点3，并得到节点3 的右孩子节点6。让节点6 入队。</p><figure><img src="'+j+'" alt="binary_tree_sequence_4" tabindex="0" loading="lazy"><figcaption>binary_tree_sequence_4</figcaption></figure></li><li><p>节点4 出队，输出节点4，由于节点4 没有孩子节点，所以没有新节点入队。</p><figure><img src="'+O+'" alt="binary_tree_sequence_5" tabindex="0" loading="lazy"><figcaption>binary_tree_sequence_5</figcaption></figure></li><li><p>节点5 出队，输出节点5，由于节点5 同样没有孩子节点，所以没有新节点入队。</p><figure><img src="'+Q+'" alt="binary_tree_sequence_6" tabindex="0" loading="lazy"><figcaption>binary_tree_sequence_6</figcaption></figure></li><li><p>节点6 出队，输出节点6，由于节点6 同样没有孩子节点，所以没有新节点入队。</p><figure><img src="'+B+`" alt="binary_tree_sequence_7" tabindex="0" loading="lazy"><figcaption>binary_tree_sequence_7</figcaption></figure></li></ol><p>到此为止，所有的节点遍历输出完毕。</p><details class="hint-container details"><summary>二叉树非递归层序遍历的代码</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> queue <span class="token keyword">import</span> Queue

<span class="token keyword">def</span> <span class="token function">level_order_traversal</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queue <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>
    queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span>node<span class="token punctuation">)</span>

    <span class="token keyword">while</span> node queue<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        node <span class="token operator">=</span> queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">)</span>

        <span class="token keyword">if</span> node<span class="token punctuation">.</span>left <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
        
        <span class="token keyword">if</span> node<span class="token punctuation">.</span>right <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="二叉堆" tabindex="-1"><a class="header-anchor" href="#二叉堆" aria-hidden="true">#</a> 二叉堆</h2><p>二叉堆本质上是一种完全二叉树，它分为两种类型：</p><ul><li><p><strong>最大堆</strong></p><p>最大堆的任何一个父节点的值，都大于或等于它左孩子或右孩子节点的值。如下图所示：</p><figure><img src="`+C+'" alt="max_heap" tabindex="0" loading="lazy"><figcaption>max_heap</figcaption></figure></li><li><p><strong>最小堆</strong></p><p>最小堆的任何一个父节点的值，都小于或等于它左孩子或右孩子节点的值。如下图所示：</p><figure><img src="'+E+'" alt="min_heap" tabindex="0" loading="lazy"><figcaption>min_heap</figcaption></figure></li></ul><p>二叉堆的根节点叫作 <strong>堆顶</strong>。最大堆和最小堆的特点决定了：最大堆的堆顶是整个堆中的 <strong>最大元素</strong>；最小堆的堆顶是整个堆中的 <strong>最小元素。</strong></p><h3 id="二叉堆的自我调整" tabindex="-1"><a class="header-anchor" href="#二叉堆的自我调整" aria-hidden="true">#</a> 二叉堆的自我调整</h3><p>对于二叉堆，有如下几种操作：</p><ul><li><strong>插入节点</strong></li><li><strong>删除节点</strong></li><li><strong>构建二叉堆</strong></li></ul><p>这几种操作都基于堆的 <strong>自我调整</strong>。所谓堆的自我调整，就是把一个不符合堆性质的完全二叉树，调整成一个堆。通过以 <strong>最小堆</strong> 为例，来理解二叉堆的 <strong>自我调整。</strong></p><ol><li><p>插入节点。</p><p>当在二叉堆中插入节点时，插入位置是完全二叉树的最后一个位置。例如：插入一个新节点，值是 <code>0</code>。</p><figure><img src="'+F+'" alt="insert_binary_heap_1" tabindex="0" loading="lazy"><figcaption>insert_binary_heap_1</figcaption></figure><p>这时，新节点的父节点5 比 <code>0</code> 大，显然不符合最小堆的性质。于是让新节点 “上浮”，和父节点交换位置。</p><figure><img src="'+P+'" alt="insert_binary_heap_2" tabindex="0" loading="lazy"><figcaption>insert_binary_heap_2</figcaption></figure><p>继续用节点0 和父节点3 做比较，因为 <code>0 &lt; 3</code>，则让新节点继续 “上浮”。</p><figure><img src="'+T+'" alt="insert_binary_heap_3" tabindex="0" loading="lazy"><figcaption>insert_binary_heap_3</figcaption></figure><p>继续比较，最终新节点0 “上浮” 到了堆顶位置。</p><figure><img src="'+V+'" alt="insert_binary_heap_4" tabindex="0" loading="lazy"><figcaption>insert_binary_heap_4</figcaption></figure></li><li><p>删除节点。</p><p>从二叉堆删除节点的过程和插入节点的过程正好相反，所删除的是处于堆顶的节点。例如：删除最小堆的堆顶节点1。</p><figure><img src="'+A+'" alt="delete_binary_heap_1" tabindex="0" loading="lazy"><figcaption>delete_binary_heap_1</figcaption></figure><p>这时，为了继续维持完全二叉树的结构，把堆的最后一个节点10 临时补到原本堆顶的位置。</p><figure><img src="'+I+'" alt="delete_binary_heap_2" tabindex="0" loading="lazy"><figcaption>delete_binary_heap_2</figcaption></figure><p>接下来，让暂处堆顶位置的节点10 和它的左孩子、右孩子进行比较，如果左孩子、右孩子节点中最小的一个（显然是节点2）比节点10 小，那么让节点10 “下沉”。</p><figure><img src="'+L+'" alt="delete_binary_heap_3" tabindex="0" loading="lazy"><figcaption>delete_binary_heap_3</figcaption></figure><p>继续让节点10 和它的左孩子、右孩子做比较，左孩子、右孩子中最小的是节点7，由于 <code>10 &gt; 7</code>，让节点10 继续 “下沉”。</p><figure><img src="'+S+'" alt="delete_binary_heap_4" tabindex="0" loading="lazy"><figcaption>delete_binary_heap_4</figcaption></figure><p>这样一来，二叉堆重新得到了调整。</p></li><li><p>构建二叉堆。</p><p>构建二叉堆，也就是把一个无序的完全二叉树调整为二叉堆，本质就是让所有非叶子节点依次 “下沉”。例如：一个无序完全二叉树的，如下图所示：</p><figure><img src="'+D+'" alt="build_binary_heap_1" tabindex="0" loading="lazy"><figcaption>build_binary_heap_1</figcaption></figure><p>首先，从最后一个非叶子节点开始，也就是从节点10 开始。如果节点10 大于它的左孩子、右孩子节点中最小的一个，则节点10 “下沉”。</p><figure><img src="'+G+'" alt="build_binary_heap_2" tabindex="0" loading="lazy"><figcaption>build_binary_heap_2</figcaption></figure><p>接下来轮到节点3，如果节点3 大于它的左孩子、右孩子节点中最小的一个，则节点3 “下沉”。</p><figure><img src="'+H+'" alt="build_binary_heap_3" tabindex="0" loading="lazy"><figcaption>build_binary_heap_3</figcaption></figure><p>然后轮到节点1，如果节点1 大于它的左孩子、右孩子节点中最小的一个，则节点1 “下沉”。事实上，节点1 小于它的左孩子、右孩子，所以不用改变。接下来轮到节点7，如果节点7 大于它的左孩子、右孩子节点中最小的一个，则节点7 “下沉”。</p><figure><img src="'+J+'" alt="build_binary_heap_4" tabindex="0" loading="lazy"><figcaption>build_binary_heap_4</figcaption></figure><p>继续比较节点7，继续 “下沉”。</p><figure><img src="'+K+`" alt="build_binary_heap_5" tabindex="0" loading="lazy"><figcaption>build_binary_heap_5</figcaption></figure><p>经过上述几轮比较和 “下沉” 操作，最终每一节点都小于它的左孩子、右孩子节点，一个无序的完全二叉树就被构建成了一个最小堆。</p></li></ol><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>堆的插入操作是单一节点的 “上浮”，堆的删除操作是单一节点的 “下沉”，这两个操作的平均交换次数都是堆高度的一半，所以时间复杂度是 <strong>O(log<sub>2</sub>n)</strong></p><p>堆的构建，需要所有非叶子节点依次 “下沉”，所以时间复杂度是 <strong>O(n)</strong></p></div><h3 id="二叉堆的代码实现" tabindex="-1"><a class="header-anchor" href="#二叉堆的代码实现" aria-hidden="true">#</a> 二叉堆的代码实现</h3><p>在展示代码之前，还需要明确一点：二叉堆虽然是一个完全二叉树，但它的存储方式并不是链式存储，而是顺序存储。换句话说，二叉堆的所有节点都存储在数组中。</p><p>在数组中没有 <strong>左指针</strong> 和 <strong>右指针</strong> 的情况下，定位一个父节点的左孩子和右孩子可以依靠 <strong>数组下标</strong> 来计算。</p><p>假设父节点的下标是 <code>parent</code>，那么它的左孩子的下标就是 <code>2 × parent + 1</code>；右孩子的下标就是 <code>2 × parent + 2</code>。</p><p>例如：在上面的例子中，节点6 包含 <code>9</code> 和 <code>10</code> 两个孩子节点，节点6 在数组中的下标是 <code>3</code>，节点9 在数组中的下标是 <code>7</code>，节点10 在数组中的下标是 <code>8</code>。</p><p>那么，<code>7 = 3 × 2 + 1</code>、<code>8 = 3 × 2 + 2</code>，刚好符合规律。有了这个前提，下面的代码就更好理解了。</p><details class="hint-container details"><summary>代码</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">up_adjust</span><span class="token punctuation">(</span>array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    二叉堆的尾节点上浮操作
    :param array：原数组
    &quot;&quot;&quot;</span>
    child_index <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
    parent_index <span class="token operator">=</span> <span class="token punctuation">(</span>child_index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>

    <span class="token comment"># temp 保存插入的叶子节点值，用于最后的赋值</span>
    temp <span class="token operator">=</span> array<span class="token punctuation">[</span>child_index<span class="token punctuation">]</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>child_index <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>parent_index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 无序真正交换，单向赋值即可</span>
        array<span class="token punctuation">[</span>child_index<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>parent_index<span class="token punctuation">]</span>
        child_index <span class="token operator">=</span> parent_index
        parent_index <span class="token operator">=</span> <span class="token punctuation">(</span>parent_index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
    
    array<span class="token punctuation">[</span>child_index<span class="token punctuation">]</span> <span class="token operator">=</span> temp


<span class="token keyword">def</span> <span class="token function">down_adjust</span><span class="token punctuation">(</span>parent_index<span class="token punctuation">,</span> length<span class="token punctuation">,</span> array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    二叉堆的节点下沉操作
    :param parent_index：待下沉的节点下标
    :param length：堆的长度范围
    :param array：原数组
    &quot;&quot;&quot;</span>
    <span class="token comment"># temp 保存父节点值，用于最后的赋值</span>
    temp <span class="token operator">=</span> array<span class="token punctuation">[</span>parent_index<span class="token punctuation">]</span>
    child_index <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> parent_index <span class="token operator">+</span> <span class="token number">1</span>

    <span class="token keyword">while</span> child_index <span class="token operator">&lt;</span> length<span class="token punctuation">:</span>
        <span class="token comment"># 如果父节点的值小于任何一个孩子的值，直接跳出</span>
        <span class="token keyword">if</span> temp <span class="token operator">&lt;=</span> array<span class="token punctuation">[</span>child_index<span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>

        <span class="token comment"># 无须真正交换，单向赋值即可</span>
        array<span class="token punctuation">[</span>parent_index<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>child_index<span class="token punctuation">]</span>
        parent_index <span class="token operator">=</span> child_index
        child_index <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> child_index <span class="token operator">+</span> <span class="token number">1</span>
    
    array<span class="token punctuation">[</span>parent_index<span class="token punctuation">]</span> <span class="token operator">=</span> temp


<span class="token keyword">def</span> <span class="token function">build_heap</span><span class="token punctuation">(</span>array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    二叉堆的构建操作
    :param array：原数组
    &quot;&quot;&quot;</span>
    <span class="token comment"># 从最后一个非叶子节点开始，依次下沉调整</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        down_adjust<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span>


my_array <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
up_adjust<span class="token punctuation">(</span>my_array<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_array<span class="token punctuation">)</span>

my_array <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
build_heap<span class="token punctuation">(</span>my_array<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_array<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>代码中有一个优化的点，就是在父节点和孩子节点做连续交换时，并不一定要真的交换，只需先把交换一方的值存入 temp 变量，做单向覆盖，循环结束后，再把 temp 的值存入交换后的最终位置即可。</p><h2 id="优先队列" tabindex="-1"><a class="header-anchor" href="#优先队列" aria-hidden="true">#</a> 优先队列</h2><h3 id="优先队列的特点" tabindex="-1"><a class="header-anchor" href="#优先队列的特点" aria-hidden="true">#</a> 优先队列的特点</h3><p>队列的特点是 <strong>先进先出（FIFO）</strong>。入队列，将新元素置于队尾；出队列，队头元素最先被移出。</p><p>优先队列不再遵循先入先出的原则，而是分为两种情况：</p><ul><li><strong>最大优先队列</strong>：无论入队顺序如何，都是当前最大的元素优先出队</li><li><strong>最小优先队列</strong>：无论入队顺序如何，都是当前最小的元素优先出队</li></ul><p>例如：有一个最大优先队列，其中的最大元素是 <code>8</code>，那么虽然 <code>8</code> 并不是队头元素，但出队时仍然让元素 <code>8</code> 首先出队。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>优先队列如果利用线性数据结构实现，时间复杂度 <strong>较高</strong>，可以使用 <strong>二叉堆</strong></p></div><h3 id="优先队列的实现" tabindex="-1"><a class="header-anchor" href="#优先队列的实现" aria-hidden="true">#</a> 优先队列的实现</h3><p>二叉堆的特性：</p><ul><li><strong>最大堆的堆顶是整个堆中的最大元素</strong></li><li><strong>最小堆的堆顶是整个堆中的最小元素</strong></li></ul><p>因此，可以用最大堆来实现最大优先队列，这样的话，每一次入队操作就是堆的插入操作，每一次出队操作就是删除堆顶节点。</p><p><strong>入队操作</strong> 具体步骤如下：</p><ol><li><p>插入新节点5。</p><figure><img src="`+M+'" alt="priority_queue_in_1" tabindex="0" loading="lazy"><figcaption>priority_queue_in_1</figcaption></figure></li><li><p>新节点5 “上浮” 到合适位置。</p><figure><img src="'+R+'" alt="priority_queue_in_2" tabindex="0" loading="lazy"><figcaption>priority_queue_in_2</figcaption></figure></li></ol><p><strong>出队操作</strong> 具体步骤如下：</p><ol><li><p>让原堆顶节点10 出队。</p><figure><img src="'+U+'" alt="priority_queue_out_1" tabindex="0" loading="lazy"><figcaption>priority_queue_out_1</figcaption></figure></li><li><p>把最后一个节点1 替换到堆顶位置。</p><figure><img src="'+W+'" alt="priority_queue_out_2" tabindex="0" loading="lazy"><figcaption>priority_queue_out_2</figcaption></figure></li><li><p>节点1 “下沉”，节点9 成为新堆顶。</p><figure><img src="'+X+`" alt="priority_queue_out_3" tabindex="0" loading="lazy"><figcaption>priority_queue_out_3</figcaption></figure></li></ol><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>二叉堆节点 “上浮” 和 “下沉” 的时间复杂度都是 <strong>O(log<sub>2</sub>n)</strong>，所以优先队列入队和出队的时间复杂度也是 <strong>O(log<sub>2</sub>n)</strong></p></div><details class="hint-container details"><summary>代码</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">PriorityQueue</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span>
    
    <span class="token keyword">def</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>array<span class="token punctuation">.</span>append<span class="token punctuation">(</span>element<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>size <span class="token operator">+=</span> <span class="token number">1</span>
        self<span class="token punctuation">.</span>up_adjust<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">dequeue</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>size <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">&#39;队列为空！&#39;</span><span class="token punctuation">)</span>
        
        head <span class="token operator">=</span> self<span class="token punctuation">.</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>self<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>size <span class="token operator">-=</span> <span class="token number">1</span>
        self<span class="token punctuation">.</span>down_adjust<span class="token punctuation">(</span><span class="token punctuation">)</span>
        
        <span class="token keyword">return</span> head
    
    <span class="token keyword">def</span> <span class="token function">up_adjust</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        child_index <span class="token operator">=</span> self<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span>
        parent_index <span class="token operator">=</span> <span class="token punctuation">(</span>child_index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>

        <span class="token comment"># temp 保存插入的叶子节点值，用于最后的赋值</span>
        temp <span class="token operator">=</span> self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>child_index<span class="token punctuation">]</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>child_index <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>temp <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>parent_index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># 无须真正交换，单向赋值即可</span>
            self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>child_index<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>parent_index<span class="token punctuation">]</span>
            child_index <span class="token operator">=</span> parent_index
            parent_index <span class="token operator">=</span> <span class="token punctuation">(</span>parent_index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        
        self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>child_index<span class="token punctuation">]</span> <span class="token operator">=</span> temp
    
    <span class="token keyword">def</span> <span class="token function">down_adjust</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        parent_index <span class="token operator">=</span> <span class="token number">0</span>

        <span class="token comment"># temp 保存父节点值，用于最后的赋值</span>
        temp <span class="token operator">=</span> self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>parent_index<span class="token punctuation">]</span>
        child_index <span class="token operator">=</span> <span class="token number">1</span>

        <span class="token keyword">while</span> child_index <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>size<span class="token punctuation">:</span>
            <span class="token comment"># 如果有右孩子，且右孩子的值大于左孩子的值，则定位到右孩子</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>child_index <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>child_index 
                <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>child_index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                child_index <span class="token operator">+=</span> <span class="token number">1</span>
            
            <span class="token comment"># 如果父节点的值大于任何一个孩子的值，直接跳出</span>
            <span class="token keyword">if</span> temp <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>child_index<span class="token punctuation">]</span><span class="token punctuation">:</span>
                <span class="token keyword">break</span>

            <span class="token comment"># 无须真正交换，单向赋值即可</span>
            self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>parent_index<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>child_index<span class="token punctuation">]</span>
            parent_index <span class="token operator">=</span> child_index
            child_index <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> child_index <span class="token operator">+</span> <span class="token number">1</span>

        self<span class="token punctuation">.</span>array<span class="token punctuation">[</span>parent_index<span class="token punctuation">]</span> <span class="token operator">=</span> temp


queue <span class="token operator">=</span> PriorityQueue<span class="token punctuation">(</span><span class="token punctuation">)</span>
queue<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
queue<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
queue<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
queue<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
queue<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>dequeue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>dequeue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>上述代码采用数组来存储二叉堆的元素，因此当元素数量超过数组长度时，需要进行扩容来扩大数组长度。</p>`,89),$=[Z];function nn(sn,an){return s(),a("div",null,$)}const pn=n(Y,[["render",nn],["__file","trees.html.vue"]]);export{pn as default};
